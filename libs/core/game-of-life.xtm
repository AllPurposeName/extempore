;;; game-of-life.xtm -- Conway's Game of Life

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; a simple Conway's game of life in Extempore. Uses ASCII-art (to
;; stdout) for display.

;;; Code:

(sys:load-preload-check 'gameoflife)
(define *xtmlib-gameoflife-loaded* #f)

;;                w   h   data
(bind-type World <i64,i64,i8*>)

(bind-func world_width
  (lambda (w:World*)
    (tref w 0)))

(bind-func world_height
  (lambda (w:World*)
    (tref w 1)))

(bind-func world_data
  (lambda (w:World*)
    (tref w 2)))

(bind-func print_world
  (lambda (w:World*)
    (printf "World: %lld x %lld (data %p)\n"
            (world_width w)
            (world_height w)
            (world_data w))))
(bind-poly print print_world)

(bind-func world_create
  (lambda (w h)
    ;; make grid (w+2)*(h+2) for "guard" cells
    (let ((data (zalloc (* w h)))
          (res (World w h data)))
      (printf "Created Game of Life ")
      (print_world res)
      res)))

(bind-func world_data_index
  (lambda (w:World* x y)
    (let ((width (world_width w))
          (height (world_height w))
          (xrem (% x width))
          (yrem (% y height)))
      (+ (* (+ yrem (< yrem 0) height 0) width)
         (+ xrem (< xrem 0) width 0)))))

(bind-func world_data_size
  (lambda (w:World*)
    (* (world_width w)
       (world_height w))))

(bind-func cell_value
  (lambda (w:World* x y)
    (pref (world_data w)
          (world_data_index w x y))))

(bind-func cell_set_value
  (lambda (w:World* x y value)
    (pset! (world_data w)
           (world_data_index w x y)
           value)))

(bind-func world_init
  (lambda (w:World* density)
    (doloop (k (world_data_size w))
      (pset! (world_data w) k 0))
    (doloop (i (world_height w))
      (doloop (j (world_width w))
        (cell_set_value w i j
                        (if (< (random) density) 1 0))))))

(bind-func cell_count_neighbors
  (lambda (w:World* x y)
    (+ (cell_value w (- x 1) (- y 1))
       (cell_value w (- x 1) y)
       (cell_value w (- x 1) (+ y 1))
       (cell_value w x (- y 1))
       (cell_value w x (+ y 1))
       (cell_value w (+ x 1) (- y 1))
       (cell_value w (+ x 1) y)
       (cell_value w (+ x 1) (+ y 1)))))

(bind-func world_step
  (lambda (w:World*)
    (let ((cv 0)
          (n 0))
      (doloop (i (world_height w))
        (doloop (j (world_width w))
          (set! cv (cell_value w i j))
          (set! n (cell_count_neighbors w i j))
          (if (<> cv 0:i8)
              (if (or (< n 2:i8)
                      (> n 3:i8))
                  (begin (printf "i = %lld j = %lld cv = %u n = %lld - cell dies!\n" i j cv n)
                         (cell_set_value w i j 0))
                  (begin (printf "i = %lld j = %lld cv = %u n = %lld\n" i j cv n) 0:i8))
              ;; cell is dead
              (if (= n 3:i8)
                  (begin (printf "i = %lld j = %lld cv = %u n = %lld - cell comes to life!\n" i j cv n)
                         (cell_set_value w i j 1))
                  (begin (printf "i = %lld j = %lld cv = %u n = %lld\n" i j cv n) 0:i8))))))))

(bind-func world_basic_print
  (lambda (w:World*)
    (doloop (i (world_data_size w))
      (printf "%c " (if (<> (pref (world_data w) i) 0)
                        (pref "O" 0)
                        (pref "." 0))))
    (println)
    (println)))

(bind-func world_ascii_print
  (lambda (w:World*)
    (let ((width (world_width w))
          (height (world_height w))
          (world_string_length (* (+ width 1) height))
          (world_string:i8* (zalloc world_string_length)))
      (doloop (i height)
        (doloop (j width)
          (if (<> (cell_value w i j) 0)
              (pset! world_string (+ (* i (+ width 1)) j) (pref "0" 0))
              (pset! world_string (+ (* i (+ width 1)) j) (pref " " 0)))
          (if (= j (- width 1))
              (pset! world_string
                     (- (* (+ 1 i) (+ width 1)) 1)
                     (pref "\n" 0)))))
      (printf "\n%.*s"
              world_string_length
              world_string))))

(define *xtmlib-gameoflife-loaded* #t)
