;; 
;; Copyright (c) 2011, Andrew Sorensen
;; 
;; All rights reserved.
;; 
;; 
;; Redistribution and use in source and binary forms, with or without 
;; modification, are permitted provided that the following conditions are met:
;; 
;; 1. Redistributions of source code must retain the above copyright notice, 
;;    this list of conditions and the following disclaimer.
;; 
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation 
;;    and/or other materials provided with the distribution.
;; 
;; Neither the name of the authors nor other contributors may be used to endorse
;; or promote products derived from this software without specific prior written 
;; permission.
;; 
;; 
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
;; ARE DISCLEXTD. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
;; POSSIBILITY OF SUCH DAMAGE.
;; 
;; 


;; std.xtm is loaded automatically by all processes on startup
;; std.xtm is for xtlang as scheme.xtm is for scheme.

;; lib-loading config

(sys:load "libs/aot-cache/std.xtm" 'quiet)
(sys:load-preload-check 'std)
(define *xtmlib-std-loaded* #f)

(impc:aot:insert-header "xtmstd")

(sys:compile-init-ll)
(impc:aot:insert-forms (sys:compile-init-ll))

;; (suppress-compiler-messages #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SETUP NAN's
(bind-val NaNf float  0.0 "not-a-number (NaN)")
(bind-val NaNd double 0.0 "not-a-number (NaN)")

(bind-func set_float_nans_
  (lambda ()
    (let ((nan32 #x7FC00000)
          (nan64 #x7FFC000000000000)
          (n32:i32* (alloc))
          (n64:i64* (alloc)))
      (pset! n32 0 nan32)
      (pset! n64 0 nan64)
      (set! NaNf (pref (cast n32 float*) 0))
      (set! NaNd (pref (cast n64 double*) 0))
      void)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some global aliases

(bind-alias bool i1 "boolean true/false type")
(if (= (sys:pointer-size) 64)
    (bind-alias size_t i64 "useful for working with C libraries")
    (bind-alias size_t i32 "useful for working with C libraries"))
(bind-alias enum i32 "useful for working with C libraries")

;;;;;;;;;;;;; this for audio ;;;;;;;;;;;;;;;;;;
;; THESE ALL NEED TO BE CHANGED TOGETHER!!!!
(bind-alias SAMPLE float "audio I/O sample type in the dsp processing chain")
(bind-alias DSP [SAMPLE,SAMPLE,i64,i64,SAMPLE*]* "audio output callback type")
(bind-alias DSPMT [SAMPLE,SAMPLE*,i64,i64,SAMPLE*]* "(multithreaded) audio output callback type")
(bind-alias DSPMC [void,float*,float*,i64,i8*]* "buffered audio output callback type")
(bind-alias DSPMCMT [void,float**,float*,i64,i8*]* "buffered (multithreaded) audio output callback type")
(bind-func audio_64bit (lambda () 0:i1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-poly random imp_randf "polymorphic (pseudo)random number generation")
(bind-poly random imp_randd)
(bind-poly random imp_rand1_i32)
(bind-poly random imp_rand2_i32)
(bind-poly random imp_rand1_i64)
(bind-poly random imp_rand2_i64)
(bind-poly random imp_rand1_f)
(bind-poly random imp_rand2_f)
(bind-poly random imp_rand1_d)
(bind-poly random imp_rand2_d)

;(bind-poly cos cosf)
;(bind-poly cos llvm_cos)
;(bind-poly sin sinf)
;(bind-poly sin llvm_sin)
(bind-poly tan tanf)
(bind-poly tan llvm_tan)
(bind-poly cosh coshf)
(bind-poly cosh llvm_cosh)
(bind-poly tanh tanhf)
(bind-poly tanh llvm_tanh)
(bind-poly sinh sinhf)
(bind-poly sinh llvm_sinh)
(bind-poly acos acosf)
(bind-poly acos llvm_acos)
(bind-poly asin asinf)
(bind-poly asin llvm_asin)
(bind-poly atan atanf)
(bind-poly atan llvm_atan)
(bind-poly atan2 atan2f)
(bind-poly atan2 llvm_atan2)
;; (bind-poly ceil ceilf)
;; (bind-poly ceil llvm_ceil)
;; (bind-poly floor floorf)
;; (bind-poly floor llvm_floor)
;; (bind-poly exp expf)
;; (bind-poly exp llvm_exp)
;; (bind-poly fmod fmodf)
;; (bind-poly fmod llvm_fmod)
;; (bind-poly pow powf)
;; (bind-poly pow llvm_pow)
;; (bind-poly log logf)
;; (bind-poly log llvm_log)
;; (bind-poly log2 log2f) 
;; (bind-poly log2 llvm_log2) 
;; (bind-poly log10 log10f)
;; (bind-poly log10 llvm_log10)
;; (bind-poly sqrt sqrtf)
;; (bind-poly sqrt llvm_sqrt)
;; (bind-poly fabs fabsf)
;; (bind-poly fabs llvm_fabs)


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; support for zcopy

(bind-func zcopy_i1
  (lambda (x:i1 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i8
  (lambda (x:i8 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i32
  (lambda (x:i32 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i64
  (lambda (x:i64 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_f
  (lambda (x:float fromz:mzone* toz:mzone*) x))

(bind-func zcopy_d
  (lambda (x:double fromz:mzone* toz:mzone*) x))

(bind-poly zcopy zcopy_i1)
(bind-poly zcopy zcopy_i8)
(bind-poly zcopy zcopy_i32)
(bind-poly zcopy zcopy_i64)
(bind-poly zcopy zcopy_f)
(bind-poly zcopy zcopy_d)

(impc:aot:do-or-emit
 (bind-func zcopy:[!a,!a,mzone*,mzone*]*
   "generic \"catch-all\" zcopy"
   (lambda (x fromz toz)
     (if (llvm_ptr_in_zone fromz (convert x))
         (let ((size (llvm_zone_ptr_size (convert x)))
               (newdat (convert (llvm_zone_malloc (llvm_peek_zone_stack) size))))
           (memcpy (convert newdat) (convert x) size)
           newdat)
         x))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XTLang strings

;; 
(bind-type String <size_t,i8*>
  "xtlang's string type

Tuple contains <string_length,characters>

Should be created, modified and destroyed with the String_* library functions.

Second item in tuple is a char* c-style string ")

;; must be a Halloced string!
(bind-func String_free
  "Free an xtlang String

Frees both the underlying character array and the tuple container.
@param str - String to be deleted 
"
  (lambda (str:String*)
    (free (tref str 1))
    (free str)
    void))

;; String printing!
(bind-func String_print:[void,String*]*
  "Prints all characters in a given string object.

Overloads and should be used via the `println` function
If the string is empty will print a zero length string

@param str - String to be printed
"
  (lambda (x)
    (if (null? x)
        (begin (printf "")
               void)
        (begin (printf "'%s'" (tref x 1))
               void))))

(bind-poly print String_print)

(bind-func String_toString:[String*,String*]*
  "convert String to String

This is just the identity function, since a String is already a String."
  (lambda (x)
    x))

(bind-poly toString String_toString)

(bind-func String_length
  "Takes a (null-terminated) String* and returns the string length

@param str - the String*
@return length - length (via strlen)"
  (lambda (str:String*)
    (strlen (tref str 1))))

(bind-func String_size
  "Takes a String* and returns the size of allocated memory

Not necessarily the same as String_length - 
@param str - the String
@return size - size of alloc'ed memory"
  (lambda (str:String*)
    (tref str 0)))

(bind-func String_cstr
  "Return an i8* pointer to the underlying char array

@param str
@return c_str - the underlying i8 'char' array"
  (lambda (str:String*)
    (tref str 1)))

;; easy String dataconstructors from c strings

;; zone alloc'ed versions

(bind-func String_from_cptr
  "Create an xtlang String type from a c string (char array)

Use via the polymorphic Str function

@param str - character array from which to generate a new String
@return - the new String*
"
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String_z lgth s)))
      str)))

(bind-func String_copy
  "Create a new xtlang String type from an existing String

Use via the polymorphic Str function

@param str - pointer to the String to copy
@return - the new String*
"
  (lambda (str:String*)
    (let ((lgth (String_length str))
          (new_str (String_z lgth (String_cstr str))))
      new_str)))

(bind-poly String String_from_cptr)
(bind-poly String String_copy)

;; deprecated - use the (now polymorphic) "String" closure instead
(bind-poly Str String_from_cptr)
(bind-poly Str String_copy)

;; heap alloc'ed versions

(bind-func String_from_cptr_h
  "Create an (heap-allocated) xtlang String type from a c string (char array)

Use via the polymorphic Str function

@param str - character array from which to generate a new String
@return - the new String*
"
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String_h lgth s)))
      str)))

(bind-func String_copy_h
  "Create a new (heap-allocated) xtlang String type from an existing String

Use via the polymorphic Str function

@param str - pointer to the String to copy
@return - the new String*
"
  (lambda (str:String*)
    (let ((lgth (String_length str))
          (new_str (String_h lgth (String_cstr str))))
      new_str)))

(bind-poly Str_h String_from_cptr_h)
(bind-poly Str_h String_copy_h)


(bind-func String_cat2
  "Concatenate 2 Strings

If one string is null, the alternate String will be returned.
If both strings are null an empty String will be returned 

@param s1 - first string to be concatenated
@param s2 - second string to be concatenated
@return - pointer to new String 
"
  (lambda (s1:String* s2:String*)
    (if (null? s2) (String s1)
        (if (null? s1) (String s2)
            (let ((size (+ (tref s1 0) (tref s2 0)))
                  (news:i8* (zalloc (+ 1 size))))
              (strcpy news (tref s1 1))
              (strncat news (tref s2 1) size)
              (String news))))))

(bind-func String_cat2_h
  (lambda (s1:String* s2:String*)
    (if (null? s2) (String s1)
        (if (null? s1) (String s2)
            (let ((size (+ (tref s1 0) (tref s2 0)))
                  (news:i8* (zalloc (+ 1 size))))
              (strcpy news (tref s1 1))
              (strncat news (tref s2 1) size)
              (Str_h news))))))

(bind-func String_equal
  "Equality test for String

@param s1 - first string
@param s2 - second string
@return - true/false
"
  (lambda (s1:String* s2:String*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

;; String_cat macro (poor-man's varargs)
(impc:aot:do-or-emit
 (define-macro (String_cat . args)
   (apply String_cat_macro args)))

(impc:aot:do-or-emit
 (define (String_cat_macro . args)
   `(String_cat2 ,(car args)
                 ,(if (null? (cdr args))
                      'null
                      (apply String_cat_macro (cdr args))))))

;; bind to eq
(bind-poly equal String_equal)

;; levenshtein edit distance
(bind-func String_levenshtein
  "Returns the levenshtein distance between two strings

@param s - string 1
@param t - string 2
@return - levenshetein distance
"
  (lambda (s:String* t:String*)
    (let ((i 0) (j 0)
          ;; column-major indexing closure
          (s_cstr (String_cstr s))
          (slen:size_t (String_length s))
          (t_cstr (String_cstr t))
          (tlen:size_t (String_length t))
          (row:i64* (salloc (+ slen 1)))
          (prev_row:i64* (salloc (+ slen 1)))
          (min3 (lambda (a:i64 b c)
                  (if (< a b)
                      (if (< a c)
                          a c)
                      (if (< b c)
                          b c)))))
      (dotimes (i (+ tlen 1))
        (pset! prev_row i i))
      (dotimes (i slen)
        (pset! row 0 (+ i 1))
        (dotimes (j tlen)
          (pset! row (+ j 1)
                 (min3 (+ (pref row j) 1)
                       (+ 1 (pref prev_row (+ j 1)))
                       (+ (pref prev_row j)
                          (if (= (pref s_cstr j)
                                 (pref t_cstr i))
                              0 1)))))
        (let ((tmp_row:i64* null))
          (set! tmp_row prev_row)
          (set! prev_row row)
          (set! row tmp_row)))
      (pref prev_row tlen))))

(bind-func String_similarity
  (lambda (s:String* t:String*)
    (/ 1.0 (i64tod (+ 1 (String_levenshtein s t))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; equality
;; 
;; this is the catch-all for equality testing
;; covers all numeric types
;; will also catch all for all pointer types
;; which compares against memory address
;; otherwise expect poly override
;;
;; i.e. see string below
(impc:aot:do-or-emit
 (bind-func equal:[bool,!a,!b]*
   "basic equality check"
   (lambda (a b)
     (= a b))))

;;;;;;;;;;;;;;;;;;;;;;;
;;
;; formatting!
;;
;; same as print but returns string
;; should REPLACE PRINT!

(bind-func String_format_return
  (lambda ()
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "\n")
      (String str))))

;; prints a space
(bind-func String_format_space
  (lambda ()
    (String " ")))

(bind-func String_format_i1
  (lambda (x:i1)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%d" x)
      (String str))))

(bind-func String_format_i8
  (lambda (x:i8)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%d" x)
      (String str))))

(bind-func String_format_i32
  (lambda (x:i32)
    (let ((str:i8* (salloc 256)))    
      (llvm_sprintf str "%d" x)
      (String str))))

(bind-func String_format_i64
  (lambda (x:i64)
    (let ((str:i8* (salloc 256)))    
      (llvm_sprintf str "%lld" x)
      (String str))))

(bind-func String_format_f
  (lambda (x:float)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%f" (ftod x))
      (String str))))

(bind-func String_format_d
  (lambda (x:double)
    (let ((str:i8* (salloc 256)))      
      (llvm_sprintf str "%f" x)
      (String str))))

(bind-poly String_format String_format_i1)
(bind-poly String_format String_format_i8)
(bind-poly String_format String_format_i32)
(bind-poly String_format String_format_i64)
(bind-poly String_format String_format_f)
(bind-poly String_format String_format_d)

;; String formatting!
(bind-func String_format_String:[String*,String*]*
  (lambda (x) x))

(bind-poly String_format String_format_String)

;;;;;;;;;;;;;;;;
;; printing

;; prints a line break
(bind-func print_return
  (lambda () (llvm_printf "\n") void))

;; prints a space
(bind-func print_space
  (lambda () (printf " ") void))

(bind-func print_i1
  (lambda (x:i1) (printf "%d" x) void))

(bind-func print_i8
  (lambda (x:i8) (printf "%d" (convert x i32)) void))

(bind-func print_i32
  (lambda (x:i32) (printf "%d" x) void))

(bind-func print_i64
  (lambda (x:i64) (printf "%lld" x) void))

(bind-func print_f
  (lambda (x:float) (printf "%f" (ftod x)) void))

(bind-func print_d
  (lambda (x:double) (printf "%f" x) void))

(bind-poly print print_i1)
(bind-poly print print_i8)
(bind-poly print print_i32)
(bind-poly print print_i64)
(bind-poly print print_f)
(bind-poly print print_d)

(impc:aot:do-or-emit
 (bind-func print:[void,!a]
   "generic \"catch-all\" print"
   (lambda (x) (printf "_") void)))

;; toString

(bind-func toString_return
  (lambda () (String "\n")))

(bind-func toString_space
  (lambda () (String " ")))

(bind-func toString_i1
  (lambda (x:i1)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%d" x)
      (String s))))

(bind-func toString_i8
  (lambda (x:i8)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%d" x)
      (String s))))

(bind-func toString_i32
  (lambda (x:i32)
    (let ((s:i8* (salloc 256)))    
      (sprintf s "%d" x)
      (String s))))

(bind-func toString_i64
  (lambda (x:i64)
    (let ((st:i8* (salloc 256))) 
      (sprintf st "%lld" x)
      (String st))))

(bind-func toString_f
  (lambda (x:float)
    (let ((st:i8* (salloc 256)))        
      (sprintf st "%f" (ftod x))
      (String st))))

(bind-func toString_d
  (lambda (x:double)
    (let ((st:i8* (salloc 256)))        
      (sprintf st "%f" x)
      (String st))))

(bind-poly toString toString_i1)
(bind-poly toString toString_i8)
(bind-poly toString toString_i32)
(bind-poly toString toString_i64)
(bind-poly toString toString_f)
(bind-poly toString toString_d)

;; generic "catch-all" toString
(impc:aot:do-or-emit
 (bind-func toString:[String*,!a]
   "generic \"catch-all\" toString"
   (lambda (x) (String "_"))))

;; we print i8* as pointers, not C strings - if you want to print them
;; as C strings use printf with %s

(bind-func print_voidptr
  (lambda (x:i8*) (printf "%p" x) void))

(bind-func toString_voidptr
  (lambda (x:i8*)
    (let ((s:i8* (salloc 256)))
      (sprintf s "%p" x)
      (String s))))

(bind-poly print print_voidptr)
(bind-poly toString toString_voidptr)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Boxed type

(bind-type Box <!a>
  "a generic 'Box' type")

(bind-func unbox:[!a,Box*]*
  "unboxes any Box into a value"
  (lambda (b)
    (tref b 0)))

(bind-func print:[void,Box*]*
  (lambda (b)
    (printout "<Box '" (tref b 0) "'>")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XTLang symbols

;; 
(bind-type Symbol <size_t,i8*>
  "xtlang's symbol type

Tuple contains <symbol_length,characters>

Should be created, modified and desymoyed with the Symbol_* library functions.

Second item in tuple is a char* c-style symbol ")

;; must be a Halloced symbol!
(bind-func Symbol_free
  "Free an xtlang Symbol

Frees both the underlying character array and the tuple container.
@param sym - Symbol to be deleted 
"
  (lambda (sym:Symbol*)
    (free (tref sym 1))
    (free sym)
    void))

;; Symbol printing!
(bind-func Symbol_print:[void,Symbol*]*
  "Prints all characters in a given symbol object.

Overloads and should be used via the `println` function
If the symbol is empty will print a zero length symbol

@param sym - Symbol to be printed
"
  (lambda (x)
    (if (null? x)
        (begin (printf "")
               void)
        (begin (printf "%s" (tref x 1))
               void))))

(bind-poly print Symbol_print)

(bind-func Symbol_toString:[String*,Symbol*]*
  "convert Symbol to String"
  (lambda (x)
    (String (tref x 0) (tref x 1))))

(bind-poly toString Symbol_toString)

(bind-func Symbol_length
  "Takes a (null-terminated) Symbol* and returns the symbol length

@param sym - the Symbol*
@return length - length (via symlen)"
  (lambda (sym:Symbol*)
    (strlen (tref sym 1))))

(bind-func Symbol_size
  "Takes a Symbol* and returns the size of allocated memory

Not necessarily the same as Symbol_length - 
@param sym - the Symbol
@return size - size of alloc'ed memory"
  (lambda (sym:Symbol*)
    (tref sym 0)))

(bind-func Symbol_cstr
  "Return an i8* pointer to the underlying char array

@param sym
@return c_sym - the underlying i8 'char' array"
  (lambda (sym:Symbol*)
    (tref sym 1)))

(bind-func Symbol_from_cptr
  "Create an xtlang Symbol type from a c string (char array)

Use via the polymorphic Str function

@param str - character array from which to generate a new Symbol
@return - the new Symbol*
"
  (lambda (s)
    (let ((lgth (strlen s))
          (str (Symbol_z lgth s)))
      str)))

(bind-func Symbol_copy
  "Create a new xtlang Symbol type from an existing Symbol

Use via the polymorphic Str function

@param str - pointer to the Symbol to copy
@return - the new Symbol*
"
  (lambda (str:Symbol*)
    (let ((lgth (Symbol_length str))
          (new_str (Symbol_z lgth (Symbol_cstr str))))
      new_str)))

(bind-poly Symbol Symbol_from_cptr)
(bind-poly Symbol Symbol_copy)

(bind-func Symbol_equal
  "Equality test for Symbol

@param s1 - first symbol
@param s2 - second symbol
@return - true/false
"
  (lambda (s1:Symbol* s2:Symbol*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

(bind-poly equal Symbol_equal)

;; some helpers for AOT-compilation stuff

(bind-func sys_getenv
  (lambda (var_name)
    (getenv var_name)))

;; this just here to provide the scheme wrapper        
(if (not (equal? (sys:platform) "Windows"))
    (eval
     '(bind-func sys_setenv
       (lambda (var_name value replace_p)
         (setenv var_name value replace_p)))
     (interaction-environment)))

(if (not (equal? (sys:platform) "Windows"))
    (eval
     '(bind-func sys_unsetenv
        (lambda (var_name)
          (unsetenv var_name)))
     (interaction-environment)))

(impc:aot:do-or-emit (set_float_nans_))

;; some scheme helpers for acessing the environment

(impc:aot:do-or-emit
 (define sys:get-env
   (lambda (var-name)
     (let ((res (cptr->string (sys_getenv var-name))))
       (if (string=? res "")
           #f
           res)))))

(impc:aot:do-or-emit
 (define sys:set-env
   (lambda (var-name value replace?)
     (if (and (string? var-name)
              (string? value)
              (boolean? replace?))
         (let ((res (sys_setenv var-name value (if replace? 1 0))))
           (if (<> res 0)
               #f
               #t))
         (begin (print-with-colors 'red 'default #t (print "Error"))
                (print ": var-name and value must be strings, replace must be boolean\n")
                #f)))))

(impc:aot:do-or-emit
 (define sys:unset-env
   (lambda (var-name)
     (if (string? var-name)
         (let ((res (sys_unsetenv var-name)))
           (if (<> res 0) #f #t))
         (begin (print-with-colors 'red 'default #t (print "Error"))
                (print ": var-name must be a string\n")
                #f)))))

(impc:aot:insert-forms
 (impc:compiler:flush-jit-compilation-queue))

;; this stuff needs to go at the end, since redefinitions have to go
;; in a new module

;; override default constructors
(impc:aot:do-or-emit
 (bind-func String_z
   (lambda (lgth s)
     (let ((news:i8* (zalloc (+ 1 lgth)))
           (str:String* (zalloc)))
       (strcpy news s)
       (tset! str 0 lgth)
       (tset! str 1 news)
       str)))
 (bind-func String_h
   (lambda (lgth s)
     (let ((news:i8* (halloc (+ 1 lgth)))
           (str:String* (halloc)))
       (strcpy news s)
       (tset! str 0 lgth)
       (tset! str 1 news)
       str))))

(define *xtmlib-std-loaded* #t)

(impc:aot:insert-footer "xtmstd")
