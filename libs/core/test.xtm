;;; tests/test.xtm -- testing framework for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: 

;;; Commentary:

;; These functions & macros provide a basic unit testing framework for
;; Extempore - load before running any of the other .xtm files in
;; tests/

;; To write a test, use the xtmtest macro. Usage examples:

;; (xtmtest '(bind-func compile_fn ; this is the function definition
;;             (lambda ()               ; this is the function definition
;;               (* 3 8)))         ; this is the function definition
;;          (compile_fn))          ; this is how to call it

;; (xtmtest '(bind-func no_compile_fn ; this is the function definition
;;             (lambda ()                  ; this is the function definition
;;               (* 3 8.0)))          ; this is the function definition
;;          (no_compile_fn))          ; this is how to call it

;; (xtmtest '(bind-func incorrect_fn ; this is the function definition
;;             (lambda ()                 ; this is the function definition
;;               (* 3 4)))           ; this is the function definition
;;          (incorrect_fn)           ; this is how to call it
;;          13)                      ; this is the expected return value

;; (xtmtest '(bind-func correct_fn ; this is the function definition
;;             (lambda ()               ; this is the function definition
;;               (* 3 4)))         ; this is the function definition
;;          (correct_fn)           ; this is how to call it
;;          12)                    ; this is the expected return value

;; ;; print the results
;; (xtmtest-print-results)

;; For more examples, see the test files in the tests/ subdirectory

;;; Code:

(sys:load-preload-check 'test)
(define *xtmlib-test-loaded* #f)

(define *xtmtest-results*
  '((correct)
    (incorrect)
    (compile)
    (no-compile)))

(define xtmtest-reset-results
  (lambda ()
    (set! *xtmtest-results*
          '((correct)
            (incorrect)
            (compile)
            (no-compile)))))

(define xtmtest-update-test-result
  (lambda (func-sym label expected got) 
    (let ((tail (assoc label *xtmtest-results*))
          (reslist (list func-sym expected got)))
      (set-cdr! tail
                (cons (list func-sym expected got)
                      (cl:remove-if (lambda (res) (equal? res reslist))
                                    (cdr tail)))))
    (print "result: ")
    (print-with-colors (case label
                         ('correct 'green)
                         ('incorrect 'magenta)
                         ('compile 'yellow)
                         ('no-compile ' red))
                       'default #t (print label "\n"))))

(define-macro (xtmtest form call . expected-result)
  `(let ((func-sym (quote ,(car call)))
         (exp-res ,(if (null? expected-result)
                       #f
                       (car expected-result))))
     (print "xtmtest ")
     (print-with-colors 'cyan 'default #t (print func-sym))
     (print "...\n")
     (catch (xtmtest-update-test-result func-sym 'no-compile #f #f)
            (eval ,form (interaction-environment))
            (catch (xtmtest-update-test-result func-sym 'compile #f #f)
                   (let ((result (eval ,call (interaction-environment))))
                     (if (or (not exp-res) (equal? exp-res result))
                         (xtmtest-update-test-result func-sym 'correct exp-res result)
                         (xtmtest-update-test-result func-sym 'incorrect exp-res result)))))))

(define xtmtest-print-results
  (lambda ()
    (println)
    (print-with-colors 'black 'blue #t (print " Test results "))
    (print "\n\n")
    (for-each (lambda (label-list)
                (print-with-colors 'blue 'default #t (print (car label-list) "\n\n"))
                (for-each (lambda (reslist)
                            (print "- ")
                            (print-with-colors (cdr (assoc (car label-list) '((correct . green)
                                                                              (incorrect . yellow)
                                                                              (compile . magenta)
                                                                              (no-compile . red))))
                                               'default #f (print (car reslist)))
                            (cond ((and (equal? (car label-list) 'correct)
                                        (cadr reslist))
                                   (print "   result =" (caddr reslist))
                                   (print ", was expecting" (cadr reslist)))
                                  ((equal? (car label-list) 'incorrect)
                                   (print "   result =" (caddr reslist))
                                   (print ", was expecting" (cadr reslist))))
                            (println))
                          (cdr label-list))
                (println))
              *xtmtest-results*)))

(define sys:run-tests
  (lambda (test-files print? quit-on-exit?)
    (xtmtest-reset-results)
    (if (string? test-files)
        (set! test-files (list test-files)))
    (for-each (lambda (tf)
                (load tf))
              test-files)
    (if print? (xtmtest-print-results))
    (if quit-on-exit?
        (quit (if (cl:some (lambda (label-list)
                             (and (not (equal? (car label-list) 'correct))
                                  (> (length label-list) 1)))
                           *xtmtest-results*)
                  (begin (print-with-colors 'red 'default #t
                                            (print "Some tests failed."))
                         1)
                  (begin (print-with-colors 'green 'default #t
                                            (print "All tests passed."))
                         0))))))

(define *xtmlib-test-loaded* #t)
(print-with-colors 'green 'default #f (print "Test lib loaded.\n\n"))
