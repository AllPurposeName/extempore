;;; tests/test.xtm -- testing framework for Extempore

;; Author: 
;; Keywords: extempore
;; Required dylibs: 

;;; Commentary:

;; These functions & macros provide a basic unit testing framework for
;; Extempore - load before running any of the other .xtm files in
;; tests/

;; To test an xtlang function, bind-func it, and then call it inside
;; an xtmtest wrapper, e.g.

;; to only test if if compiles:
;; (xtmtest (test_bit_twiddle_2))

;; to test on an i64 return value (second argument)
;; (xtmtest (test_bit_twiddle_2) 0)

;; To run the tests, M-x eval-buffer (in the buffer with the tests in
;; it, not this one). Once you've run all the xtmtest tests,
;; (xtmtest-print-results) does what it says on the tin.

;;; Code:

(sys:load-preload-check 'test)
(define *xtmlib-test-loaded* #f)

(define *xtmtest-results*
  '((correct)
    (incorrect)
    (compile)
    (no-compile)))

(define-macro (xtmtest-update-result category func-sym)
  `(begin
     (if (equal? ,category 'compile)
         (begin
           (print "testing ")
           (print-with-colors 'cyan 'default #f (print ,func-sym))
           (print " result: ")))         
          (for-each
           (lambda (cat)
             (if (equal? (car cat) ,category)
                 (begin (set-cdr! cat (if (not (member ,func-sym cat))
                                          (cons ,func-sym (cdr cat))))
                        (if (not (equal? ,category 'no-compile))
                            (begin (print-with-colors (case ,category
                                                        ('correct 'green)
                                                        ('incorrect 'magenta)
                                                        ('compile 'yellow)
                                                        ('no-compile ' red))
                                                      'default #t (print ,category))
                                   (print (if (equal? ,category 'correct) "\n" "... ")))))
                 (set-cdr! cat (cl:remove ,func-sym (cdr cat)))))
           *xtmtest-results*)))

(define-macro (xtmtest form call . expected-result)
  `(let ((func-sym (quote ,(car call))))
     (catch (xtmtest-update-result 'no-compile func-sym)
            (eval ,form (interaction-environment))
            (catch (xtmtest-update-result 'compile func-sym)
                   (let ((result (eval ,call (interaction-environment))))
                     (if (or ,(null? expected-result) (equal? result ,(car expected-result)))
                         (xtmtest-update-result 'correct func-sym)
                         (xtmtest-update-result 'incorrect func-sym)))))))

(define xtmtest-print-results
  (lambda ()
    (println)
    (print-with-colors 'black 'cyan #t (print " Test results "))
    (print "\n\n")
    (for-each (lambda (result)
                (let ((colour (cdr (assoc (car result) '((correct . green)
                                                         (incorrect . yellow)
                                                         (compile . magenta)
                                                         (no-compile . red))))))
                  (print-with-colors 'cyan 'default #t (print (car result) "\n\n"))
                  (for-each (lambda (fn)
                              (print "- ")
                              (print-with-colors colour 'default #f (print fn "\n")))
                            (cdr result))
                  (println)))
              *xtmtest-results*)))

(define *xtmlib-test-loaded* #t)
(print-with-colors 'green 'default #f (print " done.\n\n"))
