;; schedule.xtm -- rudimenary xtlang 'native' scheduling 

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; This code is here as a jump off point.
;; it is NOT tested, nor ready for prime time.

;;; Code:

(sys:load "libs/core/xthread.xtm")

(bind-type SchedEvt <double,i8*,i8*,SchedEvt*,SchedEvt*>)

(bind-func scheduler_init:[[i64,double]*,SchedEvt*,[void,double,i8*]*]*
  (lambda (el f)
    (let ((mutex:i8* (mutex_create))
          (thread:i8* (thread_self))
          (cnt 0)
          (evtlist:SchedEvt* el)
          (fp:[void,double,i8*]* f)
          (element:SchedEvt* null)
          (next:SchedEvt* null)
          (prev:SchedEvt* null))
      (lambda (time)
        (set! cnt 0)
        (mutex_lock mutex)                                 
        (set! element evtlist)
        (while (and (not (null? element))
                    (<= (tref element 0) time))
          (set! cnt (+ cnt 1))
          (set! fp (cast (llvm_get_function_ptr (tref element 1))))
          ;; (println "exec: " time ":" (tref element 0))
          (fptrcall fp (tref element 0) (tref element 2))
          (set! next (tref element 4))          
          (set! prev (tref element 3))
          (if (null? prev)
              (set! evtlist next)
              (tset! prev 4 next))
          (if (not (null? next)) (tset! next 3 prev))
          (set! element next))
        (mutex_unlock mutex)
        cnt))))

(bind-func scheduler_at:[SchedEvt*,SchedEvt*,double]*
  (let ((prev:SchedEvt* null))
    (lambda (evtlist time)
      (set! prev null)
      (while (and (not (null? evtlist))
                  (<= (tref evtlist 0) time))
        (set! prev evtlist)
        (set! evtlist (tref evtlist 4)))
      prev)))

(bind-func scheduler_evt:[void,[i64,double]*,double,i8*,i8*]*
  (let ((evtlist:SchedEvt* null)
        (next:SchedEvt* null)
        (new:SchedEvt* null))
    (lambda (scheduler time fname data)
      (if (= (thread_equal_self (scheduler.thread)) 0)
          (mutex_lock (scheduler.mutex)))
      (set! evtlist (scheduler_at (scheduler.evtlist) time))
      (if (null? evtlist)
          (begin
            (set! next (scheduler.evtlist))
            (set! new (SchedEvt time fname data null next))
            (scheduler.evtlist new)
            void)
          (begin
            (set! next (tref evtlist 4)) ;; get next from previous
            (set! new (SchedEvt time fname data evtlist next))
            (tset! evtlist 4 new) ;; make us next of previous            
            (if (not (null? next)) (tset! next 3 new)) ;; set us to previous of next
            void))
      (if (= (thread_equal_self (scheduler.thread)) 0)
          (mutex_unlock (scheduler.mutex)))
      void)))

;; (bind-func scheduler_evt:[void,double,i8*]*
;;   (lambda (time fname)
;;     (scheduler_evt time fname null)))

(define-macro (sched sname time fname . args)
  (if (null? args)
      `(scheduler_evt (,(string->symbol (string-append (symbol->string sname) ".scheduler")))
                      ,time ,(string-append (symbol->string fname) "_native") null)
      `(scheduler_evt (,(string->symbol (string-append (symbol->string sname) ".scheduler")))
                      ,time ,(string-append (symbol->string fname) "_native") ,(car args))))
    
(bind-func beat_scheduler
  (lambda (bpm:double hz:double)
    (let ((evtlist:SchedEvt* null)
          (ft:[void,double,i8*]* null)
          (scheduler:[i64,double]* null)
          (beat:double 0.0)
          (running:i64 1)
          (offset:i64 0)
          (time 0.0)
          (i (/ 1.0 hz))
          (f (lambda ()
               (spawn (lambda ()
                        (set! scheduler (scheduler_init evtlist ft))
                        (set! time (clock_clock))
                        (while (> running 0)
                          (scheduler beat)
                          (set! beat (+ beat (* i (/ bpm 60.0))))
                          (while (< (clock_clock) time) (thread_sleep 0 100000))
                          (set! time (+ time i))
                          void)
                        (println "exiting scheduler")))
               void)))
      (f)
      f)))

(bind-func clock_scheduler
  (lambda (hz:double)
    (let ((evtlist:SchedEvt* null)
          (ft:[void,double,i8*]* null)
          (scheduler:[i64,double]* null)
          (hz:double 100.0)
          (running:i64 1)
          (time 0.0)
          (err 0)
          (i (/ 1.0 hz))
          (f (lambda ()
               (spawn (lambda ()
                        (set! scheduler (scheduler_init evtlist ft))
                        (set! time (clock_clock))
                        (while (> running 0)
                          (scheduler time)
                          (while (< (clock_clock) time) (thread_sleep 0 100000))
                          (set! time (+ time i))
                          void)
                        (println "exiting scheduler")))
               void)))
      (f)
      f)))

