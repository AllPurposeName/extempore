;;; audiobuffer.xtm -- dealing with audio files

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;;

;;; Code:

(sys:load "libs/aot-cache/audiobuffer.xtm" 'quiet)
(sys:load-preload-check 'audiobuffer)
(define *xtmlib-audiobuffer-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/core/std.xtm" 'quiet))

(impc:aot:insert-header "xtmaudiobuffer")

;;;;;;;;;;;;;;;;;;;;;;
;; AudioBuffer type ;;
;;;;;;;;;;;;;;;;;;;;;;

;; 0 filename
;; 1 playhead
;; 2 frames
;; 3 channels
;; 4 data
;; 5 samplerate
;; 6 loop start
;; 7 loop frames

(bind-type AudioBuffer <String*,i64,i64,i64,SAMPLE*,i64,i64,i64>)

(bind-func AudioBuffer_a
  (lambda (frames chans)
    (let ((dat:SAMPLE* (alloc (* frames chans))))
      (AudioBuffer_z (String "") 0 frames chans dat (convert (llvm_samplerate)) 0 0))))

(bind-poly AudioBuffer AudioBuffer_a)

(bind-func AudioBuffer_print
  "specialised print function for AudioBuffer*"
  (lambda (ab:AudioBuffer*)
    (if (null? ab)
        (printf "<AudioBuffer 0x0>")
        (printf "<AudioBuffer %p
      filename: %s
      playhead: %lld
        frames: %lld
      channels: %lld
          data: %p
    samplerate: %lld
    loop_start: %lld
   loop_frames: %lld>"
                ab
                (tref (tref ab 0) 1)
                (tref ab 1)
                (tref ab 2)
                (tref ab 3)
                (tref ab 4)
                (tref ab 5)
                (tref ab 6)
                (tref ab 7)))
    void))

(bind-poly print AudioBuffer_print)

(bind-func AudioBuffer_toString
  "specialised toString function for AudioBuffer*"
  (lambda (ab:AudioBuffer*)
    (let ((str:i8* (salloc 1024)))
      (if (null? ab)
          (sprintf str "<AudioBuffer 0x0>")
          (sprintf str "<AudioBuffer %p
      filename: %s
      playhead: %lld
        frames: %lld
      channels: %lld
          data: %p
    samplerate: %lld
    loop_start: %lld
   loop_frames: %lld>"
                   ab
                   (tref ab 0)
                   (tref ab 1)
                   (tref ab 2)
                   (tref ab 3)
                   (tref ab 4)
                   (tref ab 5)
                   (tref ab 6)
                   (tref ab 7)))
      (Str str))))

(bind-poly toString AudioBuffer_toString)

;; getters/setters

(bind-func AudioBuffer_filename
  (lambda (ab:AudioBuffer*)
    (tref ab 0)))

(bind-func AudioBuffer_set_filename
  (lambda (ab:AudioBuffer* filename)
    (tset! ab 0 filename)))

(bind-func AudioBuffer_playhead
  (lambda (ab:AudioBuffer*)
    (tref ab 1)))

(bind-func AudioBuffer_set_playhead
  (lambda (ab:AudioBuffer* playhead)
    (tset! ab 1 playhead)))

(bind-func AudioBuffer_frames
  (lambda (ab:AudioBuffer*)
    (tref ab 2)))

(bind-func AudioBuffer_set_frames
  (lambda (ab:AudioBuffer* frames)
    (tset! ab 2 frames)))

(bind-func AudioBuffer_channels
  (lambda (ab:AudioBuffer*)
    (tref ab 3)))

(bind-func AudioBuffer_set_channels
  (lambda (ab:AudioBuffer* channels)
    (tset! ab 3 channels)))

(bind-func AudioBuffer_data
  (lambda (ab:AudioBuffer*)
    (tref ab 4)))

(bind-func AudioBuffer_set_data
  (lambda (ab:AudioBuffer* data)
    (tset! ab 4 data)))

(bind-func AudioBuffer_samplerate
  (lambda (ab:AudioBuffer*)
    (tref ab 5)))

(bind-func AudioBuffer_set_samplerate
  (lambda (ab:AudioBuffer* samplerate)
    (tset! ab 5 samplerate)))

(bind-func AudioBuffer_loop_start
  (lambda (ab:AudioBuffer*)
    (tref ab 6)))

(bind-func AudioBuffer_set_loop_start
  (lambda (ab:AudioBuffer* loop_start)
    (tset! ab 6 loop_start)))

(bind-func AudioBuffer_loop_frames
  (lambda (ab:AudioBuffer*)
    (tref ab 7)))

(bind-func AudioBuffer_set_loop_frames
  (lambda (ab:AudioBuffer* loop_frames)
    (tset! ab 7 loop_frames)))

(bind-func AudioBuffer_num_samples
  "get the total number of samples (* frames channels) from an Audiobuffer"
  (lambda (ab:AudioBuffer*)
    (* (AudioBuffer_frames ab)
       (AudioBuffer_channels ab))))

(bind-func AudioBuffer_seek
  (lambda (ab:AudioBuffer* seek_to)
    (if (< seek_to 0)
        (begin
          (println "AudioBuffer seek value must be > 0")
          #f)
        (let ((len (AudioBuffer_frames ab)))
          (AudioBuffer_set_playhead ab (if (< seek_to len) seek_to len))
          #t))))

;; "peek" doesn't advance the playhead, "read" does

(bind-func AudioBuffer_peek
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (< ph (AudioBuffer_frames ab))
          (pref (AudioBuffer_data ab)
                (+ (* ph (AudioBuffer_channels ab)) chan))
          0.0))))

(bind-func AudioBuffer_peek_looped
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (pref (AudioBuffer_data ab)
            (+ (* (% ph (AudioBuffer_frames ab)) (AudioBuffer_channels ab)) chan)))))

(bind-func AudioBuffer_read_a
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (< ph (AudioBuffer_frames ab))
          (begin
            (if (= chan 0) (AudioBuffer_set_playhead ab (+ ph 1)))
            (pref (AudioBuffer_data ab)
                  (+ (* ph (AudioBuffer_channels ab)) chan)))
          0.0))))

(bind-func AudioBuffer_read_b
  (lambda (ab:AudioBuffer* frame chan)
    (if (< frame (AudioBuffer_frames ab))
        (begin
          (if (= chan 0) (AudioBuffer_set_playhead ab frame))
          (pref (AudioBuffer_data ab)
                (+ (* frame (AudioBuffer_channels ab)) chan)))
        0.0)))

(bind-poly AudioBuffer_read AudioBuffer_read_a)
(bind-poly AudioBuffer_read AudioBuffer_read_b)

(bind-func AudioBuffer_read_looped_a
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (= chan 0)
          (AudioBuffer_set_playhead ab (% (+ ph 1) (AudioBuffer_frames ab))))
      (pref (AudioBuffer_data ab)
            (+ (* ph (AudioBuffer_channels ab)) chan)))))

(bind-func AudioBuffer_read_looped_b
  (lambda (ab:AudioBuffer* frame chan)
    (if (= chan 0)
        (AudioBuffer_set_playhead ab (% frame (AudioBuffer_frames ab))))
    (if (> frame (AudioBuffer_frames ab))
        0.0
        (pref (AudioBuffer_data ab)
              (+ (* frame (AudioBuffer_channels ab)) chan)))))

(bind-poly AudioBuffer_read_looped AudioBuffer_read_looped_a)
(bind-poly AudioBuffer_read_looped AudioBuffer_read_looped_b)

(bind-func AudioBuffer_ptr
  "returns a pointer into the buffer"
  (lambda (ab:AudioBuffer* frame chan)
    (pref-ptr (AudioBuffer_data ab)
              (+ (* frame (AudioBuffer_channels ab)) chan))))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; reading audio files ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO up to here

;; (bind-func AudioBuffer_from_file
;;   "read an audio file into an AudioBuffer"
;;   (lambda (filename)
;;     (AudioBuffer_region_from_file filename 0 (sf_frames_from_file filename))))

;; (bind-poly AudioBuffer AudioBuffer_region_from_file)
;; (bind-poly AudioBuffer AudioBuffer_from_file)

(impc:aot:insert-footer "xtmaudiobuffer")
(define *xtmlib-audiobuffer-loaded* #t)
