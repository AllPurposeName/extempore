;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Extempore's data types library
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; lib-loading config
(sys:load-preload-check 'adt)
(define *xtmlib-adt-loaded* #t)

;;;;;;;;;;;;;;;;;;;;
;; pairs

(bind-type Pair <!x,!y>)

(bind-func first:[!a,Pair:<!a,!b>*]* 
  (lambda (a)
    (tref a 0)))

(bind-func second:[!b,Pair:<!a,!b>*]*	   
  (lambda (a)
    (tref a 1)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; singly linked lists
;;
(bind-type List <!x,List*>)

(bind-func cons:[List:<!a,List*>*,!a,List:<!a,List*>*]*
  (lambda (x y)
    (let ((obj (alloc)))
      (tset! obj 0 x)
      (tset! obj 1 y)
      obj)))

(bind-func car:[!a,List:<!a,List*>*]*
  (lambda (a)
    (tref a 0)))

(bind-func cdr:[List:<!a,List*>*,List:<!a,List*>*]*
  (lambda (a)
    (tref a 1)))

(bind-func length:[i64,List:<!a,List*>*]*
  (lambda (a)    
    (if (null? a)
	0
	(+ 1 (length (cdr a))))))

(bind-func _nth_tail:[List:<!a,List*>*,List:<!a,List*>*,i64,i64]*
  (lambda (lst idx cnt)
    (if (or (= cnt idx) (> cnt idx))
        lst
        (_nth_tail (cdr lst)
                   idx
                   (+ cnt 1)))))

(bind-func nth_tail:[List:<!a,List*>*,List:<!a,List*>*,i64]*
  (lambda (lst idx)
    (_nth_tail lst idx 0)))

(bind-func nth:[!a,List:<!a,List*>*,i64]*
  (lambda (lst idx)
    (car (nth_tail lst idx))))

(bind-func insert:[List:<!a,List*>*,List:<!a,List*>*,i64,!a]*
  (lambda (lst idx value)
    (if (= idx 0)
        (cons value lst)
        (let ((pre_cell (nth_tail lst (- idx 1)))
              (new_cell (cons value (cdr pre_cell))))
          (tset! pre_cell 1 new_cell)
          lst))))

(bind-func delete:[!a,List:<!a,List*>*,i64]*
  (lambda (lst idx)
    (let ((pre_cell (nth_tail lst (- idx 1)))
          (cell (cdr pre_cell))
          (post_cell (cdr cell)))
      (tset! pre_cell 1 post_cell)
      (car cell))))

(bind-func map:[List:<!a,List*>*,[!a,!b]*,List:<!b,List*>*]*
  (lambda (func xs)
    (let ((f (lambda (l)
               (if (null? l)
                   null
                   (cons (func (car l)) (f (cdr l)))))))
      (f xs))))

(bind-func map1:[List:<!a,List*>*,[!a,!b]*,List:<!b,List*>*]*
  (lambda (func xs)
    (let ((f (lambda (l)
               (if (null? l)
                   null
                   (cons (func (car l)) (f (cdr l)))))))
      (f xs))))

(bind-func map2:[List:<!a,List*>*,[!a,!b,!c]*,List:<!b,List*>*,List:<!c,List*>*]*
  (lambda (func xs1 xs2)
    (let ((f (lambda (l1 l2)
               (if (null? l1)
                   null
                   (cons (func (car l1) (car l2))
                         (f (cdr l1) (cdr l2)))))))
      (f xs1 xs2))))

(bind-func map3:[List:<!a,List*>*,[!a,!b,!c,!d]*,List:<!b,List*>*,List:<!c,List*>*,List:<!d,List*>*]*
  (lambda (func xs1 xs2 xs3)
    (let ((f (lambda (l1 l2 l3)
               (if (null? l1)
                   null
                   (cons (func (car l1) (car l2) (car l3))
                         (f (cdr l1) (cdr l2) (cdr l3)))))))
      (f xs1 xs2 xs3))))

(bind-func filter:[List:<!a,List*>*,[bool,!a]*,List:<!a,List*>*]*
  (lambda (pred xs)    
    (let ((f (lambda (l)
               (if (null? l)
                   null
                   (if (pred (car l))
                       (cons (car l) (f (cdr l)))
                       (f (cdr l)))))))
      (f xs))))

(bind-func for-each:[void,[!k,!z]*,List:<!z,List*>*]*
  (lambda (func xs)
    (let ((f (lambda (l)
               (if (null? l) void
                   (begin (func (car l))
                          (f (cdr l)))))))
      (f xs))))

(bind-func last:[List:<!a,List*>*,List:<!a,List*>*]*
  (lambda (a)
    (if (null? (cdr a))
	a
	(last (cdr a)))))

(bind-func append:[List:<!a,List*>*,List:<!a,List*>*,List:<!a,List*>*]*
  (lambda (a b)
    (let ((p (last a)))
      (tset! p 1 b)
      a)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; a simple 'assoc' dictionary
;;
;; the "dictionary" is any List of Pairs
;; where the pair is any <i8*,!a>
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func dict_find:[!a,List:<Pair:<String*,!a>*,List*>*,String*]*
  (lambda (dict key)
    (if (null? dict) (convert null)
        (if (string_cmp (first (car dict)) key)
            (second (car dict))
            (dict_find (cdr dict) key)))))

(bind-func dict_find_2:[!a,List:<Pair:<i8*,!a>*,List*>*,i8*]*
  (lambda (dict key)
    (if (null? dict) (convert null)
        (if (= (i64toi32 0) (strcmp (first (car dict)) key))
            (second (car dict))
            (dict_find_2 (cdr dict) key)))))



;;;;;;;;;;;
;; TREES ;;
;;;;;;;;;;;

;; start of binary tree ...

(bind-type BTree <!_a,BTree*,BTree*>)

(bind-func BLeaf:[BTree:<!a,BTree*,BTree*>*,!a]*
  (lambda (x)
    (let ((t (BTree x null null)))
      t)))

(bind-func btree_value:[!a,BTree*]*
  (lambda (t)
    (tref t 0)))

(bind-func print_btree:[void,BTree*]*
  (lambda (t)
    (let ((f (lambda (t)
               (if (null? t) void
                   (begin
                     (printout (btree_value t) " ")
                     (f (tref t 1))
                     (f (tref t 2))
                     void)))))      
      (f t)
      (println))))
