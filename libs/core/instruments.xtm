;;; instruments.xtm -- instruments (core)

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; This is for instruments which are solely written in scheme and
;; xtlang - no binding to external (that is, C) libraries.
;;
;; Any instruments which depend on external libraries are
;; in libs/external/instruments_ext.xtm

;;; Code:

;; lib-loading config
(sys:load-preload-check 'audio-inst)
(define *xtmlib-instruments-loaded* #t)

(sys:load "libs/core/audio_dsp.xtm")
(sys:load "libs/core/instruments-scm.xtm")

;; making and playing notes

;; relative time USING adsr_accum + local mzone
(bind-func note_c
  (lambda (start_time:i64
      freq:SAMPLE
      amp:SAMPLE
      dur:i64
      attack:i64
      decay:i64
      release:i64
      sus_amp:SAMPLE
      nstarts:i64*
      idx:i64
      kernel:[SAMPLE,i64,i64,SAMPLE,SAMPLE]*
      notezone:mzone*)
    (let ((env (if (< (+ attack decay) dur)
                   (adsr_accum_c 0 attack decay (- dur (+ attack decay)) release 1.0 sus_amp)
                   (adsr_accum_c 0 0 0 dur release 1.0 sus_amp)))
          (t 0)
          (ff (lambda (sample:SAMPLE time:i64 channel:i64)
                (if (= channel 0) (set! t (+ t 1)))
                (if (< t (+ dur release))
                    (kernel time channel freq (* (env t channel) amp))
                    (begin (pset! nstarts idx 9999999999999)
                           (llvm_zone_destroy notezone)
                           0.0)))))
      ff)))


;; NOTE!
;; (* 5.0 SAMPLERATE) is time padding
;; it is used because the decay length of the note may go
;; beyond the duration.
;; however making it longer means using more memory
;; it's a trade off!
(bind-func _play_note
  (lambda (time inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* freq amp dur nargs:i64 dargs)
    (if (> freq 10.0)        
        (let ((f (inst.new_note:[i64,i64,SAMPLE,i64,SAMPLE,i64,SAMPLE*]*)))
          (f time freq dur amp nargs dargs)
          ;; so that we only copy an integer from memzone
          1)
        1)))

;; playnote wrapper
;; (define-macro (play-note time inst pitch vol dur . args)  
;;   (let ((nargs (length args)))
;;     `(let ((duration (* 1.0 ,dur))
;;            (dargs (sys:make-cptr ,(* (if (audio_64bit) 8 4) nargs))) 
;;            (native (llvm:get-native-closure ,(symbol->string inst))))
;;        (if (audio_64bit)
;;            (dotimes (i ,nargs) (cptr:set-double dargs (* i 8) (eval (list-ref ',args i))))
;;            (dotimes (i ,nargs) (cptr:set-float dargs (* i 4) (eval (list-ref ',args i)))))
;;        (if (cptr? native)
;;            (_play_note time
;;                        native
;;                        (midi2frq (* 1.0 ,pitch))
;;                        (/ (exp (/ ,vol 26.222)) 127.0)
;;                        duration
;;                        ,nargs
;;                        dargs)
;;            (print-error 'No 'inst 'named ,(symbol->string inst))))))

;; make synth defaults
(bind-func default_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((sawl (saw_c 0.0))
          (sawr (saw_c 0.0)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (if (= chan 0)
            (* amp (/ 200.0 freq) (sawl amp freq))
            (* amp (/ 200.0 freq) (sawr amp freq)))))))

(bind-func default_fx
  (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
    in))

(define-instrument definst default_note_c default_fx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Default synth stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func synth_note_c
  (let ((res 1.0)
        (fxamp 0.0))
    (lambda (nargs:i64 dargs:SAMPLE*)
      (let ((oscl (osc_c 0.0))
            (oscl3 (osc_c 0.0))
            (oscl2 (osc_c 0.0))
            (oscr (osc_c 0.25))
            (saw1 (saw_c 0.0))
            (saw2 (saw_c 0.0))
            (lpf1 (lpf_c))
            (lpf2 (lpf_c))
            (oscr3 (osc_c 0.25))
            (oscr2 (osc_c 0.25)))
        (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
          (if (< chan 1.0)
              (* amp (/ 5.0 (log freq)) ;; frequency scale amplitude
                 (+ (oscl2 1.0 (+ freq (* 10.0 (random))))
                    (lpf1 (saw1 fxamp freq) (* 5.0 freq) res)
                    (oscl 0.8 (+ freq (oscl3 (* 2.01 freq)
                                             (* freq 1.01))))))
              (* amp (/ 5.0 (log freq)) ;; frequency scale amplitude	       
                 (+ (oscr2 1.0 (+ freq (* 5.0 (random))))
                    (lpf2 (saw2 fxamp freq) (* 3.0 freq) res)
                    (oscr 0.8 (+ freq (oscr3 (* 0.99 freq)
                                             (* freq 0.99))))))))))))


(bind-func synth_fx 262144
  (let ((dleft (convert (* SAMPLERATE 0.125)))
        (dlyl (delay_c dleft))
        (dright (convert (* SAMPLERATE 0.33333333)))
        (dlyr (delay_c dright))
        (pan .5)
        (pan_old pan)
        (wet 1.0)
        (fb 0.5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (if (< pan_old pan) ;; interpolate pan
          (set! pan_old (+ pan_old .001))
          (set! pan_old (- pan_old .001)))
      (cond ((= chan 0) 
             (dlyl (* 2.0 pan_old in) wet fb))
            ((= chan 1)
             (dlyr (* 2.0 (- 1.0 pan_old) in) wet fb))
            (else 0.0)))))

(define-instrument synth synth_note_c synth_fx)
(synth.attack 1000)
(synth.decay 1000)
(synth.sustain 0.9)
(synth.release 7000)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extempore_pad 
;;
(bind-func epad_note_c
  (let ((res 0.1))
    (lambda (nargs:i64 dargs:SAMPLE*)
      (let ((oscl (square_c 0.0)) 
            (oscr (square_c 0.1))
            (o1 (osc_c 0.0))
            (oscl2 (square_c (random)))
            (nval (if (> nargs 0) (pref dargs 0) 50.0))
            (vcfl (vcf1_c))
            (vcfr (vcf1_c))	  
            (oscr2 (square_c (random)))
            (ramp 0.0)
            (a:SAMPLE (+ 1.0 (* 0.02 (random))))
            (b:SAMPLE (+ 1.0 (* 0.02 (random)))))
        (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
          (if (= chan 0)
              (* amp (vcfl (+ (oscl 0.3 freq nval)
                              (oscl2 0.3 (+ freq a) nval))
                           (+ 550.0 (* amp 8000.0))
                           (+ res 0.2)))
              (* amp (vcfr (+ (oscr 0.2 freq nval)
                              (oscr2 0.2 (* freq b) nval))
                           (+ 500.0 (* amp 10000.0))
                           res))))))))


(bind-func epad_fx 2000000
  (let ((pan:SAMPLE .5)
        (c1 (chorus_c 0.0))
        (c2 (chorus_c 0.1))
        (rev1 (reverb_c 200.0))
        (rev2 (reverb_c 120.0))	
        (ipan pan)
        (cwet 0.5)
        (cfb 0.5)
        (wet 0.2)
        (fb 0.5)
        (opan (osc_c 0.0)))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)      
      (set! pan (+ 0.5 (opan 0.2 3.0)))
      (cond ((= chan 0)
             (rev1 (c1 (* 2.0 pan in) cwet cfb)
                   wet fb))
            ((= chan 1)
             (rev2 (c2 (* 2.0 (- 1.0 pan) in) cwet cfb)
                   wet fb))
            (else 0.0)))))

(define-instrument epad epad_note_c epad_fx)
(epad.attack 1000)
(epad.decay 1000)
(epad.sustain 0.9)
(epad.release 7000)

;;;;;;;;;;;;;;;;;;;;;
;; extempore organ ;;
;;;;;;;;;;;;;;;;;;;;;

;; change drawbar_pos and recompile to change the organ tone

(bind-func organ_note_c
  (let ((num_drawbars:i64 9)
        (freq_ratio:SAMPLE* (zalloc num_drawbars))
        (drawbar_pos:SAMPLE* (zalloc num_drawbars)))
    (pfill! freq_ratio 0.5 1.5 1.0 2.0 3.0 4.0 5.0 6.0 8.0)
    (pfill! drawbar_pos 8. 8. 8. 0. 0. 0. 0. 0. 0.)
    (lambda (nargs:i64 dargs:SAMPLE*)
      (let ((tonewheel:[SAMPLE,SAMPLE,SAMPLE]** (zalloc (* 2 num_drawbars)))
            (freq_smudge:SAMPLE* (zalloc num_drawbars))
            (i:i64 0))
        (dotimes (i num_drawbars)
          (pset! tonewheel (* i 2) (osc_c 0.0)) ; left
          (pset! tonewheel (+ (* i 2) 1) (osc_c 0.0)) ; right
          (pset! freq_smudge i (* 3.0 (random))))
        (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
          (if (< chan 2)
              (let ((sum 0.0))
                (dotimes (i num_drawbars)
                  ;; (printf "i = %lld" i)
                  (set! sum (+ sum (* (/ (pref drawbar_pos i) 8.0)
                                      ((pref tonewheel (+ (* 2 i) chan))
                                       amp
                                       (+ (* freq (pref freq_ratio i))
                                          (pref freq_smudge i)))))))
                (/ sum (convert num_drawbars)))))))))

(bind-func organ_fx 100000
  (let ((flanl (flanger_c 1.0 0.0 0.6 1.0))
        (flanr (flanger_c 1.0 0.0 0.6 1.0))
        (treml (osc_c 0.0))
        (tremr (osc_c 0.0))
        (trem_amp 0.1)
        (wet 0.5)
        (fb 0.5)
        (trem_freq .0))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (* (flanl in wet fb)
                (+ 1.0 (treml trem_amp trem_freq))))
            ((= chan 1)
             (* (flanr in wet fb)
                (+ 1.0 (tremr trem_amp (* 1.1 trem_freq)))))
            (else 0.0)))))

(define-instrument organ organ_note_c organ_fx)
(organ.attack 200)
(organ.decay 200)
(organ.release 200)
(organ.sustain 0.6)

;; fuzz bass

(bind-func fuzz_bass_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((sawl1 (saw_c 0.0))
          (sawr1 (saw_c 0.0))
          (sawl2 (saw_c 0.0))
          (sawr2 (saw_c 0.0))
          (smudge1 (+ 1.0 (* 0.001 (dsp_randn))))
          (smudge2 (+ 1.0 (* 0.001 (dsp_randn))))
          (lpfl (lpf_c))
          (lpfr (lpf_c))
          (ringl (ringmod_c))
          (ringr (ringmod_c)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (cond ((= chan 0)
               (lpfl (ringl (+ (sawl1 amp (* freq smudge1))
                               (sawl2 amp (* freq smudge2)))
                            (* 4.0 freq)
                            0.3)
                     (* 8.0 freq)
                     0.5))
              ((= chan 1)
               (lpfr (ringr (+ (sawr1 amp (* freq smudge1))
                               (sawr2 amp (* freq smudge2)))
                            (* 4.0 freq)
                            0.3)
                     (* 8.0 freq)
                     0.5))
              (else 0.0))))))

(bind-func fuzz_bass_fx 10000000
  (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
    in))

(define-instrument fuzz_bass fuzz_bass_note_c fuzz_bass_fx)
(fuzz_bass.attack 20)
(fuzz_bass.decay 20)
(fuzz_bass.release 100)
(fuzz_bass.sustain 0.6)

;; shimmer pad

(bind-func shimmer_pad_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((rectl (rect_c 0.0))
          (rectr (rect_c 0.0))
          (lfol (osc_c 0.0))
          (lfor (osc_c 0.0))
          (lpfl (lpf_c))
          (lpfr (lpf_c)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (cond ((= chan 0)
               (lpfl (rectl amp freq (+ 0.5 (lfol 0.3 0.9))) (* 8.0 freq) 0.5))
              ((= chan 1)
               (lpfr (rectl amp freq (+ 0.5 (lfor 0.3 1.0))) (* 8.0 freq) 0.5))
              (else 0.0))))))

(bind-func shimmer_pad_fx
  (let ((dl (delay_c 10))
        (dr (delay_c 11))
        (wet 0.5)
        (fb 0.5))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (dl in wet fb))
            ((= chan 1)
             (dr in wet fb))
            (else 0.0)))))

(define-instrument shimmer_pad shimmer_pad_note_c shimmer_pad_fx)
(shimmer_pad.attack 44100)
(shimmer_pad.decay 500)
(shimmer_pad.release 44100)
(shimmer_pad.sustain 1.0)



;; A simple FM synth

;; You can push I higher than 1.0
;; But only when H is low
(bind-func fmsynth_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((o1 (osc_c 0.0))
          (o2 (osc_c 0.0))
          (I (if (> nargs 0) (pref dargs 0) 0.1)) ;; modulation index (generally 0.0-1.0)
          (H (if (> nargs 1) (pref dargs 1) 10.0)) ;; harmonicity ratio (whole numbers 1.0 - 20.0)
          (out:SAMPLE 0.0))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (if (= chan 0)
            (set! out (o1 (* (/ 5.0 (log freq)) amp)
                          (+ freq
                             (o2 (* (* H freq) I)
                                 (* H freq))))))
        (* 1.0 out)))))


(bind-func fmsynth_fx 700000
  (let ((o1 (osc_c 0.0))
        (o2 (osc_c (* 0.5 SPI))) 
        (cl (chorus_c 0.0))
        (cr (chorus_c 0.314))
        (del1 (delay_c (convert (/ SR 2.0))))
        (del2 (delay_c (convert (/ SR 3.0))))
        (vcfl (vcf_c 1))
        (vcfr (vcf_c 1))
        (res 0.4)        
        (revl (reverb_c 70.0))
        (revr (reverb_c 60.0))
        (cwet 0.5)
        (cfb 0.5)
        (dwet 0.5)
        (dfb 0.5)
        (wet 0.2)
        (fb 0.3))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (revl (vcfl (del1 (cl in cwet cfb) dwet dfb)
                         (+ 8000.0 (o1 6000.0 0.3))
                         res)
                   wet
                   fb))
            ((= chan 1)
             (revr (vcfr (del2 (cr in cwet cfb) dwet dfb)
                         (+ 8000.0 (o2 6000.0 0.3))
                         res)
                   wet
                   fb))
            (else 0.0)))))

(define-instrument fmsynth fmsynth_note_c fmsynth_fx)
(fmsynth.attack 100)
(fmsynth.decay 100)
(fmsynth.release 5000)
(fmsynth.sustain 0.8)

;; A simple FM pad
;; default is quite organy

;; You can push I higher than 1.0
;; But only when H is low
(bind-func fmpad_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((o1 (osc_c 0.0))
          (o2 (osc_c 0.0))
          (o3 (osc_c 0.0))
          (I (if (> nargs 0) (pref dargs 0) 0.2)) ;; modulation index (generally 0.0-1.0)
          (H (if (> nargs 1) (pref dargs 1) 2.0)) ;; harmonicity ratio (whole numbers 1.0 - 20.0)
          (res:SAMPLE 0.0))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (if (= chan 0)
            (set! res (o1 (* (/ 5.0 (log freq)) amp)
                          (+ freq
                             (o2 (* (* H freq) I)
                                 (* H freq))))))
        (* 1.0 res)))))


(bind-func fmpad_fx 700000
  (let ((o1 (osc_c 0.0))
        (o2 (osc_c (* 0.5 SPI))) 
        (cl (chorus_c 0.0))
        (cr (chorus_c 0.314))
        (cwet 0.5)
        (cfb 0.5)
        (vcfl (vcf_c 1))
        (vcfr (vcf_c 1))
        (res 0.4)        
        (revl (reverb_c 70.0))
        (revr (reverb_c 60.0))
        (wet 0.3)
        (fb 0.3))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (revl (vcfl (cl in cwet cfb) ;(del1 (cl in))
                         (+ 8000.0 (o1 6000.0 0.6))
                         res)
                   wet fb))
            ((= chan 1)
             (revr (vcfr (cr in cwet cfb)
                         (+ 8000.0 (o2 6000.0 0.6))
                         res)
                   wet fb))
            (else 0.0)))))

(define-instrument fmpad fmpad_note_c fmpad_fx)
(fmpad.attack 10000)
(fmpad.decay 100)
(fmpad.release 5000)
(fmpad.sustain 1.0)



;; 
;; simple saw
;;
(bind-func sawbass_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((osc (saw_mc_c 0.0)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (* amp (osc chan amp freq))))))


(bind-func sawbass_fx 500000
  (let ((cl (chorus_mc_c 2 0.0))
        (vcf (vcf_mc_c 1 2))
        (del (delay_t_st_c
              (convert (* SR (/ 1.0 2.1)))
              (convert (* SR (/ 1.0 2.0))) 0))
        (h (hann_t_mc_c 0)))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (del chan (* 1.0
                   (vcf chan (cl chan in 1.0 0.6)
                        (+ 350.0 (* 3000.0 (h chan time (convert (* SR 8.)))))
                        0.75))
           time 0.8 0.5))))

(define-instrument sawbass sawbass_note_c sawbass_fx)
(sawbass.attack 100)
(sawbass.decay 100)
(sawbass.release 1000)
(sawbass.sustain 1.0)

;; 
;; simple sine subbass
;;
(bind-func subbass_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((osc (osc_mc_c 0.0)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (* amp (osc chan amp freq))))))

(bind-func subbass_fx
  (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
    in))

(define-instrument subbass subbass_note_c subbass_fx)
(subbass.attack 500)
(subbass.decay 500)
(subbass.release 500)
(subbass.sustain 0.8)



(bind-func sawlead_note_c
  (lambda (nargs:i64 dargs:SAMPLE*)
    (let ((sawl1 (saw_c 0.0))
          (sawr1 (saw_c 0.2))
          (sawl2 (saw_c 0.0))
          (sawr2 (saw_c 0.1))
          (smudge1 (+ 1.0 (* 0.005 (dsp_randn))))
          (smudge2 (+ 1.0 (* 0.005 (dsp_randn)))))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (cond ((= chan 0)
               (+ (sawl1 amp (* freq smudge1))
                  (sawl2 amp (* freq smudge2))))
              ((= chan 1)
               (+ (sawr1 amp (* freq smudge1))
                  (sawr2 amp (* freq smudge2))))
              (else 0.0))))))

(bind-func sawlead_fx 10000000
  (let ((lfo1l (osc_c 0.0))
        (lfo1r (osc_c 0.3))
        (r1 (reverb_c 200.0))
        (r2 (reverb_c 120.0))
        (rev .15)
        (combl (comb_c 30))
        (combr (comb_c 30)))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (r1 (combl in
                        (+ 4.0 (lfo1l 1.6 2.0))
                        0.8 0.8)
                 rev 0.5))
            ((= chan 1)
             (r2 (combr in
                        (+ 3.0 (lfo1r 1.9 1.0))
                        0.8 0.8)
                 rev 0.5))             
            (else 0.0)))))

(define-instrument sawlead sawlead_note_c sawlead_fx)
(sawlead.attack 40)
(sawlead.decay 120)
(sawlead.release 400)
(sawlead.sustain 0.75)
