;; minimal bindings and test function
;; do not use (yet)

(bind-dylib libchipmunk
  (if (string=? "Linux" (sys:platform))
    "libchipmunk.so"
    (print-error "tell me where to find the Chipmunk library on your platform here!")))

;; typedef double cpFloat;

(bind-alias cpBool i8)
(bind-alias cpFloat double)
(bind-val CPFLOAT_MIN cpFloat 2.2250738585072014e-308)
(bind-val CPFLOAT_MAX cpFloat 1.79769e+308)
(bind-alias cpDataPointer i8*)

(bind-alias cpSpace i8) ;; keep these opaque
(bind-alias cpBody i8)
(bind-alias cpShape i8)
(bind-alias cpConstraint i8)

(sys:load "libs/contrib/libchipmunk/cpVect.xtm")
(sys:load "libs/contrib/libchipmunk/cpBB.xtm")
(sys:load "libs/contrib/libchipmunk/cpTransform.xtm")
(sys:load "libs/contrib/libchipmunk/cpArbiter.xtm")
(sys:load "libs/contrib/libchipmunk/cpBody.xtm")

(bind-alias cpGroup i64)
(bind-alias cpBitmask i32)

(bind-lib libchipmunk cpMomentForCircle [cpFloat,cpFloat,cpFloat,cpFloat,cpVect])
(bind-lib libchipmunk cpMomentForSegment [cpFloat,cpFloat,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpMomentForPoly [cpFloat,cpFloat,i32,cpVect*,cpVect,cpFloat])
(bind-lib libchipmunk cpMomentForBox [cpFloat,cpFloat,cpFloat,cpFloat])
(bind-lib libchipmunk cpMomentForBox2 [cpFloat,cpFloat,cpBB])

(bind-lib libchipmunk cpAreaForCircle [cpFloat,cpFloat,cpFloat])
(bind-lib libchipmunk cpAreaForSegment [cpFloat,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpAreaForPoly [cpFloat,i32,cpVect*,cpFloat])

(bind-lib libchipmunk cpCentroidForPoly [cpFloat,i32,cpVect*,cpFloat])

;; cpShape

(bind-alias cpPointQueryInfo <cpShape*,cpVect,cpFloat,cpVect>)
(bind-alias cpSegmentQueryInfo <cpShape*,cpVect,cpVect,cpFloat>)
(bind-type cpShapeFilter <cpGroup,cpBitmask,cpBitmask> (printer? . #f))

(bind-func print
   (lambda (a:cpShapeFilter)
     (printf "<cpShapeFilter: group=%d, cat=%d, mask=%d>"
       (tref a 0)
       (tref a 1)
       (tref a 2))
     void))

(bind-func cpShapeFilterNew
  (lambda (group:cpGroup categories:cpBitmask mask:cpBitmask)
    (let ((filter:cpShapeFilter* (alloc)))
      (tfill! filter group categories mask)
      (pref filter 0))))

(bind-alias cpContactPointSet <i32,cpVect,|2,<cpVect,cpVect,cpFloat>|>)
(bind-alias cpCollisionType i8*)
(bind-alias cpCircleShape <cpShape,cpVect,cpVect,cpFloat>)
(bind-alias cpSegmentShape <cpShape,cpVect,cpVect,cpVect,cpVect,cpVect,cpVect,cpFloat,cpVect,cpVect>)

(bind-lib libchipmunk cpShapeDestroy [void,cpShape*])
(bind-lib libchipmunk cpShapeFree [void,cpShape*])
(bind-lib libchipmunk cpShapeCacheBB [cpBB,cpShape*])
(bind-lib libchipmunk cpShapeUpdate [cpBB,cpShape*,cpTransform])
(bind-lib libchipmunk cpShapePointQuery [cpFloat,cpShape*,cpVect,cpPointQueryInfo*])
(bind-lib libchipmunk cpShapeSegmentQuery [cpBool,cpShape*,cpVect,cpVect,cpFloat,cpSegmentQueryInfo*])
(bind-lib libchipmunk cpShapesCollide [cpContactPointSet,cpShape*,cpShape*])
(bind-lib libchipmunk cpShapeGetSpace [cpSpace*,cpShape*])
(bind-lib libchipmunk cpShapeGetBody [cpBody*,cpShape*])
(bind-lib libchipmunk cpShapeSetBody [void,cpShape*,cpBody*])
(bind-lib libchipmunk cpShapeGetMass [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeSetMass [void,cpShape*,cpFloat])
(bind-lib libchipmunk cpShapeGetDensity [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeSetDensity [void,cpShape*,cpFloat])
(bind-lib libchipmunk cpShapeGetMoment [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeGetArea [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeGetCenterOfGravity [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeGetBB [cpBB,cpShape*])
(bind-lib libchipmunk cpShapeGetSensor [cpBool,cpShape*])
(bind-lib libchipmunk cpShapeSetSensor [void,cpShape*,cpBool])
(bind-lib libchipmunk cpShapeGetElasticity [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeSetElasticity [void,cpShape*,cpFloat])
(bind-lib libchipmunk cpShapeGetFriction [cpFloat,cpShape*])
(bind-lib libchipmunk cpShapeSetFriction [void,cpShape*,cpFloat])
(bind-lib libchipmunk cpShapeGetSurfaceVelocity [cpVect,cpShape*])
(bind-lib libchipmunk cpShapeSetSurfaceVelocity [void,cpShape*,cpVect])
(bind-lib libchipmunk cpShapeGetUserData [cpDataPointer,cpShape*])
(bind-lib libchipmunk cpShapeSetUserData [void,cpShape*,cpDataPointer])
(bind-lib libchipmunk cpShapeGetCollisionType [cpCollisionType,cpShape*])
(bind-lib libchipmunk cpShapeSetCollisionType [void,cpShape*,cpCollisionType])
(bind-lib libchipmunk cpShapeGetFilter [cpShapeFilter,cpShape*])
(bind-lib libchipmunk cpShapeSetFilter [void,cpShape*,cpShapeFilter])
(bind-lib libchipmunk cpCircleShapeAlloc [cpCircleShape*])
(bind-lib libchipmunk cpCircleShapeInit [cpCircleShape*,cpCircleShape*,cpBody*,cpFloat,cpVect])
(bind-lib libchipmunk cpCircleShapeNew [cpShape*,cpBody*,cpFloat,cpVect])
(bind-lib libchipmunk cpCircleShapeGetOffset [cpVect,cpShape*])
(bind-lib libchipmunk cpCircleShapeGetRadius [cpFloat,cpShape*])
(bind-lib libchipmunk cpSegmentShapeAlloc [cpSegmentShape*])
(bind-lib libchipmunk cpSegmentShapeInit [cpSegmentShape*,cpSegmentShape*,cpBody*,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpSegmentShapeNew [cpShape*,cpBody*,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpSegmentShapeSetNeighbors [void,cpShape*,cpVect,cpVect])
(bind-lib libchipmunk cpSegmentShapeGetA [cpVect,cpShape*])
(bind-lib libchipmunk cpSegmentShapeGetB [cpVect,cpShape*])
(bind-lib libchipmunk cpSegmentShapeGetNormal [cpVect,cpShape*])
(bind-lib libchipmunk cpSegmentShapeGetRadius [cpFloat,cpShape*])


(bind-lib libchipmunk cpSpaceNew [cpSpace*]*)
(bind-lib libchipmunk cpSpaceSetGravity [void,cpSpace*,cpVect]*)
(bind-lib libchipmunk cpSpaceGetGravity [cpVect,cpSpace*])
(bind-lib libchipmunk cpSpaceGetStaticBody [cpBody*,cpSpace*])
(bind-lib libchipmunk cpSpaceAddShape [cpSpace*,cpSpace*,cpShape*])
(bind-lib libchipmunk cpSpaceAddBody [cpBody*,cpSpace*,cpBody*])
(bind-lib libchipmunk cpSpaceStep [void,cpSpace*,cpFloat])

(bind-func test
  (lambda ()
    (let (
        (space (cpSpaceNew))
        (ground (cpSegmentShapeNew (cpSpaceGetStaticBody space) (cpVect_val -20.0 5.0) (cpVect_val 20.0 -5.0) 0.0))
        (mass 1.0)
        (radius 5.0)
        (moment (cpMomentForCircle mass 0.0 radius (cpVect_val 0.0 0.0)))
        (ballBody (cpSpaceAddBody space (cpBodyNew mass moment)))
        (ballShape (cpSpaceAddShape space (cpCircleShapeNew ballBody radius (cpVect_val 0.0 0.0))))
        (timeStep (/ 1.0 60.0)))
      (cpSpaceSetGravity space (cpVect_val 0.0 -100.0))
      (cpShapeSetFriction ground 1.0)
      (cpSpaceAddShape space ground)
      (cpBodySetPosition ballBody (cpVect_val 0.0 15.0))
      (cpShapeSetFriction ballShape 0.7)
      (let ((i:i64 0))
        (dotimes (i 120)
          (let (
              (pos (cpBodyGetPosition ballBody))
              (vel (cpBodyGetVelocity ballBody)))
            (printf "Tick: %3d pos: " i)
            (print pos)
            (printf " vel: ")
            (println vel)
            (cpSpaceStep space timeStep)))))))

(test)
