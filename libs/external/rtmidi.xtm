;;; rtmidi.xtm -- MIDI support for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: rtmidi

;;; Commentary:

;; The rtmidi library is a cross-platform MIDI library by Gary P.
;; Scavone.

;; Source and documentation for the rtmidi library is available at
;; http://music.mcgill.ca/~gary/rtmidi/

;; Because rtmidi is a C++ library (and Extempore can only bind C libs
;; at this stage), there is a project called CRtMidi which wraps
;; (part) of the rtmidi API in a C interface. This interface is then
;; bound dynamically in xtlang---that's what this file is for.

;; to compile:

;; 1. get the 'Extempore-ified' fork of RTMidi from
;;    https://github.com/benswift/rtmidi-c-api
;; 2. build and isntall the c-API-wrapped shared lib with ./make-cshlib

;;; Code:

(define librtmidi
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:load-dylib "librtmidi.so"))
          ((string=? platform "Windows") (sys:load-dylib "librtmidi.dll"))
          ((string=? platform "OSX") (sys:load-dylib "librtmidi.dylib"))
          (else (print "Unknown platform: " platform)))))

(if (not librtmidi)
    (print-error "Could not load librtmidi dynamic library"))

(bind-val RTMIDI_NOERROR i32 0)
(bind-val RTMIDI_ERROR i32 1)

(define *midi-note-off* 8)              ;; key, velocity
(define *midi-note-on* 9)               ;; key, velocity
(define *midi-aftertouch* 10)            ;; key, touch
(define *midi-continuous-controller* 11) ;; controller, value
(define *midi-cc* 11) ;; controller, value
(define *midi-patch-change* 12)           ;;
(define *midi-channel-pressure* 13)      ;;
(define *midi-pitch-bend* 14)            ;; lsb (7 bits), msb (7 bits)

(bind-val MIDI_NOTE_OFF i8 *midi-note-off*)
(bind-val MIDI_NOTE_ON i8 *midi-note-on*)
(bind-val MIDI_AFTERTOUCH i8 *midi-aftertouch*)
(bind-val MIDI_CONTINUOUS_CONTROLLER i8 *midi-continuous-controller*)
(bind-val MIDI_PATCH_CHANGE i8 *midi-patch-change*)
(bind-val MIDI_CHANNEL_PRESSURE i8 *midi-channel-pressure*)
(bind-val MIDI_PITCH_BEND i8 *midi-pitch-bend*)

;; API selection enums

(bind-val UNSPECIFIED i32 0) ;; try to auto-detect the platform
(bind-val MACOSX_CORE i32 1)
(bind-val LINUX_ALSA  i32 2)
(bind-val UNIX_JACK   i32 3)
(bind-val WINDOWS_MM  i32 4)
(bind-val WINDOWS_KS  i32 5)
(bind-val RTMIDI_DUMMY i32 6)

(bind-type midi_in_device <i8*>)
(bind-type midi_out_device <i8*>)
(bind-alias midi_callback [i8*,double,i64,i8*]*)

;; midi input

(bind-lib librtmidi newMidiInDevice [i32,midi_in_device*,i32,i8*]*)
(bind-lib librtmidi deleteMidiInDevice [i32,midi_in_device*]*)

(bind-lib librtmidi getInCurrentApi [i64,midi_in_device*]*)
(bind-lib librtmidi getInPortCount [i64,midi_in_device*]*)
(bind-lib librtmidi getInPortName [i8*,midi_in_device*,i64]*)

(bind-lib librtmidi openInPort [i32,midi_in_device*,i64,i8*]*)
(bind-lib librtmidi openInVirtualPort [i32,midi_in_device*,i8*]*)
(bind-lib librtmidi closeInPort [i32,midi_in_device*]*)

(bind-lib librtmidi setCallback [i32,midi_in_device*,i8*]*)
(bind-lib librtmidi cancelCallback [i32,midi_in_device*]*)

;; midi output

(bind-lib librtmidi newMidiOutDevice [i32,midi_out_device*,i32,i8*]*)
(bind-lib librtmidi deleteMidiOutDevice [i32,midi_out_device*]*)

(bind-lib librtmidi getOutCurrentApi [i64,midi_out_device*]*)
(bind-lib librtmidi getOutPortCount [i64,midi_out_device*]*)
(bind-lib librtmidi getOutPortName [i8*,midi_out_device*,i64]*)

(bind-lib librtmidi openOutPort [i32,midi_out_device*,i64,i8*]*)
(bind-lib librtmidi openOutVirtualPort [i32,midi_out_device*,i8*]*)
(bind-lib librtmidi closeOutPort [i32,midi_out_device*]*)
(bind-lib librtmidi sendMessage [i32,midi_out_device*,i64,i8*]*)

;; poly'ing

;; (bind-poly newMidiDevice newMidiInDevice)
;; (bind-poly newMidiDevice newMidiOutDevice)
;; (bind-poly deleteMidiDevice deleteMidiInDevice)
;; (bind-poly deleteMidiDevice deleteMidiOutDevice)
;; (bind-poly getCurrentApi getInCurrentApi)
;; (bind-poly getCurrentApi getOutCurrentApi)
;; (bind-poly getPortCount getInPortCount)
;; (bind-poly getPortCount getOutPortCount)
;; (bind-poly getPortName getInPortName)
;; (bind-poly getPortName getOutPortName)
;; (bind-poly openPort openInPort)
;; (bind-poly openPort openOutPort)
;; (bind-poly openVirtualPort openInVirtualPort)
;; (bind-poly openVirtualPort openOutVirtualPort)
;; (bind-poly closePort closeInPort)
;; (bind-poly closePort closeOutPort)

;;  set up some input/output ports

(bind-func midi_query_inports
  (lambda (dev:midi_in_device*)
    (let ((num_ports (getInPortCount dev))
          (i:i64 0))
      (printf "--Input ports--\n")
      (dotimes (i num_ports)
	(printf "Port %lld: %s\n" i (getInPortName dev i)))
      (printf "\n")
      void)))

(bind-func midi_query_outports
  (lambda (dev:midi_out_device*)
    (let ((num_ports (getOutPortCount dev))
          (i:i64 0))
      (printf "--Output ports--\n")
      (dotimes (i num_ports)
	(printf "Port %lld: %s\n" i (getOutPortName dev i)))
      (printf "\n")
      void)))

(bind-poly midi_query_ports midi_query_inports)
(bind-poly midi_query_ports midi_query_outports)

;; device/port creation

(bind-func midi_new_indevice
  (let ((device:midi_in_device* (halloc)))
    (lambda ()
      (newMidiInDevice device UNSPECIFIED "Extempore Midi Input Device")
      device)))

(bind-func midi_new_outdevice
  (let ((device:midi_out_device* (halloc)))
    (lambda ()
      (newMidiOutDevice device UNSPECIFIED "Extempore Midi Output Device")
      device)))

(bind-func midi_open_inport
  (lambda (device:midi_in_device* port)
    (openInPort device port "Extempore Input Port")))

(bind-func midi_open_virtual_inport
  (lambda (device:midi_in_device*)
    (openInVirtualPort device "Extempore Virtual Input Port")))

(bind-func midi_open_outport
  (lambda (device:midi_out_device* port)
    (openOutPort device port "Extempore Output Port")))

(bind-func midi_open_virtual_outport
  (lambda (device:midi_out_device*)
    (openOutVirtualPort device "Extempore Virtual Output Port")))

;; device/port destruction

(bind-func midi_delete_indevice
  (lambda (device:midi_in_device*)
    (deleteMidiInDevice device)))

(bind-func midi_delete_outdevice
  (lambda (device:midi_out_device*)
    (deleteMidiOutDevice device)))

(bind-func midi_close_inport
  (lambda (device:midi_in_device*)
    (closeInPort device)))

(bind-func midi_close_outport
  (lambda (device:midi_out_device*)
    (closeOutPort device)))

;; (bind-poly midi_delete_device midi_delete_indevice)
;; (bind-poly midi_delete_device midi_delete_outdevice)

(bind-func midi_default_callback
  (let ((type:i8 0) (chan:i8 0) (a:i8 0) (b:i8 0))
    (lambda (time:double len:i64 msg:i8*)
      (set! type (>> (pref msg 0) 4))
      (set! chan (& (pref msg 0) 15))
      (set! a (pref msg 1))
      (set! b (pref msg 2))
      (printf "time = %f\ntype = %u\nchan = %u\na = %u\nb = %u\n---------------\n"
              time (i8toi32 type) (i8toi32 chan) (i8toi32 a) (i8toi32 b))
      void)))

(bind-func midi_register_device
  "Register a midi sink/source"
  (lambda (device:midi_in_device* callback_name:i8*)
    (let ((len (strlen callback_name))
	  (callback_name_native:i8* (salloc (+ len 8))))
      (strncpy callback_name_native callback_name (+ 1 len))
      (strncpy (pref-ptr callback_name_native len) "_native" 8)
      (printf "\nregistering %s as MIDI callback function\n\n" callback_name_native)
      (setCallback device (llvm_get_function_ptr callback_name_native)))))

(bind-func midi_unregister_device
  "Register Extempore as a midi sink/source"
  (lambda (device:midi_in_device*)
    (cancelCallback device)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; default Extempore MIDI connectivity ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define *midi-in-device* #f)
(define *midi-out-device* #f)

(define midi-register-events
  (lambda ()
    (set! *midi-in-device* (midi_new_indevice))
    (midi_register_device *midi-in-device* "midi_default_callback")
    (set! *midi-out-device* (midi_new_outdevice))))

;; (midi-register-events)

(define midi-deregister-events
  (lambda ()
    (midi_delete_indevice *midi-in-device*)
    (set! *midi-in-device* #f)
    (midi_delete_outdevice *midi-out-device*)
    (set! *midi-out-device* #f)
    (print "Deregstered Extempore MIDI input/output devices.\n")))

;; (midi-deregister-events)


;; TODO I'm up to here

;; (midi_unregister_device *midi-extempore-virtual-inp)

;; (midi_query_inports (midi_new_indevice))
;; (midi_query_outports (midi_new_outdevice))

(bind-func midi_send
  (lambda (device:midi_out_device* type chan a b)
    (let ((msg:i8* (salloc 3)))
      (pfill! msg (+ (<< type 4) chan) a b)
      (sendMessage device 3 msg))))

;; test sending & recieving midi
;; (midi_send (midi_new_outdevice) *midi-note-on* 0 60 80 0)
;; (midi_send (midi_new_outdevice) *midi-note-off* 0 66 80 0)

(define play-midi-note
  (lambda (time device pitch velocity duration channel)
    (callback time 'midi_send device *midi-note-on* channel pitch velocity)
    (callback (+ time duration) 'midi_send device *midi-note-off* channel pitch velocity)))

;; a midi-specific play macro

;; (define-macro (mplay args)
;;   (if (not (symbol? (cadr args)))
;;       (if (> (length args) 6)
;;           `(play-midi-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))
;;                       ,(car (cdr (cddddr args))) ,(car (cddr (cddddr args))))
;;           `(play-midi-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))))
;;       (if (> (length args) 7)
;;           `(play-midi-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
;;                       (*metro* 'dur ,(car (cdr (cddddr args)))) ,(car (cddr (cddddr args))) ,(car (cdddr (cddddr args))))
;;           `(play-midi-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
;;                       (*metro* 'dur ,(car (cdr (cddddr args))) ,(car (cddr (cddddr args))))))))

(define-macro (mplay args)
  (if (symbol? (cadr args))
      `(play-midi-note (*metro* beat) ,(cadr args)
		       (real->integer ,(caddr args))
		       (real->integer ,(cadddr args))
		       (*metro* 'dur ,(car (cddddr args))) 0)
      `(play-midi-note (*metro* (+ beat ,(cadr args))) ,(caddr args)
		       (real->integer ,(cadddr args))
		       (real->integer ,(car (cddddr args)))
		       (*metro* 'dur ,(cadr (cddddr args))) 0)))

;; uncomment if you want to use play instead of mplay
;;
;; (macro (play args)
;;   (if (symbol? (cadr args))
;;       `(play-midi-note (*metro* beat) ,(cadr args)
;;                   (real->integer ,(caddr args))
;;                   (real->integer ,(cadddr args))
;;                   (*metro* 'dur ,(car (cddddr args))) 0)
;;       `(play-midi-note (*metro* (+ beat ,(cadr args))) ,(caddr args)
;;                   (real->integer ,(cadddr args))
;;                   (real->integer ,(car (cddddr args)))
;;                   (*metro* 'dur ,(cadr (cddddr args))) 0)))


;; (let ((beat (*metro* 'get-beat 1)))
;;   (mplay midiout 60. 70.8 1.0))

;; (play-midi-note (now) *midi-in-device* 72 20 10000 0)
