;;; audio_dsp.xtm -- audio DSP library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: kiss-fft, libsndfile

;;; Commentary:

;;
;; extended audio_dsp for spectral and
;; snd file related fucntionality
;;
;; hopefully we can bring this back
;; into core/audio_dsp once we have
;; native sndfile and fft options.
;;

;;; Code:

;; lib-loading config
(sys:load "libs/audio_dsp_ext.xtm" 'quiet)
(sys:load-preload-check 'audio_dsp_ext)
(define *xtmlib-audio_dsp_ext-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/fft.xtm")
 (sys:load "libs/external/sndfile.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/external/fft.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/external/sndfile.xtm" 'quiet))

(impc:aot:insert-header "xtmaudio_dsp_ext")

(if (= 1 (audio_64bit))
    (bind-alias cpxSAMPLE cpxd)
    (bind-alias cpxSAMPLE cpxf))

(if (= 1 (audio_64bit))
    (bind-val cpxSAMPLE_SIZE i64 16)
    (bind-val cpxSAMPLE_SIZE i64 8))

(if (= 1 (audio_64bit))
    (bind-val SAMPLE_SIZE i64 8)
    (bind-val SAMPLE_SIZE i64 4))

(if (= 1 (audio_64bit))
    (bind-alias ComplexS Complexd)
    (bind-alias ComplexS Complexf))
       

;; STFT
;; 
;; r, n and k should be powers of 2
;;
;; r is the rate at which you want forward fft's to be calculated
;; n is the size of the fft window 'unpadded'
;; k is the size of the fft window 'padded'
;;
;; r <= n
;; k >= n
(bind-func stft_c 10000000
  (lambda (r:i64 n:i64 k:i64)
    (if (< k n) (set! k n))
    (if (> r n) (set! r n))
    (let ((buf:SAMPLE* (alloc n))
          (spectrum:ComplexS* (alloc k))          
          (pad:SAMPLE* (alloc k))
          (segments (/ n r))
          (pad_offset (dtoi64 (- (* .5 (i64tod k)) (* .5 (i64tod n)))))
          (padbuf (cast (pref-ptr pad pad_offset) i8*))
          (fftcfg (fft_config k))
          (n2 (* n 2)) (nhalf (/ n 2)) (i 0) (idx (- segments 1)) (t 0) (t2 0))
      (lambda (x)
        (if (= t2 0)
            (let ((start (* idx r))
                  (samps (- n start)))
              ;; copy 'n' samples to padded buffer 
              (memcpy padbuf (convert (pref-ptr buf start)) (* SAMPLE_SIZE samps))
              (memcpy padbuf (convert (pref-ptr buf 0)) (* SAMPLE_SIZE start))
              ;; apply windowing function
              (window_hamming_f (cast padbuf SAMPLE*) n)
              ;; forward fft (pad is padbuf)
              (fft pad (convert spectrum) k)
              ;; inc index
              (set! idx (% (+ idx 1) segments))
              ))
        (pset! buf t x)        
        (set! t (+ t 1))
        (if (= t n) (set! t 0))        
        (set! t2 (+ t2 1))
        (if (= t2 r) (set! t2 0))
        x))))

(bind-func stft_st_c
  (lambda (r n k)
    (let ((L (stft_c r n k))
          (R (stft_c r n k))
          (left:ComplexS* (L.spectrum))
          (right:ComplexS* (R.spectrum))
          (i 0))
      (lambda (chan:i64 x)
        (if (= chan 0) (L x) (R x))))))


(bind-func stft_mc_c
  (lambda (channels:i64 r n k)
    (let ((fftchans:[float,float]** (alloc channels))
          (spectrums:ComplexS** (alloc channels)) 
          (i 0))
      (dotimes (i channels)
        (let ((F (stft_c r n k)))
          (pset! fftchans i F)
          (pset! spectrums i (F.spectrum))))
      (lambda (chan:i64 x)
        ((pref fftchans chan) x)))))




;; uniform partitioned convolution in frq domain
;; expects mono aif/wav audio file at samplerate
(bind-func spectral_convolution_c
  (lambda (path:i8* lgth:i64)
    (let ((_irlgth (read_audio_data path null 0 0 1)) ;; get size of ir file (assumes mono!!)
          (irlgth (+ _irlgth (- lgth (% _irlgth lgth)))) ;; pad to whole multiple of lgth
          (parts (/ irlgth lgth)) ;; how many partitions
          (po 0) ;; partition offset
          (irs:cpxSAMPLE* (zalloc (* 2 irlgth))) ;; storage for all IR FFT 'partitions'
          (ffts:cpxSAMPLE* (zalloc (* 2 irlgth))) ;; storage for all total forward ffts
          (padlgth (* lgth 2)) ;; padlgth is for convolution buffers                    
          (aorb:i1 #t) ;; #t for a #f for b          
          (irtaila:SAMPLE* (zalloc lgth)) ;; buffer ir tail
          (irtailb:SAMPLE* (zalloc lgth))
          (drya:SAMPLE* (zalloc padlgth)) ;; buffer input signal
          (dryb:SAMPLE* (zalloc padlgth))
          (t1:i64 0) (i:i64 0) (out:SAMPLE 0.0) (j:i64 0)
          (A:cpxSAMPLE* (zalloc padlgth)) 
          (B:cpxSAMPLE* (zalloc padlgth))
          (a:SAMPLE* (zalloc padlgth))
          (t2:double 0.0)
          (output:SAMPLE* (zalloc lgth))) ;; buffer output
      (printf "IR:(%.1f seconds) Partitions(size:%lld num:%lld)\n" (ftod (/ (convert irlgth) (convert SR))) lgth parts)
      ;; partition and store IR spectra (circlar convolution so padded)
      (dotimes (i parts)
        (memset (cast A i8*) 0 (convert (* cpxSAMPLE_SIZE padlgth))) ;; zero pad
        (read_audio_data path output (* i lgth) lgth 0)
        (fill_cpx_buffer output A lgth)
        (fft A (pref-ptr irs (* i padlgth)) padlgth))
      (lambda (in:SAMPLE dry:SAMPLE wet:SAMPLE)
        (set! t2 (clock_clock))
        ;; store 'input' data which is 'ahead of out' by lgth samples
        (pset! (if aorb drya dryb) t1 in)
        ;; set output which is lgth samples behind 'in'
        (set! out ;; out is always delayed by lgth
              (+ (* dry (pref (if aorb dryb drya) t1)) ;; playback 'delayed' input
                 (* 4.0 wet ;; wet output signal 
                    (+ (pref output t1) ;; overlap-add current-output with ...
                       (pref (if aorb irtaila irtailb) t1))))) ;; delayed-irtail
        ;; increment time
        (set! t1 (+ t1 1))
        ;; if we have buffered lgth samples then run convolution
        (if (= t1 lgth)
            (let ((_fft:cpxSAMPLE* (pref-ptr ffts (* po padlgth)))
                  (_ir:cpxSAMPLE* null))
              ;; forward FFT of incoming signal
              (fftr (if aorb drya dryb) B padlgth)
              ;; store FFT to use 'now' and also for 'delayed' use
              (memcpy (cast _fft i8*) (cast B i8*) (convert (* padlgth cpxSAMPLE_SIZE)))
              ;; run convolution over all partions
              (dotimes (i parts)
                (set! j (% (+ parts (- po i)) parts))
                (set! _fft (pref-ptr ffts (* j padlgth)))                
                (set! _ir (pref-ptr irs (* i padlgth)))
                (cpxmul _fft _ir A padlgth)
                (cpxadd A B B padlgth))
              ;; after convolution is complete back to time domain!
              (ifftr B a padlgth)
              (let ((scale:SAMPLE (/ 1.0 (convert (* lgth parts))))
                    (tail (if aorb irtaila irtailb)))
                (dotimes (i lgth)
                  (pset! output i (* (pref a i) scale)))
                (dotimes (i lgth)
                  (pset! tail i (* (pref a (+ lgth i)) scale))))
              ;; reset everything for next cycle
              (set! aorb (if aorb #f #t)) ;; swap buffers
              (set! po (% (+ po 1) parts))
              (set! t1 0)))
        (if (= t1 0)
            (println (- (clock_clock) t2)))
        ;; simply return out
        out))))


;; poly wrapper for spectral_convolution_c
(bind-func spectral_convolution_c_
  (lambda (path:i8*)
    (spectral_convolution_c path (* 4 FRAMES))))

(bind-poly creverb_c spectral_convolution_c)
(bind-poly creverb_c spectral_convolution_c_)

(bind-func creverb_st_c_a
  (lambda (pathl pathr lgth)
    (let ((convl (spectral_convolution_c pathl lgth))
          (convr (spectral_convolution_c pathr lgth)))
      (lambda (chan:i64 in dry wet)
        (cond ((= chan 0)
               (convl in dry wet))
              ((= chan 1)
               (convr in dry wet))
              (else 0.0))))))

(bind-func creverb_st_c_b
  (lambda (pathl pathr)
    (creverb_st_c_a pathl pathr (* FRAMES 4))))

(bind-poly creverb_st_c creverb_st_c_a)
(bind-poly creverb_st_c creverb_st_c_b)

(define *xtmlib-audio_dsp_ext-loaded* #t)

(impc:aot:insert-footer "xtmaudio_dsp_ext")
