;;;;;;;;;  FFT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; You can get the source for kiss_fft from
;; http://sourceforge.net/projects/kissfft/
;;
;; The basic kiss_fft library only requires the file kiss_fft.c
;; You have to build this into a dyib yourself: on OSX this can be
;; done with:
;;
;; gcc kiss_fft.c -dynamiclib -I/usr/include/malloc -o kiss_fft.1.2.9.dylib -current_version 1.2.9
;;
;; Then, copy the dylib into somewhere on your lib path, e.g. /usr/local/lib
;;
;; After that, this should all work

(define-lib kiss_fft.1.2.9)

(if (not kiss_fft.1.2.9)
    (print-error "Could not load dynamic library"))

;; bind the required types and function signatures (see kiss_fft.h)

(bind-type kiss_fft_cpx <float,float>)
(bind-type kiss_fft_state <i32,i32,|64,i32|,|1,kiss_fft_cpx|>)
(bind-alias kiss_fft_cfg kiss_fft_state*)

(bind-lib kiss_fft.1.2.9 kiss_fft_alloc [kiss_fft_cfg,i32,i32,i8*,i64*]*)
(bind-lib kiss_fft.1.2.9 kiss_fft [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)
(bind-lib kiss_fft.1.2.9 kiss_fft_stride [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*,i32]*)
(bind-lib kiss_fft.1.2.9 kiss_fft_cleanup [i8*,i8*]*)
(bind-lib kiss_fft.1.2.9 kiss_fft_next_fast_size [i32,i32]*)

;; some helpers for working with complex numbers in xtlang

(bind-type cpxd <double,double>)
(bind-type cpxf <float,float>)

(bind-func fill_cpx_buffer_cpxf
  (lambda (re:float* im:float* com:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr com i) 0 (pref re i))
	(tset! (pref-ptr com i) 1 (pref im i))))
    void))

(bind-func fill_cpx_buffer_cpxd
  (lambda (re:double* im:double* com:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr com i) 0 (pref re i))
	(tset! (pref-ptr com i) 1 (pref im i))))
    void))

(bind-poly fill_cpx_buffer fill_cpx_buffer_cpxf)
(bind-poly fill_cpx_buffer fill_cpx_buffer_cpxd)

(bind-func conjugate_cpxf
  (lambda (signal:cpxf* conj:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr conj i)
	       1
	       (* -1.0 (tref (pref-ptr signal i) 1))))
      void)))

(bind-func conjugate_cpxd
  (lambda (signal:cpxd* conj:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr conj i)
	       1
	       (* -1.0 (tref (pref-ptr signal i) 1))))
      void)))

(bind-poly conjugate_cpx conjugate_cpxf)
(bind-poly conjugate_cpx conjugate_cpxd)

(bind-func buffer_cart_to_pol_cpxf
  (lambda (cart:cpxf* pol:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr pol i)
	       0
	       (sqrtf (+ (powf (tref (pref-ptr cart i) 0) 2.0)
                         (powf (tref (pref-ptr cart i) 1) 2.0))))
	(tset! (pref-ptr pol i)
	       1
	       (atan2f (tref (pref-ptr cart i) 1)
                       (tref (pref-ptr cart i) 0)))))
    void))

(bind-func buffer_pol_to_cart_cpxf
  (lambda (pol:cpxf* cart:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr cart i)
	       0
	       (* (tref (pref-ptr pol i) 0)
		  (cosf (tref (pref-ptr pol i) 1))))
	(tset! (pref-ptr cart i)
	       1
	       (* (tref (pref-ptr pol i) 0)
		  (sinf (tref (pref-ptr pol i) 1))))))
    void))

(bind-func buffer_cart_to_pol_cpxd
  (lambda (cart:cpxd* pol:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr pol i)
	       0
	       (sqrt (+ (pow (tref (pref-ptr cart i) 0) 2.0)
			(pow (tref (pref-ptr cart i) 1) 2.0))))
	(tset! (pref-ptr pol i)
	       1
	       (atan2 (tref (pref-ptr cart i) 1)
		      (tref (pref-ptr cart i) 0)))))
    void))

(bind-func buffer_pol_to_cart_cpxd
  (lambda (pol:cpxd* cart:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr cart i)
	       0
	       (* (tref (pref-ptr pol i) 0)
		  (cos (tref (pref-ptr pol i) 1))))
	(tset! (pref-ptr cart i)
	       1
	       (* (tref (pref-ptr pol i) 0)
		  (sin (tref (pref-ptr pol i) 1))))))
    void))

(bind-poly buffer_cart_to_pol buffer_cart_to_pol_cpxf)
(bind-poly buffer_cart_to_pol buffer_cart_to_pol_cpxd)
(bind-poly buffer_pol_to_cart buffer_pol_to_cart_cpxf)
(bind-poly buffer_pol_to_cart buffer_pol_to_cart_cpxd)

(bind-func buffer_re_only_cpxf
  "get the (float) real components of the complex buffer"
  (lambda (in_cpxf:cpxf*
      out_float:float*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_float
	       i
	       (tref (pref-ptr in_cpxf i) 0))))
    void))

(bind-func buffer_im_only_cpxf
  "get the (float) imaginary components of the complex buffer"
  (lambda (in_cpxf:cpxf*
      out_float:float*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_float
	       i
	       (tref (pref-ptr in_cpxf i) 1))))
    void))

(bind-func buffer_re_only_cpxd
  "get the (double) real components of the complex buffer"
  (lambda (in_cpxd:cpxd*
      out_double:double*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_double
	       i
	       (tref (pref-ptr in_cpxd i) 0))))
    void))

(bind-func buffer_im_only_cpxd
  "get the (double) imaginary components of the complex buffer"
  (lambda (in_cpxd:cpxd*
      out_double:double*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_double
	       i
	       (tref (pref-ptr in_cpxd i) 1))))
    void))

(bind-poly buffer_re_only buffer_re_only_cpxf)
(bind-poly buffer_im_only buffer_re_only_cpxf)
(bind-poly buffer_re_only buffer_re_only_cpxd)
(bind-poly buffer_im_only buffer_re_only_cpxd)

(bind-func buffer_cpxd_to_cpxf
  (lambda (in_cpxd:cpxd*
      out_cpxf:cpxf*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
        (tset! (pref-ptr out_cpxf i)
               0
               (dtof (tref (pref-ptr in_cpxd i) 0)))
        (tset! (pref-ptr out_cpxf i)
               1
               (dtof (tref (pref-ptr in_cpxd i) 1)))))
    void))

(bind-func buffer_cpxf_to_cpxd
  (lambda (in_cpxf:cpxf*
      out_cpxd:cpxd*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
        (tset! (pref-ptr out_cpxd i)
               0
               (ftod (tref (pref-ptr in_cpxf i) 0)))
        (tset! (pref-ptr out_cpxd i)
               1
               (ftod (tref (pref-ptr in_cpxf i) 1)))))
    void))

;; perform the FFTs

(bind-func fft_cpxf
  "calculate the FFT of a real (float) input signal"
  (lambda (in:cpxf* out:cpxf* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    0 null null)))
      (kiss_fft fft_config
                (cast in kiss_fft_cpx*)
                (cast out kiss_fft_cpx*)))
    void))

(bind-func fft_cpxd
  "calculate the FFT of a real (double) input signal"
  (lambda (in:cpxd* out:cpxd* len:i64)
    (let ((inf:cpxf* (salloc len))
          (outf:cpxf* (salloc len)))
      (buffer_cpxd_to_cpxf in inf len)
      (fft_cpxf inf outf len)
      (buffer_cpxf_to_cpxd outf out len))
    void))

(bind-poly fft fft_cpxf)
(bind-poly fft fft_cpxd)

(bind-func inverse_fft_cpxf
  "calculate the inverse FFT of a real (float) input signal"
  (lambda (in:cpxf* out:cpxf* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    1 null null))
          (i 0))
      (kiss_fft fft_config
                (cast in kiss_fft_cpx*)
                (cast out kiss_fft_cpx*)))
    (dotimes (i len)
      (tset! (pref-ptr out i)
             0
             (/ (tref (pref-ptr out i) 0) (i64tof len)))
      (tset! (pref-ptr out i)
             1
             (/ (tref (pref-ptr out i) 1) (i64tof len))))
    void))

(bind-func inverse_fft_cpxd
  "calculate the inverse FFT of a real (double) input signal"
  (lambda (in:cpxd* out:cpxd* len:i64)
    (let ((inf:cpxf* (salloc len))
          (outf:cpxf* (salloc len)))
      (buffer_cpxd_to_cpxf in inf len)
      (inverse_fft_cpxf inf outf len)
      (buffer_cpxf_to_cpxd outf out len))
    void))

(bind-poly inverse_fft inverse_fft_cpxf)
(bind-poly inverse_fft inverse_fft_cpxd)
