;;; fft.xtm -- FFT library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: kiss_fft

;;; Commentary:

;; Bindings for KissFFT: http://kissfft.sourceforge.net

;; An Extempore-ready (will build a shared kiss_fft shared lib) branch
;; is up at https://github.com/benswift/kiss_fft

;; To build the shared lib, clone the above git repo and

;; make shared && make install

;;; Code:

;; lib-loading config
(sys:load "libs/fft.xtm" 'quiet)
(sys:load-preload-check 'fft)
(define *xtmlib-fft-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm")
 (sys:load "libs/core/math.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/core/std.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/core/math.xtm" 'quiet))

(impc:aot:insert-header "xtmfft")

;; set up the current dylib name and path (for AOT compilation)
(impc:aot:set-dylib-name-info
 'libkissfft
 (cond ((string=? (sys:platform) "OSX")
        "kiss_fft.dylib")
       ((string=? (sys:platform) "Linux")
        "kiss_fft.so")
       ((string=? (sys:platform) "Windows")
        "KissFFT.dll")
       (else
        (begin (print-with-colors 'red 'default #f (print "Error"))
               (print ": unsupported platform ")
               (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

;; load the dylib
(define libkissfft
  (sys:load-dylib (cdr *impc:aot:current-load-dylib-info*)))

(if (not libkissfft)
    (print-error "Could not load kiss_fft dynamic library"))

;; bind the required types and function signatures (see kiss_fft.h)

;; type of kiss_fft_should be whatever the kiss_fft shared library was
;; been built with (check kiss_fft.h:47)

;; if kiss_fft_scalar is float (see kiss_fft.h line 47)
(bind-alias kiss_fft_scalar float)
(bind-alias kiss_fft_cpx Complexf)

(bind-alias kiss_fft_cfg i8*)

(bind-lib libkissfft kiss_fft_alloc [kiss_fft_cfg,i32,i32,i8*,i64*]*)
(bind-lib libkissfft kiss_fft [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)
(bind-lib libkissfft kiss_fft_stride [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*,i32]*)
(bind-lib libkissfft kiss_fft_cleanup [i8*,i8*]*)
(bind-lib libkissfft kiss_fft_next_fast_size [i32,i32]*)

;; tools/kiss_fftr.h
(bind-alias kiss_fftr_cfg i8*)
(bind-lib libkissfft kiss_fftr_alloc [kiss_fftr_cfg,i32,i32,i8*,i64*]*)
(bind-lib libkissfft kiss_fftr [i8*,kiss_fftr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)
(bind-lib libkissfft kiss_fftri [i8*,kiss_fftr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)

;; complex input

;; this config for FORWARD FFT ONLY!
(bind-func fft_config
  (lambda (len:i64)
    (kiss_fft_alloc (i64toi32 len) 0 null null)))

(bind-func fftc
  "calculate the FFT of an input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    0 null null)))
      (kiss_fft fft_config in out)
      (free fft_config)
      void)))

(bind-func fftc_b
  "calculate the FFT of an input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:kiss_fft_cfg)
    (kiss_fft config in out)
    void))

;; real-valued input

(bind-func fftr
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fftr_cfg (kiss_fftr_alloc
                                     (i64toi32 len)
                                     0 null null)))
      (kiss_fftr fft_config in out)
      (free fft_config)
      void)))

(bind-func fftr_b
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* config:kiss_fft_cfg)
    (kiss_fftr config in out)
    void))

(bind-poly fft fftc)
(bind-poly fft fftr)
(bind-poly fft fftc_b)
(bind-poly fft fftr_b)

;; this config for INVERSE FFT ONLY!
(bind-func ffti_config
  (lambda (len:i64)
    (kiss_fft_alloc (i64toi32 len) 1 null null)))

(bind-func ifftc
  "calculate the inverse FFT of a signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    1 null null)))
      (kiss_fft fft_config in out)
      (free fft_config)
      void)))

(bind-func ifftc_b
  "calculate the inverse FFT of a signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:kiss_fft_cfg)
    (kiss_fft config in out)
    void))

(bind-func ifftr
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* len:i64)
    (let ((fft_config:kiss_fftr_cfg (kiss_fftr_alloc
                                     (i64toi32 len)
                                     1 null null)))
      (kiss_fftri fft_config in out)
      (free fft_config)
      void)))

(bind-func ifftr_b
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* config:kiss_fft_cfg)
    (kiss_fftri config in out)
    void))

(bind-poly ifft ifftc)
(bind-poly ifft ifftr)
(bind-poly ifft ifftc_b)
(bind-poly ifft ifftr_b)

(define *xtmlib-fft-loaded* #t)

(impc:aot:insert-footer "xtmfft")
