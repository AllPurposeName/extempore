;;; fft.xtm -- FFT library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: kiss_fft

;;; Commentary:

;; Bindings for KissFFT: http://kissfft.sourceforge.net

;; An Extempore-ready (will build a shared kiss_fft shared lib) branch
;; is up at https://github.com/benswift/kiss_fft

;; To build the shared lib, clone the above git repo and

;; make shared && make install

;;; Code:

;; now load required libs
(sys:load "libs/core/math.xtm")

;; lib-loading config
(sys:load-preload-check 'fft)
(define *xtmlib-fft-loaded* #f)

(define kiss_fft
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:load-dylib "kiss_fft.so"))
          ((string=? platform "Windows") (sys:load-dylib "kiss_fft.dll"))
          ((string=? platform "OSX") (sys:load-dylib "kiss_fft.dylib"))
          (else (print "Unknown platform: " platform)))))

(if (not kiss_fft)
    (print-error "Could not load kiss_fft dynamic library"))

;; bind the required types and function signatures (see kiss_fft.h)

;; type of kiss_fft_should be whatever the kiss_fft shared library was
;; been built with (check kiss_fft.h:47)

;; if kiss_fft_scalar is float (see kiss_fft.h line 47)
(bind-alias kiss_fft_scalar float)
(bind-alias kiss_fft_cpx cpxf)

(bind-alias kiss_fft_cfg i8*)

(bind-lib kiss_fft kiss_fft_alloc [kiss_fft_cfg,i32,i32,i8*,i64*]*)
(bind-lib kiss_fft kiss_fft [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)
(bind-lib kiss_fft kiss_fft_stride [i8*,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*,i32]*)
(bind-lib kiss_fft kiss_fft_cleanup [i8*,i8*]*)
(bind-lib kiss_fft kiss_fft_next_fast_size [i32,i32]*)

;; tools/kiss_fftr.h
(bind-alias kiss_fftr_cfg i8*)
(bind-lib kiss_fft kiss_fftr_alloc [kiss_fftr_cfg,i32,i32,i8*,i64*]*)
(bind-lib kiss_fft kiss_fftr [i8*,kiss_fftr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)
(bind-lib kiss_fft kiss_fftri [i8*,kiss_fftr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)

;; complex input

(bind-func fft
  "calculate the FFT of an input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    0 null null)))
      (kiss_fft fft_config in out))
    void))

(bind-func ifft
  "calculate the inverse FFT of a signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fft_cfg (kiss_fft_alloc
                                    (i64toi32 len)
                                    1 null null)))
      (kiss_fft fft_config in out)
      void)))

;; real-valued input

(bind-func fftr
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* len:i64)
    (let ((fft_config:kiss_fftr_cfg (kiss_fftr_alloc
                                     (i64toi32 len)
                                     0 null null)))
      (kiss_fftr fft_config in out))
    void))

(bind-func ifftr
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* len:i64)
    (let ((fft_config:kiss_fftr_cfg (kiss_fftr_alloc
                                     (i64toi32 len)
                                     1 null null)))
      (kiss_fftri fft_config in out))
    void))

(define *xtmlib-fft-loaded* #t)
