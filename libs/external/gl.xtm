;;; gl.xtm -- OpenGL bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL.dylib libGLU.dylib libGLUT.dylib

;;; Commentary:

;; This is a modern (core profile) "header", supporting OpenGL 3.2+.
;; If you need older (fixed-function pipeline) OpenGL functionality,
;; look at gl-compatibility in this same directory.

;; based on gl3.h on OSX 10.10

;;; Code:

(sys:load "libs/gl.xtm" 'quiet)
(sys:load-preload-check 'gl)
(define *xtmlib-gl-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/std.xtm")
 (sys:load "libs/external/stb_image.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/core/std.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/external/stb_image.xtm" 'quiet))

(impc:aot:insert-header "xtmgl")

(impc:aot:set-dylib-name-info
 'libGL
 (cond ((string=? (sys:platform) "Linux")
        "libGL.so")
       ((string=? (sys:platform) "Windows")
        "Gl32.dll")
       ((string=? (sys:platform) "OSX")
        "/System/Library/Frameworks/OpenGL.framework/OpenGL")
       (else
        (begin (print-with-colors 'red 'default #f (print "Error"))
               (print ": unknown platform ")
               (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

(define libGL
  (sys:load-dylib (cdr *impc:aot:current-load-dylib-info*)))

;; if on windows also check for opengl32.dll
(if (not libGL)
    (if (string=? "Windows" (sys:platform))
        (begin (set! libGL (sys:load-dylib "opengl32.dll"))
               (if (not libGL)
                   (sys:load-escape "Error loading OpenGL library")))
        (sys:load-escape "Error loading OpenGL library")))

;; gltypes.h

(bind-alias GLbitfield i32)
(bind-alias GLboolean i8)
(bind-alias GLbyte i8)
(bind-alias GLclampf float)
(bind-alias GLclampd double)
(bind-alias GLenum i32)
(bind-alias GLfloat float)
(bind-alias GLdouble double)
(bind-alias GLint i32)
(bind-alias GLshort i16)
(bind-alias GLsizei i32)
(bind-alias GLubyte i8)
(bind-alias GLuint i32)
(bind-alias GLushort i16)
(bind-alias GLvoid i8)
(bind-alias GLint64 i64)
(bind-alias GLuint64 i64)
(bind-alias GLintptr i64)
(bind-alias GLsizeiptr i64)
(bind-alias GLchar i8)
(bind-alias GLsync i8) ;; used as opaque pointer

;; gl.h

;; #ifndef GL_VERSION_1_1
;; /* AttribMask */
(bind-val GL_DEPTH_BUFFER_BIT i32 #x00000100)
(bind-val GL_STENCIL_BUFFER_BIT i32 #x00000400)
(bind-val GL_COLOR_BUFFER_BIT i32 #x00004000)
;; /* Boolean */
(bind-val GL_FALSE GLboolean 0)
(bind-val GL_TRUE GLboolean 1)
;; /* BeginMode */
(bind-val GL_POINTS i32 #x0000)
(bind-val GL_LINES i32 #x0001)
(bind-val GL_LINE_LOOP i32 #x0002)
(bind-val GL_LINE_STRIP i32 #x0003)
(bind-val GL_TRIANGLES i32 #x0004)
(bind-val GL_TRIANGLE_STRIP i32 #x0005)
(bind-val GL_TRIANGLE_FAN i32 #x0006)
;; /* AlphaFunction */
(bind-val GL_NEVER i32 #x0200)
(bind-val GL_LESS i32 #x0201)
(bind-val GL_EQUAL i32 #x0202)
(bind-val GL_LEQUAL i32 #x0203)
(bind-val GL_GREATER i32 #x0204)
(bind-val GL_NOTEQUAL i32 #x0205)
(bind-val GL_GEQUAL i32 #x0206)
(bind-val GL_ALWAYS i32 #x0207)
;; /* BlendingFactorDest */
(bind-val GL_ZERO i32 0)
(bind-val GL_ONE i32 1)
(bind-val GL_SRC_COLOR i32 #x0300)
(bind-val GL_ONE_MINUS_SRC_COLOR i32 #x0301)
(bind-val GL_SRC_ALPHA i32 #x0302)
(bind-val GL_ONE_MINUS_SRC_ALPHA i32 #x0303)
(bind-val GL_DST_ALPHA i32 #x0304)
(bind-val GL_ONE_MINUS_DST_ALPHA i32 #x0305)
;; /* BlendingFactorSrc */
(bind-val GL_DST_COLOR i32 #x0306)
(bind-val GL_ONE_MINUS_DST_COLOR i32 #x0307)
(bind-val GL_SRC_ALPHA_SATURATE i32 #x0308)
;; /* DrawBufferMode */
(bind-val GL_NONE i32 0)
(bind-val GL_FRONT_LEFT i32 #x0400)
(bind-val GL_FRONT_RIGHT i32 #x0401)
(bind-val GL_BACK_LEFT i32 #x0402)
(bind-val GL_BACK_RIGHT i32 #x0403)
(bind-val GL_FRONT i32 #x0404)
(bind-val GL_BACK i32 #x0405)
(bind-val GL_LEFT i32 #x0406)
(bind-val GL_RIGHT i32 #x0407)
(bind-val GL_FRONT_AND_BACK i32 #x0408)
;; /* ErrorCode */
(bind-val GL_NO_ERROR i32 0)
(bind-val GL_INVALID_ENUM i32 #x0500)
(bind-val GL_INVALID_VALUE i32 #x0501)
(bind-val GL_INVALID_OPERATION i32 #x0502)
(bind-val GL_OUT_OF_MEMORY i32 #x0505)
;; /* FrontFaceDirection */
(bind-val GL_CW i32 #x0900)
(bind-val GL_CCW i32 #x0901)
;; /* GetPName */
(bind-val GL_POINT_SIZE i32 #x0B11)
(bind-val GL_POINT_SIZE_RANGE i32 #x0B12)
(bind-val GL_POINT_SIZE_GRANULARITY i32 #x0B13)
(bind-val GL_LINE_SMOOTH i32 #x0B20)
(bind-val GL_LINE_WIDTH i32 #x0B21)
(bind-val GL_LINE_WIDTH_RANGE i32 #x0B22)
(bind-val GL_LINE_WIDTH_GRANULARITY i32 #x0B23)
(bind-val GL_POLYGON_MODE i32 #x0B40)
(bind-val GL_POLYGON_SMOOTH i32 #x0B41)
(bind-val GL_CULL_FACE i32 #x0B44)
(bind-val GL_CULL_FACE_MODE i32 #x0B45)
(bind-val GL_FRONT_FACE i32 #x0B46)
(bind-val GL_DEPTH_RANGE i32 #x0B70)
(bind-val GL_DEPTH_TEST i32 #x0B71)
(bind-val GL_DEPTH_WRITEMASK i32 #x0B72)
(bind-val GL_DEPTH_CLEAR_VALUE i32 #x0B73)
(bind-val GL_DEPTH_FUNC i32 #x0B74)
(bind-val GL_STENCIL_TEST i32 #x0B90)
(bind-val GL_STENCIL_CLEAR_VALUE i32 #x0B91)
(bind-val GL_STENCIL_FUNC i32 #x0B92)
(bind-val GL_STENCIL_VALUE_MASK i32 #x0B93)
(bind-val GL_STENCIL_FAIL i32 #x0B94)
(bind-val GL_STENCIL_PASS_DEPTH_FAIL i32 #x0B95)
(bind-val GL_STENCIL_PASS_DEPTH_PASS i32 #x0B96)
(bind-val GL_STENCIL_REF i32 #x0B97)
(bind-val GL_STENCIL_WRITEMASK i32 #x0B98)
(bind-val GL_VIEWPORT i32 #x0BA2)
(bind-val GL_DITHER i32 #x0BD0)
(bind-val GL_BLEND_DST i32 #x0BE0)
(bind-val GL_BLEND_SRC i32 #x0BE1)
(bind-val GL_BLEND i32 #x0BE2)
(bind-val GL_LOGIC_OP_MODE i32 #x0BF0)
(bind-val GL_COLOR_LOGIC_OP i32 #x0BF2)
(bind-val GL_DRAW_BUFFER i32 #x0C01)
(bind-val GL_READ_BUFFER i32 #x0C02)
(bind-val GL_SCISSOR_BOX i32 #x0C10)
(bind-val GL_SCISSOR_TEST i32 #x0C11)
(bind-val GL_COLOR_CLEAR_VALUE i32 #x0C22)
(bind-val GL_COLOR_WRITEMASK i32 #x0C23)
(bind-val GL_DOUBLEBUFFER i32 #x0C32)
(bind-val GL_STEREO i32 #x0C33)
(bind-val GL_LINE_SMOOTH_HINT i32 #x0C52)
(bind-val GL_POLYGON_SMOOTH_HINT i32 #x0C53)
(bind-val GL_UNPACK_SWAP_BYTES i32 #x0CF0)
(bind-val GL_UNPACK_LSB_FIRST i32 #x0CF1)
(bind-val GL_UNPACK_ROW_LENGTH i32 #x0CF2)
(bind-val GL_UNPACK_SKIP_ROWS i32 #x0CF3)
(bind-val GL_UNPACK_SKIP_PIXELS i32 #x0CF4)
(bind-val GL_UNPACK_ALIGNMENT i32 #x0CF5)
(bind-val GL_PACK_SWAP_BYTES i32 #x0D00)
(bind-val GL_PACK_LSB_FIRST i32 #x0D01)
(bind-val GL_PACK_ROW_LENGTH i32 #x0D02)
(bind-val GL_PACK_SKIP_ROWS i32 #x0D03)
(bind-val GL_PACK_SKIP_PIXELS i32 #x0D04)
(bind-val GL_PACK_ALIGNMENT i32 #x0D05)
(bind-val GL_MAX_TEXTURE_SIZE i32 #x0D33)
(bind-val GL_MAX_VIEWPORT_DIMS i32 #x0D3A)
(bind-val GL_SUBPIXEL_BITS i32 #x0D50)
(bind-val GL_TEXTURE_1D i32 #x0DE0)
(bind-val GL_TEXTURE_2D i32 #x0DE1)
(bind-val GL_POLYGON_OFFSET_UNITS i32 #x2A00)
(bind-val GL_POLYGON_OFFSET_POINT i32 #x2A01)
(bind-val GL_POLYGON_OFFSET_LINE i32 #x2A02)
(bind-val GL_POLYGON_OFFSET_FILL i32 #x8037)
(bind-val GL_POLYGON_OFFSET_FACTOR i32 #x8038)
(bind-val GL_TEXTURE_BINDING_1D i32 #x8068)
(bind-val GL_TEXTURE_BINDING_2D i32 #x8069)
;; /* GetTextureParameter */
(bind-val GL_TEXTURE_WIDTH i32 #x1000)
(bind-val GL_TEXTURE_HEIGHT i32 #x1001)
(bind-val GL_TEXTURE_INTERNAL_FORMAT i32 #x1003)
(bind-val GL_TEXTURE_BORDER_COLOR i32 #x1004)
(bind-val GL_TEXTURE_RED_SIZE i32 #x805C)
(bind-val GL_TEXTURE_GREEN_SIZE i32 #x805D)
(bind-val GL_TEXTURE_BLUE_SIZE i32 #x805E)
(bind-val GL_TEXTURE_ALPHA_SIZE i32 #x805F)
;; /* HintMode */
(bind-val GL_DONT_CARE i32 #x1100)
(bind-val GL_FASTEST i32 #x1101)
(bind-val GL_NICEST i32 #x1102)
;; /* DataType */
(bind-val GL_BYTE i32 #x1400)
(bind-val GL_UNSIGNED_BYTE i32 #x1401)
(bind-val GL_SHORT i32 #x1402)
(bind-val GL_UNSIGNED_SHORT i32 #x1403)
(bind-val GL_INT i32 #x1404)
(bind-val GL_UNSIGNED_INT i32 #x1405)
(bind-val GL_FLOAT i32 #x1406)
(bind-val GL_DOUBLE i32 #x140A)
;; /* LogicOp */
(bind-val GL_CLEAR i32 #x1500)
(bind-val GL_AND i32 #x1501)
(bind-val GL_AND_REVERSE i32 #x1502)
(bind-val GL_COPY i32 #x1503)
(bind-val GL_AND_INVERTED i32 #x1504)
(bind-val GL_NOOP i32 #x1505)
(bind-val GL_XOR i32 #x1506)
(bind-val GL_OR i32 #x1507)
(bind-val GL_NOR i32 #x1508)
(bind-val GL_EQUIV i32 #x1509)
(bind-val GL_INVERT i32 #x150A)
(bind-val GL_OR_REVERSE i32 #x150B)
(bind-val GL_COPY_INVERTED i32 #x150C)
(bind-val GL_OR_INVERTED i32 #x150D)
(bind-val GL_NAND i32 #x150E)
(bind-val GL_SET i32 #x150F)
;; /* MatrixMode (for gl3.h, FBO attachment type) */
(bind-val GL_TEXTURE i32 #x1702)
;; /* PixelCopyType */
(bind-val GL_COLOR i32 #x1800)
(bind-val GL_DEPTH i32 #x1801)
(bind-val GL_STENCIL i32 #x1802)
;; /* PixelFormat */
(bind-val GL_STENCIL_INDEX i32 #x1901)
(bind-val GL_DEPTH_COMPONENT i32 #x1902)
(bind-val GL_RED i32 #x1903)
(bind-val GL_GREEN i32 #x1904)
(bind-val GL_BLUE i32 #x1905)
(bind-val GL_ALPHA i32 #x1906)
(bind-val GL_RGB i32 #x1907)
(bind-val GL_RGBA i32 #x1908)
;; /* PolygonMode */
(bind-val GL_POINT i32 #x1B00)
(bind-val GL_LINE i32 #x1B01)
(bind-val GL_FILL i32 #x1B02)
;; /* StencilOp */
(bind-val GL_KEEP i32 #x1E00)
(bind-val GL_REPLACE i32 #x1E01)
(bind-val GL_INCR i32 #x1E02)
(bind-val GL_DECR i32 #x1E03)
;; /* StringName */
(bind-val GL_VENDOR i32 #x1F00)
(bind-val GL_RENDERER i32 #x1F01)
(bind-val GL_VERSION i32 #x1F02)
(bind-val GL_EXTENSIONS i32 #x1F03)
;; /* TextureMagFilter */
(bind-val GL_NEAREST i32 #x2600)
(bind-val GL_LINEAR i32 #x2601)
;; /* TextureMinFilter */
(bind-val GL_NEAREST_MIPMAP_NEAREST i32 #x2700)
(bind-val GL_LINEAR_MIPMAP_NEAREST i32 #x2701)
(bind-val GL_NEAREST_MIPMAP_LINEAR i32 #x2702)
(bind-val GL_LINEAR_MIPMAP_LINEAR i32 #x2703)
;; /* TextureParameterName */
(bind-val GL_TEXTURE_MAG_FILTER i32 #x2800)
(bind-val GL_TEXTURE_MIN_FILTER i32 #x2801)
(bind-val GL_TEXTURE_WRAP_S i32 #x2802)
(bind-val GL_TEXTURE_WRAP_T i32 #x2803)
;; /* TextureTarget */
(bind-val GL_PROXY_TEXTURE_1D i32 #x8063)
(bind-val GL_PROXY_TEXTURE_2D i32 #x8064)
;; /* TextureWrapMode */
(bind-val GL_REPEAT i32 #x2901)
;; /* PixelInternalFormat */
(bind-val GL_R3_G3_B2 i32 #x2A10)
(bind-val GL_RGB4 i32 #x804F)
(bind-val GL_RGB5 i32 #x8050)
(bind-val GL_RGB8 i32 #x8051)
(bind-val GL_RGB10 i32 #x8052)
(bind-val GL_RGB12 i32 #x8053)
(bind-val GL_RGB16 i32 #x8054)
(bind-val GL_RGBA2 i32 #x8055)
(bind-val GL_RGBA4 i32 #x8056)
(bind-val GL_RGB5_A1 i32 #x8057)
(bind-val GL_RGBA8 i32 #x8058)
(bind-val GL_RGB10_A2 i32 #x8059)
(bind-val GL_RGBA12 i32 #x805A)
(bind-val GL_RGBA16 i32 #x805B)
;; #endif

;; #ifndef GL_VERSION_1_2
(bind-val GL_UNSIGNED_BYTE_3_3_2 i32 #x8032)
(bind-val GL_UNSIGNED_SHORT_4_4_4_4 i32 #x8033)
(bind-val GL_UNSIGNED_SHORT_5_5_5_1 i32 #x8034)
(bind-val GL_UNSIGNED_INT_8_8_8_8 i32 #x8035)
(bind-val GL_UNSIGNED_INT_10_10_10_2 i32 #x8036)
(bind-val GL_TEXTURE_BINDING_3D i32 #x806A)
(bind-val GL_PACK_SKIP_IMAGES i32 #x806B)
(bind-val GL_PACK_IMAGE_HEIGHT i32 #x806C)
(bind-val GL_UNPACK_SKIP_IMAGES i32 #x806D)
(bind-val GL_UNPACK_IMAGE_HEIGHT i32 #x806E)
(bind-val GL_TEXTURE_3D i32 #x806F)
(bind-val GL_PROXY_TEXTURE_3D i32 #x8070)
(bind-val GL_TEXTURE_DEPTH i32 #x8071)
(bind-val GL_TEXTURE_WRAP_R i32 #x8072)
(bind-val GL_MAX_3D_TEXTURE_SIZE i32 #x8073)
(bind-val GL_UNSIGNED_BYTE_2_3_3_REV i32 #x8362)
(bind-val GL_UNSIGNED_SHORT_5_6_5 i32 #x8363)
(bind-val GL_UNSIGNED_SHORT_5_6_5_REV i32 #x8364)
(bind-val GL_UNSIGNED_SHORT_4_4_4_4_REV i32 #x8365)
(bind-val GL_UNSIGNED_SHORT_1_5_5_5_REV i32 #x8366)
(bind-val GL_UNSIGNED_INT_8_8_8_8_REV i32 #x8367)
(bind-val GL_UNSIGNED_INT_2_10_10_10_REV i32 #x8368)
(bind-val GL_BGR i32 #x80E0)
(bind-val GL_BGRA i32 #x80E1)
(bind-val GL_MAX_ELEMENTS_VERTICES i32 #x80E8)
(bind-val GL_MAX_ELEMENTS_INDICES i32 #x80E9)
(bind-val GL_CLAMP_TO_EDGE i32 #x812F)
(bind-val GL_TEXTURE_MIN_LOD i32 #x813A)
(bind-val GL_TEXTURE_MAX_LOD i32 #x813B)
(bind-val GL_TEXTURE_BASE_LEVEL i32 #x813C)
(bind-val GL_TEXTURE_MAX_LEVEL i32 #x813D)
(bind-val GL_SMOOTH_POINT_SIZE_RANGE i32 #x0B12)
(bind-val GL_SMOOTH_POINT_SIZE_GRANULARITY i32 #x0B13)
(bind-val GL_SMOOTH_LINE_WIDTH_RANGE i32 #x0B22)
(bind-val GL_SMOOTH_LINE_WIDTH_GRANULARITY i32 #x0B23)
(bind-val GL_ALIASED_LINE_WIDTH_RANGE i32 #x846E)
;; #endif

;; #ifndef GL_ARB_imaging
(bind-val GL_CONSTANT_COLOR i32 #x8001)
(bind-val GL_ONE_MINUS_CONSTANT_COLOR i32 #x8002)
(bind-val GL_CONSTANT_ALPHA i32 #x8003)
(bind-val GL_ONE_MINUS_CONSTANT_ALPHA i32 #x8004)
(bind-val GL_BLEND_COLOR i32 #x8005)
(bind-val GL_FUNC_ADD i32 #x8006)
(bind-val GL_MIN i32 #x8007)
(bind-val GL_MAX i32 #x8008)
(bind-val GL_BLEND_EQUATION i32 #x8009)
(bind-val GL_FUNC_SUBTRACT i32 #x800A)
(bind-val GL_FUNC_REVERSE_SUBTRACT i32 #x800B)
;; #endif

;; #ifndef GL_VERSION_1_3
(bind-val GL_TEXTURE0 i32 #x84C0)
(bind-val GL_TEXTURE1 i32 #x84C1)
(bind-val GL_TEXTURE2 i32 #x84C2)
(bind-val GL_TEXTURE3 i32 #x84C3)
(bind-val GL_TEXTURE4 i32 #x84C4)
(bind-val GL_TEXTURE5 i32 #x84C5)
(bind-val GL_TEXTURE6 i32 #x84C6)
(bind-val GL_TEXTURE7 i32 #x84C7)
(bind-val GL_TEXTURE8 i32 #x84C8)
(bind-val GL_TEXTURE9 i32 #x84C9)
(bind-val GL_TEXTURE10 i32 #x84CA)
(bind-val GL_TEXTURE11 i32 #x84CB)
(bind-val GL_TEXTURE12 i32 #x84CC)
(bind-val GL_TEXTURE13 i32 #x84CD)
(bind-val GL_TEXTURE14 i32 #x84CE)
(bind-val GL_TEXTURE15 i32 #x84CF)
(bind-val GL_TEXTURE16 i32 #x84D0)
(bind-val GL_TEXTURE17 i32 #x84D1)
(bind-val GL_TEXTURE18 i32 #x84D2)
(bind-val GL_TEXTURE19 i32 #x84D3)
(bind-val GL_TEXTURE20 i32 #x84D4)
(bind-val GL_TEXTURE21 i32 #x84D5)
(bind-val GL_TEXTURE22 i32 #x84D6)
(bind-val GL_TEXTURE23 i32 #x84D7)
(bind-val GL_TEXTURE24 i32 #x84D8)
(bind-val GL_TEXTURE25 i32 #x84D9)
(bind-val GL_TEXTURE26 i32 #x84DA)
(bind-val GL_TEXTURE27 i32 #x84DB)
(bind-val GL_TEXTURE28 i32 #x84DC)
(bind-val GL_TEXTURE29 i32 #x84DD)
(bind-val GL_TEXTURE30 i32 #x84DE)
(bind-val GL_TEXTURE31 i32 #x84DF)
(bind-val GL_ACTIVE_TEXTURE i32 #x84E0)
(bind-val GL_MULTISAMPLE i32 #x809D)
(bind-val GL_SAMPLE_ALPHA_TO_COVERAGE i32 #x809E)
(bind-val GL_SAMPLE_ALPHA_TO_ONE i32 #x809F)
(bind-val GL_SAMPLE_COVERAGE i32 #x80A0)
(bind-val GL_SAMPLE_BUFFERS i32 #x80A8)
(bind-val GL_SAMPLES i32 #x80A9)
(bind-val GL_SAMPLE_COVERAGE_VALUE i32 #x80AA)
(bind-val GL_SAMPLE_COVERAGE_INVERT i32 #x80AB)
(bind-val GL_TEXTURE_CUBE_MAP i32 #x8513)
(bind-val GL_TEXTURE_BINDING_CUBE_MAP i32 #x8514)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_X i32 #x8515)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_X i32 #x8516)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_Y i32 #x8517)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_Y i32 #x8518)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_Z i32 #x8519)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_Z i32 #x851A)
(bind-val GL_PROXY_TEXTURE_CUBE_MAP i32 #x851B)
(bind-val GL_MAX_CUBE_MAP_TEXTURE_SIZE i32 #x851C)
(bind-val GL_COMPRESSED_RGB i32 #x84ED)
(bind-val GL_COMPRESSED_RGBA i32 #x84EE)
(bind-val GL_TEXTURE_COMPRESSION_HINT i32 #x84EF)
(bind-val GL_TEXTURE_COMPRESSED_IMAGE_SIZE i32 #x86A0)
(bind-val GL_TEXTURE_COMPRESSED i32 #x86A1)
(bind-val GL_NUM_COMPRESSED_TEXTURE_FORMATS i32 #x86A2)
(bind-val GL_COMPRESSED_TEXTURE_FORMATS i32 #x86A3)
(bind-val GL_CLAMP_TO_BORDER i32 #x812D)
;; #endif

;; #ifndef GL_VERSION_1_4
(bind-val GL_BLEND_DST_RGB i32 #x80C8)
(bind-val GL_BLEND_SRC_RGB i32 #x80C9)
(bind-val GL_BLEND_DST_ALPHA i32 #x80CA)
(bind-val GL_BLEND_SRC_ALPHA i32 #x80CB)
(bind-val GL_POINT_FADE_THRESHOLD_SIZE i32 #x8128)
(bind-val GL_DEPTH_COMPONENT16 i32 #x81A5)
(bind-val GL_DEPTH_COMPONENT24 i32 #x81A6)
(bind-val GL_DEPTH_COMPONENT32 i32 #x81A7)
(bind-val GL_MIRRORED_REPEAT i32 #x8370)
(bind-val GL_MAX_TEXTURE_LOD_BIAS i32 #x84FD)
(bind-val GL_TEXTURE_LOD_BIAS i32 #x8501)
(bind-val GL_INCR_WRAP i32 #x8507)
(bind-val GL_DECR_WRAP i32 #x8508)
(bind-val GL_TEXTURE_DEPTH_SIZE i32 #x884A)
(bind-val GL_TEXTURE_COMPARE_MODE i32 #x884C)
(bind-val GL_TEXTURE_COMPARE_FUNC i32 #x884D)
;; #endif

;; #ifndef GL_VERSION_1_5
(bind-val GL_BUFFER_SIZE i32 #x8764)
(bind-val GL_BUFFER_USAGE i32 #x8765)
(bind-val GL_QUERY_COUNTER_BITS i32 #x8864)
(bind-val GL_CURRENT_QUERY i32 #x8865)
(bind-val GL_QUERY_RESULT i32 #x8866)
(bind-val GL_QUERY_RESULT_AVAILABLE i32 #x8867)
(bind-val GL_ARRAY_BUFFER i32 #x8892)
(bind-val GL_ELEMENT_ARRAY_BUFFER i32 #x8893)
(bind-val GL_ARRAY_BUFFER_BINDING i32 #x8894)
(bind-val GL_ELEMENT_ARRAY_BUFFER_BINDING i32 #x8895)
(bind-val GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING i32 #x889F)
(bind-val GL_READ_ONLY i32 #x88B8)
(bind-val GL_WRITE_ONLY i32 #x88B9)
(bind-val GL_READ_WRITE i32 #x88BA)
(bind-val GL_BUFFER_ACCESS i32 #x88BB)
(bind-val GL_BUFFER_MAPPED i32 #x88BC)
(bind-val GL_BUFFER_MAP_POINTER i32 #x88BD)
(bind-val GL_STREAM_DRAW i32 #x88E0)
(bind-val GL_STREAM_READ i32 #x88E1)
(bind-val GL_STREAM_COPY i32 #x88E2)
(bind-val GL_STATIC_DRAW i32 #x88E4)
(bind-val GL_STATIC_READ i32 #x88E5)
(bind-val GL_STATIC_COPY i32 #x88E6)
(bind-val GL_DYNAMIC_DRAW i32 #x88E8)
(bind-val GL_DYNAMIC_READ i32 #x88E9)
(bind-val GL_DYNAMIC_COPY i32 #x88EA)
(bind-val GL_SAMPLES_PASSED i32 #x8914)
;; #endif

;; #ifndef GL_VERSION_2_0
(bind-val GL_BLEND_EQUATION_RGB i32 #x8009)
(bind-val GL_VERTEX_ATTRIB_ARRAY_ENABLED i32 #x8622)
(bind-val GL_VERTEX_ATTRIB_ARRAY_SIZE i32 #x8623)
(bind-val GL_VERTEX_ATTRIB_ARRAY_STRIDE i32 #x8624)
(bind-val GL_VERTEX_ATTRIB_ARRAY_TYPE i32 #x8625)
(bind-val GL_CURRENT_VERTEX_ATTRIB i32 #x8626)
(bind-val GL_VERTEX_PROGRAM_POINT_SIZE i32 #x8642)
(bind-val GL_VERTEX_ATTRIB_ARRAY_POINTER i32 #x8645)
(bind-val GL_STENCIL_BACK_FUNC i32 #x8800)
(bind-val GL_STENCIL_BACK_FAIL i32 #x8801)
(bind-val GL_STENCIL_BACK_PASS_DEPTH_FAIL i32 #x8802)
(bind-val GL_STENCIL_BACK_PASS_DEPTH_PASS i32 #x8803)
(bind-val GL_MAX_DRAW_BUFFERS i32 #x8824)
(bind-val GL_DRAW_BUFFER0 i32 #x8825)
(bind-val GL_DRAW_BUFFER1 i32 #x8826)
(bind-val GL_DRAW_BUFFER2 i32 #x8827)
(bind-val GL_DRAW_BUFFER3 i32 #x8828)
(bind-val GL_DRAW_BUFFER4 i32 #x8829)
(bind-val GL_DRAW_BUFFER5 i32 #x882A)
(bind-val GL_DRAW_BUFFER6 i32 #x882B)
(bind-val GL_DRAW_BUFFER7 i32 #x882C)
(bind-val GL_DRAW_BUFFER8 i32 #x882D)
(bind-val GL_DRAW_BUFFER9 i32 #x882E)
(bind-val GL_DRAW_BUFFER10 i32 #x882F)
(bind-val GL_DRAW_BUFFER11 i32 #x8830)
(bind-val GL_DRAW_BUFFER12 i32 #x8831)
(bind-val GL_DRAW_BUFFER13 i32 #x8832)
(bind-val GL_DRAW_BUFFER14 i32 #x8833)
(bind-val GL_DRAW_BUFFER15 i32 #x8834)
(bind-val GL_BLEND_EQUATION_ALPHA i32 #x883D)
(bind-val GL_MAX_VERTEX_ATTRIBS i32 #x8869)
(bind-val GL_VERTEX_ATTRIB_ARRAY_NORMALIZED i32 #x886A)
(bind-val GL_MAX_TEXTURE_IMAGE_UNITS i32 #x8872)
(bind-val GL_FRAGMENT_SHADER i32 #x8B30)
(bind-val GL_VERTEX_SHADER i32 #x8B31)
(bind-val GL_MAX_FRAGMENT_UNIFORM_COMPONENTS i32 #x8B49)
(bind-val GL_MAX_VERTEX_UNIFORM_COMPONENTS i32 #x8B4A)
(bind-val GL_MAX_VARYING_FLOATS i32 #x8B4B)
(bind-val GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS i32 #x8B4C)
(bind-val GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS i32 #x8B4D)
(bind-val GL_SHADER_TYPE i32 #x8B4F)
(bind-val GL_FLOAT_VEC2 i32 #x8B50)
(bind-val GL_FLOAT_VEC3 i32 #x8B51)
(bind-val GL_FLOAT_VEC4 i32 #x8B52)
(bind-val GL_INT_VEC2 i32 #x8B53)
(bind-val GL_INT_VEC3 i32 #x8B54)
(bind-val GL_INT_VEC4 i32 #x8B55)
(bind-val GL_BOOL i32 #x8B56)
(bind-val GL_BOOL_VEC2 i32 #x8B57)
(bind-val GL_BOOL_VEC3 i32 #x8B58)
(bind-val GL_BOOL_VEC4 i32 #x8B59)
(bind-val GL_FLOAT_MAT2 i32 #x8B5A)
(bind-val GL_FLOAT_MAT3 i32 #x8B5B)
(bind-val GL_FLOAT_MAT4 i32 #x8B5C)
(bind-val GL_SAMPLER_1D i32 #x8B5D)
(bind-val GL_SAMPLER_2D i32 #x8B5E)
(bind-val GL_SAMPLER_3D i32 #x8B5F)
(bind-val GL_SAMPLER_CUBE i32 #x8B60)
(bind-val GL_SAMPLER_1D_SHADOW i32 #x8B61)
(bind-val GL_SAMPLER_2D_SHADOW i32 #x8B62)
(bind-val GL_DELETE_STATUS i32 #x8B80)
(bind-val GL_COMPILE_STATUS i32 #x8B81)
(bind-val GL_LINK_STATUS i32 #x8B82)
(bind-val GL_VALIDATE_STATUS i32 #x8B83)
(bind-val GL_INFO_LOG_LENGTH i32 #x8B84)
(bind-val GL_ATTACHED_SHADERS i32 #x8B85)
(bind-val GL_ACTIVE_UNIFORMS i32 #x8B86)
(bind-val GL_ACTIVE_UNIFORM_MAX_LENGTH i32 #x8B87)
(bind-val GL_SHADER_SOURCE_LENGTH i32 #x8B88)
(bind-val GL_ACTIVE_ATTRIBUTES i32 #x8B89)
(bind-val GL_ACTIVE_ATTRIBUTE_MAX_LENGTH i32 #x8B8A)
(bind-val GL_FRAGMENT_SHADER_DERIVATIVE_HINT i32 #x8B8B)
(bind-val GL_SHADING_LANGUAGE_VERSION i32 #x8B8C)
(bind-val GL_CURRENT_PROGRAM i32 #x8B8D)
(bind-val GL_POINT_SPRITE_COORD_ORIGIN i32 #x8CA0)
(bind-val GL_LOWER_LEFT i32 #x8CA1)
(bind-val GL_UPPER_LEFT i32 #x8CA2)
(bind-val GL_STENCIL_BACK_REF i32 #x8CA3)
(bind-val GL_STENCIL_BACK_VALUE_MASK i32 #x8CA4)
(bind-val GL_STENCIL_BACK_WRITEMASK i32 #x8CA5)
;; #endif

;; #ifndef GL_VERSION_2_1
(bind-val GL_PIXEL_PACK_BUFFER i32 #x88EB)
(bind-val GL_PIXEL_UNPACK_BUFFER i32 #x88EC)
(bind-val GL_PIXEL_PACK_BUFFER_BINDING i32 #x88ED)
(bind-val GL_PIXEL_UNPACK_BUFFER_BINDING i32 #x88EF)
(bind-val GL_FLOAT_MAT2x3 i32 #x8B65)
(bind-val GL_FLOAT_MAT2x4 i32 #x8B66)
(bind-val GL_FLOAT_MAT3x2 i32 #x8B67)
(bind-val GL_FLOAT_MAT3x4 i32 #x8B68)
(bind-val GL_FLOAT_MAT4x2 i32 #x8B69)
(bind-val GL_FLOAT_MAT4x3 i32 #x8B6A)
(bind-val GL_SRGB i32 #x8C40)
(bind-val GL_SRGB8 i32 #x8C41)
(bind-val GL_SRGB_ALPHA i32 #x8C42)
(bind-val GL_SRGB8_ALPHA8 i32 #x8C43)
(bind-val GL_COMPRESSED_SRGB i32 #x8C48)
(bind-val GL_COMPRESSED_SRGB_ALPHA i32 #x8C49)
;; #endif

;; #ifndef GL_VERSION_3_0
(bind-val GL_COMPARE_REF_TO_TEXTURE i32 #x884E)
(bind-val GL_CLIP_DISTANCE0 i32 #x3000)
(bind-val GL_CLIP_DISTANCE1 i32 #x3001)
(bind-val GL_CLIP_DISTANCE2 i32 #x3002)
(bind-val GL_CLIP_DISTANCE3 i32 #x3003)
(bind-val GL_CLIP_DISTANCE4 i32 #x3004)
(bind-val GL_CLIP_DISTANCE5 i32 #x3005)
(bind-val GL_CLIP_DISTANCE6 i32 #x3006)
(bind-val GL_CLIP_DISTANCE7 i32 #x3007)
(bind-val GL_MAX_CLIP_DISTANCES i32 #x0D32)
(bind-val GL_MAJOR_VERSION i32 #x821B)
(bind-val GL_MINOR_VERSION i32 #x821C)
(bind-val GL_NUM_EXTENSIONS i32 #x821D)
(bind-val GL_CONTEXT_FLAGS i32 #x821E)
(bind-val GL_COMPRESSED_RED i32 #x8225)
(bind-val GL_COMPRESSED_RG i32 #x8226)
(bind-val GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT i32 #x0001)
(bind-val GL_RGBA32F i32 #x8814)
(bind-val GL_RGB32F i32 #x8815)
(bind-val GL_RGBA16F i32 #x881A)
(bind-val GL_RGB16F i32 #x881B)
(bind-val GL_VERTEX_ATTRIB_ARRAY_INTEGER i32 #x88FD)
(bind-val GL_MAX_ARRAY_TEXTURE_LAYERS i32 #x88FF)
(bind-val GL_MIN_PROGRAM_TEXEL_OFFSET i32 #x8904)
(bind-val GL_MAX_PROGRAM_TEXEL_OFFSET i32 #x8905)
(bind-val GL_CLAMP_READ_COLOR i32 #x891C)
(bind-val GL_FIXED_ONLY i32 #x891D)
(bind-val GL_MAX_VARYING_COMPONENTS i32 #x8B4B)
(bind-val GL_TEXTURE_1D_ARRAY i32 #x8C18)
(bind-val GL_PROXY_TEXTURE_1D_ARRAY i32 #x8C19)
(bind-val GL_TEXTURE_2D_ARRAY i32 #x8C1A)
(bind-val GL_PROXY_TEXTURE_2D_ARRAY i32 #x8C1B)
(bind-val GL_TEXTURE_BINDING_1D_ARRAY i32 #x8C1C)
(bind-val GL_TEXTURE_BINDING_2D_ARRAY i32 #x8C1D)
(bind-val GL_R11F_G11F_B10F i32 #x8C3A)
(bind-val GL_UNSIGNED_INT_10F_11F_11F_REV i32 #x8C3B)
(bind-val GL_RGB9_E5 i32 #x8C3D)
(bind-val GL_UNSIGNED_INT_5_9_9_9_REV i32 #x8C3E)
(bind-val GL_TEXTURE_SHARED_SIZE i32 #x8C3F)
(bind-val GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH i32 #x8C76)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_MODE i32 #x8C7F)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS i32 #x8C80)
(bind-val GL_TRANSFORM_FEEDBACK_VARYINGS i32 #x8C83)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_START i32 #x8C84)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_SIZE i32 #x8C85)
(bind-val GL_PRIMITIVES_GENERATED i32 #x8C87)
(bind-val GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN i32 #x8C88)
(bind-val GL_RASTERIZER_DISCARD i32 #x8C89)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS i32 #x8C8A)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS i32 #x8C8B)
(bind-val GL_INTERLEAVED_ATTRIBS i32 #x8C8C)
(bind-val GL_SEPARATE_ATTRIBS i32 #x8C8D)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER i32 #x8C8E)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_BINDING i32 #x8C8F)
(bind-val GL_RGBA32UI i32 #x8D70)
(bind-val GL_RGB32UI i32 #x8D71)
(bind-val GL_RGBA16UI i32 #x8D76)
(bind-val GL_RGB16UI i32 #x8D77)
(bind-val GL_RGBA8UI i32 #x8D7C)
(bind-val GL_RGB8UI i32 #x8D7D)
(bind-val GL_RGBA32I i32 #x8D82)
(bind-val GL_RGB32I i32 #x8D83)
(bind-val GL_RGBA16I i32 #x8D88)
(bind-val GL_RGB16I i32 #x8D89)
(bind-val GL_RGBA8I i32 #x8D8E)
(bind-val GL_RGB8I i32 #x8D8F)
(bind-val GL_RED_INTEGER i32 #x8D94)
(bind-val GL_GREEN_INTEGER i32 #x8D95)
(bind-val GL_BLUE_INTEGER i32 #x8D96)
(bind-val GL_RGB_INTEGER i32 #x8D98)
(bind-val GL_RGBA_INTEGER i32 #x8D99)
(bind-val GL_BGR_INTEGER i32 #x8D9A)
(bind-val GL_BGRA_INTEGER i32 #x8D9B)
(bind-val GL_SAMPLER_1D_ARRAY i32 #x8DC0)
(bind-val GL_SAMPLER_2D_ARRAY i32 #x8DC1)
(bind-val GL_SAMPLER_1D_ARRAY_SHADOW i32 #x8DC3)
(bind-val GL_SAMPLER_2D_ARRAY_SHADOW i32 #x8DC4)
(bind-val GL_SAMPLER_CUBE_SHADOW i32 #x8DC5)
(bind-val GL_UNSIGNED_INT_VEC2 i32 #x8DC6)
(bind-val GL_UNSIGNED_INT_VEC3 i32 #x8DC7)
(bind-val GL_UNSIGNED_INT_VEC4 i32 #x8DC8)
(bind-val GL_INT_SAMPLER_1D i32 #x8DC9)
(bind-val GL_INT_SAMPLER_2D i32 #x8DCA)
(bind-val GL_INT_SAMPLER_3D i32 #x8DCB)
(bind-val GL_INT_SAMPLER_CUBE i32 #x8DCC)
(bind-val GL_INT_SAMPLER_1D_ARRAY i32 #x8DCE)
(bind-val GL_INT_SAMPLER_2D_ARRAY i32 #x8DCF)
(bind-val GL_UNSIGNED_INT_SAMPLER_1D i32 #x8DD1)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D i32 #x8DD2)
(bind-val GL_UNSIGNED_INT_SAMPLER_3D i32 #x8DD3)
(bind-val GL_UNSIGNED_INT_SAMPLER_CUBE i32 #x8DD4)
(bind-val GL_UNSIGNED_INT_SAMPLER_1D_ARRAY i32 #x8DD6)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_ARRAY i32 #x8DD7)
(bind-val GL_QUERY_WAIT i32 #x8E13)
(bind-val GL_QUERY_NO_WAIT i32 #x8E14)
(bind-val GL_QUERY_BY_REGION_WAIT i32 #x8E15)
(bind-val GL_QUERY_BY_REGION_NO_WAIT i32 #x8E16)
(bind-val GL_BUFFER_ACCESS_FLAGS i32 #x911F)
(bind-val GL_BUFFER_MAP_LENGTH i32 #x9120)
(bind-val GL_BUFFER_MAP_OFFSET i32 #x9121)
;; /* Reuse tokens from ARB_depth_buffer_float */
;; /* reuse GL_DEPTH_COMPONENT32F */
;; /* reuse GL_DEPTH32F_STENCIL8 */
;; /* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
;; /* Reuse tokens from ARB_framebuffer_object */
;; /* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
;; /* reuse GL_FRAMEBUFFER_DEFAULT */
;; /* reuse GL_FRAMEBUFFER_UNDEFINED */
;; /* reuse GL_DEPTH_STENCIL_ATTACHMENT */
;; /* reuse GL_MAX_RENDERBUFFER_SIZE */
;; /* reuse GL_DEPTH_STENCIL */
;; /* reuse GL_UNSIGNED_INT_24_8 */
;; /* reuse GL_DEPTH24_STENCIL8 */
;; /* reuse GL_TEXTURE_STENCIL_SIZE */
;; /* reuse GL_TEXTURE_RED_TYPE */
;; /* reuse GL_TEXTURE_GREEN_TYPE */
;; /* reuse GL_TEXTURE_BLUE_TYPE */
;; /* reuse GL_TEXTURE_ALPHA_TYPE */
;; /* reuse GL_TEXTURE_DEPTH_TYPE */
;; /* reuse GL_UNSIGNED_NORMALIZED */
;; /* reuse GL_FRAMEBUFFER_BINDING */
;; /* reuse GL_DRAW_FRAMEBUFFER_BINDING */
;; /* reuse GL_RENDERBUFFER_BINDING */
;; /* reuse GL_READ_FRAMEBUFFER */
;; /* reuse GL_DRAW_FRAMEBUFFER */
;; /* reuse GL_READ_FRAMEBUFFER_BINDING */
;; /* reuse GL_RENDERBUFFER_SAMPLES */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
;; /* reuse GL_FRAMEBUFFER_COMPLETE */
;; /* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
;; /* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
;; /* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
;; /* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
;; /* reuse GL_FRAMEBUFFER_UNSUPPORTED */
;; /* reuse GL_MAX_COLOR_ATTACHMENTS */
;; /* reuse GL_COLOR_ATTACHMENT0 */
;; /* reuse GL_COLOR_ATTACHMENT1 */
;; /* reuse GL_COLOR_ATTACHMENT2 */
;; /* reuse GL_COLOR_ATTACHMENT3 */
;; /* reuse GL_COLOR_ATTACHMENT4 */
;; /* reuse GL_COLOR_ATTACHMENT5 */
;; /* reuse GL_COLOR_ATTACHMENT6 */
;; /* reuse GL_COLOR_ATTACHMENT7 */
;; /* reuse GL_COLOR_ATTACHMENT8 */
;; /* reuse GL_COLOR_ATTACHMENT9 */
;; /* reuse GL_COLOR_ATTACHMENT10 */
;; /* reuse GL_COLOR_ATTACHMENT11 */
;; /* reuse GL_COLOR_ATTACHMENT12 */
;; /* reuse GL_COLOR_ATTACHMENT13 */
;; /* reuse GL_COLOR_ATTACHMENT14 */
;; /* reuse GL_COLOR_ATTACHMENT15 */
;; /* reuse GL_DEPTH_ATTACHMENT */
;; /* reuse GL_STENCIL_ATTACHMENT */
;; /* reuse GL_FRAMEBUFFER */
;; /* reuse GL_RENDERBUFFER */
;; /* reuse GL_RENDERBUFFER_WIDTH */
;; /* reuse GL_RENDERBUFFER_HEIGHT */
;; /* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
;; /* reuse GL_STENCIL_INDEX1 */
;; /* reuse GL_STENCIL_INDEX4 */
;; /* reuse GL_STENCIL_INDEX8 */
;; /* reuse GL_STENCIL_INDEX16 */
;; /* reuse GL_RENDERBUFFER_RED_SIZE */
;; /* reuse GL_RENDERBUFFER_GREEN_SIZE */
;; /* reuse GL_RENDERBUFFER_BLUE_SIZE */
;; /* reuse GL_RENDERBUFFER_ALPHA_SIZE */
;; /* reuse GL_RENDERBUFFER_DEPTH_SIZE */
;; /* reuse GL_RENDERBUFFER_STENCIL_SIZE */
;; /* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
;; /* reuse GL_MAX_SAMPLES */
;; /* Reuse tokens from ARB_framebuffer_sRGB */
;; /* reuse GL_FRAMEBUFFER_SRGB */
;; /* Reuse tokens from ARB_half_float_vertex */
;; /* reuse GL_HALF_FLOAT */
;; /* Reuse tokens from ARB_map_buffer_range */
;; /* reuse GL_MAP_READ_BIT */
;; /* reuse GL_MAP_WRITE_BIT */
;; /* reuse GL_MAP_INVALIDATE_RANGE_BIT */
;; /* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
;; /* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
;; /* reuse GL_MAP_UNSYNCHRONIZED_BIT */
;; /* Reuse tokens from ARB_texture_compression_rgtc */
;; /* reuse GL_COMPRESSED_RED_RGTC1 */
;; /* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
;; /* reuse GL_COMPRESSED_RG_RGTC2 */
;; /* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
;; /* Reuse tokens from ARB_texture_rg */
;; /* reuse GL_RG */
;; /* reuse GL_RG_INTEGER */
;; /* reuse GL_R8 */
;; /* reuse GL_R16 */
;; /* reuse GL_RG8 */
;; /* reuse GL_RG16 */
;; /* reuse GL_R16F */
;; /* reuse GL_R32F */
;; /* reuse GL_RG16F */
;; /* reuse GL_RG32F */
;; /* reuse GL_R8I */
;; /* reuse GL_R8UI */
;; /* reuse GL_R16I */
;; /* reuse GL_R16UI */
;; /* reuse GL_R32I */
;; /* reuse GL_R32UI */
;; /* reuse GL_RG8I */
;; /* reuse GL_RG8UI */
;; /* reuse GL_RG16I */
;; /* reuse GL_RG16UI */
;; /* reuse GL_RG32I */
;; /* reuse GL_RG32UI */
;; /* Reuse tokens from ARB_vertex_array_object */
;; /* reuse GL_VERTEX_ARRAY_BINDING */
;; #endif

;; #ifndef GL_VERSION_3_1
(bind-val GL_SAMPLER_2D_RECT i32 #x8B63)
(bind-val GL_SAMPLER_2D_RECT_SHADOW i32 #x8B64)
(bind-val GL_SAMPLER_BUFFER i32 #x8DC2)
(bind-val GL_INT_SAMPLER_2D_RECT i32 #x8DCD)
(bind-val GL_INT_SAMPLER_BUFFER i32 #x8DD0)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_RECT i32 #x8DD5)
(bind-val GL_UNSIGNED_INT_SAMPLER_BUFFER i32 #x8DD8)
(bind-val GL_TEXTURE_BUFFER i32 #x8C2A)
(bind-val GL_MAX_TEXTURE_BUFFER_SIZE i32 #x8C2B)
(bind-val GL_TEXTURE_BINDING_BUFFER i32 #x8C2C)
(bind-val GL_TEXTURE_BUFFER_DATA_STORE_BINDING i32 #x8C2D)
(bind-val GL_TEXTURE_RECTANGLE i32 #x84F5)
(bind-val GL_TEXTURE_BINDING_RECTANGLE i32 #x84F6)
(bind-val GL_PROXY_TEXTURE_RECTANGLE i32 #x84F7)
(bind-val GL_MAX_RECTANGLE_TEXTURE_SIZE i32 #x84F8)
(bind-val GL_R8_SNORM i32 #x8F94)
(bind-val GL_RG8_SNORM i32 #x8F95)
(bind-val GL_RGB8_SNORM i32 #x8F96)
(bind-val GL_RGBA8_SNORM i32 #x8F97)
(bind-val GL_R16_SNORM i32 #x8F98)
(bind-val GL_RG16_SNORM i32 #x8F99)
(bind-val GL_RGB16_SNORM i32 #x8F9A)
(bind-val GL_RGBA16_SNORM i32 #x8F9B)
(bind-val GL_SIGNED_NORMALIZED i32 #x8F9C)
(bind-val GL_PRIMITIVE_RESTART i32 #x8F9D)
(bind-val GL_PRIMITIVE_RESTART_INDEX i32 #x8F9E)
;; /* Reuse tokens from ARB_copy_buffer */
;; /* reuse GL_COPY_READ_BUFFER */
;; /* reuse GL_COPY_WRITE_BUFFER */
;; /* Reuse tokens from ARB_draw_instanced (none) */
;; /* Reuse tokens from ARB_uniform_buffer_object */
;; /* reuse GL_UNIFORM_BUFFER */
;; /* reuse GL_UNIFORM_BUFFER_BINDING */
;; /* reuse GL_UNIFORM_BUFFER_START */
;; /* reuse GL_UNIFORM_BUFFER_SIZE */
;; /* reuse GL_MAX_VERTEX_UNIFORM_BLOCKS */
;; /* reuse GL_MAX_FRAGMENT_UNIFORM_BLOCKS */
;; /* reuse GL_MAX_COMBINED_UNIFORM_BLOCKS */
;; /* reuse GL_MAX_UNIFORM_BUFFER_BINDINGS */
;; /* reuse GL_MAX_UNIFORM_BLOCK_SIZE */
;; /* reuse GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS */
;; /* reuse GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS */
;; /* reuse GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT */
;; /* reuse GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */
;; /* reuse GL_ACTIVE_UNIFORM_BLOCKS */
;; /* reuse GL_UNIFORM_TYPE */
;; /* reuse GL_UNIFORM_SIZE */
;; /* reuse GL_UNIFORM_NAME_LENGTH */
;; /* reuse GL_UNIFORM_BLOCK_INDEX */
;; /* reuse GL_UNIFORM_OFFSET */
;; /* reuse GL_UNIFORM_ARRAY_STRIDE */
;; /* reuse GL_UNIFORM_MATRIX_STRIDE */
;; /* reuse GL_UNIFORM_IS_ROW_MAJOR */
;; /* reuse GL_UNIFORM_BLOCK_BINDING */
;; /* reuse GL_UNIFORM_BLOCK_DATA_SIZE */
;; /* reuse GL_UNIFORM_BLOCK_NAME_LENGTH */
;; /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS */
;; /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES */
;; /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER */
;; /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER */
;; /* reuse GL_INVALID_INDEX */
;; #endif

;; #ifndef GL_VERSION_3_2
(bind-val GL_CONTEXT_CORE_PROFILE_BIT i32 #x00000001)
(bind-val GL_CONTEXT_COMPATIBILITY_PROFILE_BIT i32 #x00000002)
(bind-val GL_LINES_ADJACENCY i32 #x000A)
(bind-val GL_LINE_STRIP_ADJACENCY i32 #x000B)
(bind-val GL_TRIANGLES_ADJACENCY i32 #x000C)
(bind-val GL_TRIANGLE_STRIP_ADJACENCY i32 #x000D)
(bind-val GL_PROGRAM_POINT_SIZE i32 #x8642)
(bind-val GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS i32 #x8C29)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_LAYERED i32 #x8DA7)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS i32 #x8DA8)
(bind-val GL_GEOMETRY_SHADER i32 #x8DD9)
(bind-val GL_GEOMETRY_VERTICES_OUT i32 #x8916)
(bind-val GL_GEOMETRY_INPUT_TYPE i32 #x8917)
(bind-val GL_GEOMETRY_OUTPUT_TYPE i32 #x8918)
(bind-val GL_MAX_GEOMETRY_UNIFORM_COMPONENTS i32 #x8DDF)
(bind-val GL_MAX_GEOMETRY_OUTPUT_VERTICES i32 #x8DE0)
(bind-val GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS i32 #x8DE1)
(bind-val GL_MAX_VERTEX_OUTPUT_COMPONENTS i32 #x9122)
(bind-val GL_MAX_GEOMETRY_INPUT_COMPONENTS i32 #x9123)
(bind-val GL_MAX_GEOMETRY_OUTPUT_COMPONENTS i32 #x9124)
(bind-val GL_MAX_FRAGMENT_INPUT_COMPONENTS i32 #x9125)
(bind-val GL_CONTEXT_PROFILE_MASK i32 #x9126)
;; /* reuse GL_MAX_VARYING_COMPONENTS */
;; /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
;; /* Reuse tokens from ARB_depth_clamp */
;; /* reuse GL_DEPTH_CLAMP */
;; /* Reuse tokens from ARB_draw_elements_base_vertex (none) */
;; /* Reuse tokens from ARB_fragment_coord_conventions (none) */
;; /* Reuse tokens from ARB_provoking_vertex */
;; /* reuse GL_FIRST_VERTEX_CONVENTION */
;; /* reuse GL_LAST_VERTEX_CONVENTION */
;; /* reuse GL_PROVOKING_VERTEX */
;; /* Reuse tokens from ARB_seamless_cube_map */
;; /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
;; /* Reuse tokens from ARB_sync */
;; /* reuse GL_MAX_SERVER_WAIT_TIMEOUT */
;; /* reuse GL_OBJECT_TYPE */
;; /* reuse GL_SYNC_CONDITION */
;; /* reuse GL_SYNC_STATUS */
;; /* reuse GL_SYNC_FLAGS */
;; /* reuse GL_SYNC_FENCE */
;; /* reuse GL_SYNC_GPU_COMMANDS_COMPLETE */
;; /* reuse GL_UNSIGNALED */
;; /* reuse GL_SIGNALED */
;; /* reuse GL_ALREADY_SIGNALED */
;; /* reuse GL_TIMEOUT_EXPIRED */
;; /* reuse GL_CONDITION_SATISFIED */
;; /* reuse GL_WAIT_FAILED */
;; /* reuse GL_TIMEOUT_IGNORED */
;; /* reuse GL_SYNC_FLUSH_COMMANDS_BIT */
;; /* reuse GL_TIMEOUT_IGNORED */
;; /* Reuse tokens from ARB_texture_multisample */
;; /* reuse GL_SAMPLE_POSITION */
;; /* reuse GL_SAMPLE_MASK */
;; /* reuse GL_SAMPLE_MASK_VALUE */
;; /* reuse GL_MAX_SAMPLE_MASK_WORDS */
;; /* reuse GL_TEXTURE_2D_MULTISAMPLE */
;; /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE */
;; /* reuse GL_TEXTURE_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE */
;; /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_TEXTURE_SAMPLES */
;; /* reuse GL_TEXTURE_FIXED_SAMPLE_LOCATIONS */
;; /* reuse GL_SAMPLER_2D_MULTISAMPLE */
;; /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE */
;; /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE */
;; /* reuse GL_SAMPLER_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
;; /* reuse GL_MAX_COLOR_TEXTURE_SAMPLES */
;; /* reuse GL_MAX_DEPTH_TEXTURE_SAMPLES */
;; /* reuse GL_MAX_INTEGER_SAMPLES */
;; /* Don't need to reuse tokens from ARB_vertex_array_bgra since they're already in 1.2 core */
;; #endif

;; #ifndef GL_VERSION_3_3
(bind-val GL_VERTEX_ATTRIB_ARRAY_DIVISOR i32 #x88FE)
;; /* Reuse tokens from ARB_blend_func_extended */
;; /* reuse GL_SRC1_COLOR */
;; /* reuse GL_SRC1_ALPHA */
;; /* reuse GL_ONE_MINUS_SRC1_COLOR */
;; /* reuse GL_ONE_MINUS_SRC1_ALPHA */
;; /* reuse GL_MAX_DUAL_SOURCE_DRAW_BUFFERS */
;; /* Reuse tokens from ARB_explicit_attrib_location (none) */
;; /* Reuse tokens from ARB_occlusion_query2 */
;; /* reuse GL_ANY_SAMPLES_PASSED */
;; /* Reuse tokens from ARB_sampler_objects */
;; /* reuse GL_SAMPLER_BINDING */
;; /* Reuse tokens from ARB_shader_bit_encoding (none) */
;; /* Reuse tokens from ARB_texture_rgb10_a2ui */
;; /* reuse GL_RGB10_A2UI */
;; /* Reuse tokens from ARB_texture_swizzle */
;; /* reuse GL_TEXTURE_SWIZZLE_R */
;; /* reuse GL_TEXTURE_SWIZZLE_G */
;; /* reuse GL_TEXTURE_SWIZZLE_B */
;; /* reuse GL_TEXTURE_SWIZZLE_A */
;; /* reuse GL_TEXTURE_SWIZZLE_RGBA */
;; /* Reuse tokens from ARB_timer_query */
;; /* reuse GL_TIME_ELAPSED */
;; /* reuse GL_TIMESTAMP */
;; /* Reuse tokens from ARB_vertex_type_2_10_10_10_rev */
;; /* reuse GL_INT_2_10_10_10_REV */
;; #endif

;; #ifndef GL_VERSION_4_0
(bind-val GL_SAMPLE_SHADING i32 #x8C36)
(bind-val GL_MIN_SAMPLE_SHADING_VALUE i32 #x8C37)
(bind-val GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET i32 #x8E5E)
(bind-val GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET i32 #x8E5F)
(bind-val GL_TEXTURE_CUBE_MAP_ARRAY i32 #x9009)
(bind-val GL_TEXTURE_BINDING_CUBE_MAP_ARRAY i32 #x900A)
(bind-val GL_PROXY_TEXTURE_CUBE_MAP_ARRAY i32 #x900B)
(bind-val GL_SAMPLER_CUBE_MAP_ARRAY i32 #x900C)
(bind-val GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW i32 #x900D)
(bind-val GL_INT_SAMPLER_CUBE_MAP_ARRAY i32 #x900E)
(bind-val GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY i32 #x900F)
;; /* Reuse tokens from ARB_texture_query_lod (none) */
;; /* Reuse tokens from ARB_draw_indirect */
;; /* reuse GL_DRAW_INDIRECT_BUFFER */
;; /* reuse GL_DRAW_INDIRECT_BUFFER_BINDING */
;; /* Reuse tokens from ARB_gpu_shader5 */
;; /* reuse GL_GEOMETRY_SHADER_INVOCATIONS */
;; /* reuse GL_MAX_GEOMETRY_SHADER_INVOCATIONS */
;; /* reuse GL_MIN_FRAGMENT_INTERPOLATION_OFFSET */
;; /* reuse GL_MAX_FRAGMENT_INTERPOLATION_OFFSET */
;; /* reuse GL_FRAGMENT_INTERPOLATION_OFFSET_BITS */
;; /* reuse GL_MAX_VERTEX_STREAMS */
;; /* Reuse tokens from ARB_gpu_shader_fp64 */
;; /* reuse GL_DOUBLE_VEC2 */
;; /* reuse GL_DOUBLE_VEC3 */
;; /* reuse GL_DOUBLE_VEC4 */
;; /* reuse GL_DOUBLE_MAT2 */
;; /* reuse GL_DOUBLE_MAT3 */
;; /* reuse GL_DOUBLE_MAT4 */
;; /* reuse GL_DOUBLE_MAT2x3 */
;; /* reuse GL_DOUBLE_MAT2x4 */
;; /* reuse GL_DOUBLE_MAT3x2 */
;; /* reuse GL_DOUBLE_MAT3x4 */
;; /* reuse GL_DOUBLE_MAT4x2 */
;; /* reuse GL_DOUBLE_MAT4x3 */
;; /* Reuse tokens from ARB_shader_subroutine */
;; /* reuse GL_ACTIVE_SUBROUTINES */
;; /* reuse GL_ACTIVE_SUBROUTINE_UNIFORMS */
;; /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS */
;; /* reuse GL_ACTIVE_SUBROUTINE_MAX_LENGTH */
;; /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH */
;; /* reuse GL_MAX_SUBROUTINES */
;; /* reuse GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS */
;; /* reuse GL_NUM_COMPATIBLE_SUBROUTINES */
;; /* reuse GL_COMPATIBLE_SUBROUTINES */
;; /* Reuse tokens from ARB_tessellation_shader */
;; /* reuse GL_PATCHES */
;; /* reuse GL_PATCH_VERTICES */
;; /* reuse GL_PATCH_DEFAULT_INNER_LEVEL */
;; /* reuse GL_PATCH_DEFAULT_OUTER_LEVEL */
;; /* reuse GL_TESS_CONTROL_OUTPUT_VERTICES */
;; /* reuse GL_TESS_GEN_MODE */
;; /* reuse GL_TESS_GEN_SPACING */
;; /* reuse GL_TESS_GEN_VERTEX_ORDER */
;; /* reuse GL_TESS_GEN_POINT_MODE */
;; /* reuse GL_ISOLINES */
;; /* reuse GL_FRACTIONAL_ODD */
;; /* reuse GL_FRACTIONAL_EVEN */
;; /* reuse GL_MAX_PATCH_VERTICES */
;; /* reuse GL_MAX_TESS_GEN_LEVEL */
;; /* reuse GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS */
;; /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS */
;; /* reuse GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS */
;; /* reuse GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS */
;; /* reuse GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS */
;; /* reuse GL_MAX_TESS_PATCH_COMPONENTS */
;; /* reuse GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS */
;; /* reuse GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS */
;; /* reuse GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS */
;; /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS */
;; /* reuse GL_MAX_TESS_CONTROL_INPUT_COMPONENTS */
;; /* reuse GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS */
;; /* reuse GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS */
;; /* reuse GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS */
;; /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER */
;; /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER */
;; /* reuse GL_TESS_EVALUATION_SHADER */
;; /* reuse GL_TESS_CONTROL_SHADER */
;; /* Reuse tokens from ARB_texture_buffer_object_rgb32 (none) */
;; /* Reuse tokens from ARB_transform_feedback2 */
;; /* reuse GL_TRANSFORM_FEEDBACK */
;; /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED */
;; /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE */
;; /* reuse GL_TRANSFORM_FEEDBACK_BINDING */
;; /* Reuse tokens from ARB_transform_feedback3 */
;; /* reuse GL_MAX_TRANSFORM_FEEDBACK_BUFFERS */
;; /* reuse GL_MAX_VERTEX_STREAMS */
;; #endif

;; #ifndef GL_VERSION_4_1
;; /* Reuse tokens from ARB_ES2_compatibility */
;; /* reuse GL_FIXED */
;; /* reuse GL_IMPLEMENTATION_COLOR_READ_TYPE */
;; /* reuse GL_IMPLEMENTATION_COLOR_READ_FORMAT */
;; /* reuse GL_LOW_FLOAT */
;; /* reuse GL_MEDIUM_FLOAT */
;; /* reuse GL_HIGH_FLOAT */
;; /* reuse GL_LOW_INT */
;; /* reuse GL_MEDIUM_INT */
;; /* reuse GL_HIGH_INT */
;; /* reuse GL_SHADER_COMPILER */
;; /* reuse GL_NUM_SHADER_BINARY_FORMATS */
;; /* reuse GL_MAX_VERTEX_UNIFORM_VECTORS */
;; /* reuse GL_MAX_VARYING_VECTORS */
;; /* reuse GL_MAX_FRAGMENT_UNIFORM_VECTORS */
;; /* reuse GL_RGB565 */
;; /* Reuse tokens from ARB_get_program_binary */
;; /* reuse GL_PROGRAM_BINARY_RETRIEVABLE_HINT */
;; /* reuse GL_PROGRAM_BINARY_LENGTH */
;; /* reuse GL_NUM_PROGRAM_BINARY_FORMATS */
;; /* reuse GL_PROGRAM_BINARY_FORMATS */
;; /* Reuse tokens from ARB_separate_shader_objects */
;; /* reuse GL_VERTEX_SHADER_BIT */
;; /* reuse GL_FRAGMENT_SHADER_BIT */
;; /* reuse GL_GEOMETRY_SHADER_BIT */
;; /* reuse GL_TESS_CONTROL_SHADER_BIT */
;; /* reuse GL_TESS_EVALUATION_SHADER_BIT */
;; /* reuse GL_ALL_SHADER_BITS */
;; /* reuse GL_PROGRAM_SEPARABLE */
;; /* reuse GL_ACTIVE_PROGRAM */
;; /* reuse GL_PROGRAM_PIPELINE_BINDING */
;; /* Reuse tokens from ARB_shader_precision (none) */
;; /* Reuse tokens from ARB_vertex_attrib_64bit - all are in GL 3.0 and 4.0 already */
;; /* Reuse tokens from ARB_viewport_array - some are in GL 1.1 and ARB_provoking_vertex already */
;; /* reuse GL_MAX_VIEWPORTS */
;; /* reuse GL_VIEWPORT_SUBPIXEL_BITS */
;; /* reuse GL_VIEWPORT_BOUNDS_RANGE */
;; /* reuse GL_LAYER_PROVOKING_VERTEX */
;; /* reuse GL_VIEWPORT_INDEX_PROVOKING_VERTEX */
;; /* reuse GL_UNDEFINED_VERTEX */
;; #endif

;; #ifndef GL_ARB_depth_buffer_float
(bind-val GL_DEPTH_COMPONENT32F i32 #x8CAC)
(bind-val GL_DEPTH32F_STENCIL8 i32 #x8CAD)
(bind-val GL_FLOAT_32_UNSIGNED_INT_24_8_REV i32 #x8DAD)
;; #endif

;; #ifndef GL_ARB_framebuffer_object
(bind-val GL_INVALID_FRAMEBUFFER_OPERATION i32 #x0506)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING i32 #x8210)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE i32 #x8211)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE i32 #x8212)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE i32 #x8213)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE i32 #x8214)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE i32 #x8215)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE i32 #x8216)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE i32 #x8217)
(bind-val GL_FRAMEBUFFER_DEFAULT i32 #x8218)
(bind-val GL_FRAMEBUFFER_UNDEFINED i32 #x8219)
(bind-val GL_DEPTH_STENCIL_ATTACHMENT i32 #x821A)
(bind-val GL_MAX_RENDERBUFFER_SIZE i32 #x84E8)
(bind-val GL_DEPTH_STENCIL i32 #x84F9)
(bind-val GL_UNSIGNED_INT_24_8 i32 #x84FA)
(bind-val GL_DEPTH24_STENCIL8 i32 #x88F0)
(bind-val GL_TEXTURE_STENCIL_SIZE i32 #x88F1)
(bind-val GL_TEXTURE_RED_TYPE i32 #x8C10)
(bind-val GL_TEXTURE_GREEN_TYPE i32 #x8C11)
(bind-val GL_TEXTURE_BLUE_TYPE i32 #x8C12)
(bind-val GL_TEXTURE_ALPHA_TYPE i32 #x8C13)
(bind-val GL_TEXTURE_DEPTH_TYPE i32 #x8C16)
(bind-val GL_UNSIGNED_NORMALIZED i32 #x8C17)
(bind-val GL_FRAMEBUFFER_BINDING i32 #x8CA6)
(bind-val GL_DRAW_FRAMEBUFFER_BINDING i32 #x8CA6) ;; GL_FRAMEBUFFER_BINDING
(bind-val GL_RENDERBUFFER_BINDING i32 #x8CA7)
(bind-val GL_READ_FRAMEBUFFER i32 #x8CA8)
(bind-val GL_DRAW_FRAMEBUFFER i32 #x8CA9)
(bind-val GL_READ_FRAMEBUFFER_BINDING i32 #x8CAA)
(bind-val GL_RENDERBUFFER_SAMPLES i32 #x8CAB)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE i32 #x8CD0)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME i32 #x8CD1)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL i32 #x8CD2)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE i32 #x8CD3)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER i32 #x8CD4)
(bind-val GL_FRAMEBUFFER_COMPLETE i32 #x8CD5)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT i32 #x8CD6)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT i32 #x8CD7)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER i32 #x8CDB)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER i32 #x8CDC)
(bind-val GL_FRAMEBUFFER_UNSUPPORTED i32 #x8CDD)
(bind-val GL_MAX_COLOR_ATTACHMENTS i32 #x8CDF)
(bind-val GL_COLOR_ATTACHMENT0 i32 #x8CE0)
(bind-val GL_COLOR_ATTACHMENT1 i32 #x8CE1)
(bind-val GL_COLOR_ATTACHMENT2 i32 #x8CE2)
(bind-val GL_COLOR_ATTACHMENT3 i32 #x8CE3)
(bind-val GL_COLOR_ATTACHMENT4 i32 #x8CE4)
(bind-val GL_COLOR_ATTACHMENT5 i32 #x8CE5)
(bind-val GL_COLOR_ATTACHMENT6 i32 #x8CE6)
(bind-val GL_COLOR_ATTACHMENT7 i32 #x8CE7)
(bind-val GL_COLOR_ATTACHMENT8 i32 #x8CE8)
(bind-val GL_COLOR_ATTACHMENT9 i32 #x8CE9)
(bind-val GL_COLOR_ATTACHMENT10 i32 #x8CEA)
(bind-val GL_COLOR_ATTACHMENT11 i32 #x8CEB)
(bind-val GL_COLOR_ATTACHMENT12 i32 #x8CEC)
(bind-val GL_COLOR_ATTACHMENT13 i32 #x8CED)
(bind-val GL_COLOR_ATTACHMENT14 i32 #x8CEE)
(bind-val GL_COLOR_ATTACHMENT15 i32 #x8CEF)
(bind-val GL_DEPTH_ATTACHMENT i32 #x8D00)
(bind-val GL_STENCIL_ATTACHMENT i32 #x8D20)
(bind-val GL_FRAMEBUFFER i32 #x8D40)
(bind-val GL_RENDERBUFFER i32 #x8D41)
(bind-val GL_RENDERBUFFER_WIDTH i32 #x8D42)
(bind-val GL_RENDERBUFFER_HEIGHT i32 #x8D43)
(bind-val GL_RENDERBUFFER_INTERNAL_FORMAT i32 #x8D44)
(bind-val GL_STENCIL_INDEX1 i32 #x8D46)
(bind-val GL_STENCIL_INDEX4 i32 #x8D47)
(bind-val GL_STENCIL_INDEX8 i32 #x8D48)
(bind-val GL_STENCIL_INDEX16 i32 #x8D49)
(bind-val GL_RENDERBUFFER_RED_SIZE i32 #x8D50)
(bind-val GL_RENDERBUFFER_GREEN_SIZE i32 #x8D51)
(bind-val GL_RENDERBUFFER_BLUE_SIZE i32 #x8D52)
(bind-val GL_RENDERBUFFER_ALPHA_SIZE i32 #x8D53)
(bind-val GL_RENDERBUFFER_DEPTH_SIZE i32 #x8D54)
(bind-val GL_RENDERBUFFER_STENCIL_SIZE i32 #x8D55)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE i32 #x8D56)
(bind-val GL_MAX_SAMPLES i32 #x8D57)
;; #endif

;; #ifndef GL_ARB_framebuffer_sRGB
(bind-val GL_FRAMEBUFFER_SRGB i32 #x8DB9)
;; #endif

;; #ifndef GL_ARB_half_float_vertex
(bind-val GL_HALF_FLOAT i32 #x140B)
;; #endif

;; #ifndef GL_ARB_map_buffer_range
(bind-val GL_MAP_READ_BIT i32 #x0001)
(bind-val GL_MAP_WRITE_BIT i32 #x0002)
(bind-val GL_MAP_INVALIDATE_RANGE_BIT i32 #x0004)
(bind-val GL_MAP_INVALIDATE_BUFFER_BIT i32 #x0008)
(bind-val GL_MAP_FLUSH_EXPLICIT_BIT i32 #x0010)
(bind-val GL_MAP_UNSYNCHRONIZED_BIT i32 #x0020)
;; #endif

;; #ifndef GL_ARB_texture_compression_rgtc
(bind-val GL_COMPRESSED_RED_RGTC1 i32 #x8DBB)
(bind-val GL_COMPRESSED_SIGNED_RED_RGTC1 i32 #x8DBC)
(bind-val GL_COMPRESSED_RG_RGTC2 i32 #x8DBD)
(bind-val GL_COMPRESSED_SIGNED_RG_RGTC2 i32 #x8DBE)
;; #endif

;; #ifndef GL_ARB_texture_rg
(bind-val GL_RG i32 #x8227)
(bind-val GL_RG_INTEGER i32 #x8228)
(bind-val GL_R8 i32 #x8229)
(bind-val GL_R16 i32 #x822A)
(bind-val GL_RG8 i32 #x822B)
(bind-val GL_RG16 i32 #x822C)
(bind-val GL_R16F i32 #x822D)
(bind-val GL_R32F i32 #x822E)
(bind-val GL_RG16F i32 #x822F)
(bind-val GL_RG32F i32 #x8230)
(bind-val GL_R8I i32 #x8231)
(bind-val GL_R8UI i32 #x8232)
(bind-val GL_R16I i32 #x8233)
(bind-val GL_R16UI i32 #x8234)
(bind-val GL_R32I i32 #x8235)
(bind-val GL_R32UI i32 #x8236)
(bind-val GL_RG8I i32 #x8237)
(bind-val GL_RG8UI i32 #x8238)
(bind-val GL_RG16I i32 #x8239)
(bind-val GL_RG16UI i32 #x823A)
(bind-val GL_RG32I i32 #x823B)
(bind-val GL_RG32UI i32 #x823C)
;; #endif

;; #ifndef GL_ARB_vertex_array_object
(bind-val GL_VERTEX_ARRAY_BINDING i32 #x85B5)
;; #endif

;; #ifndef GL_ARB_uniform_buffer_object
(bind-val GL_UNIFORM_BUFFER i32 #x8A11)
(bind-val GL_UNIFORM_BUFFER_BINDING i32 #x8A28)
(bind-val GL_UNIFORM_BUFFER_START i32 #x8A29)
(bind-val GL_UNIFORM_BUFFER_SIZE i32 #x8A2A)
(bind-val GL_MAX_VERTEX_UNIFORM_BLOCKS i32 #x8A2B)
(bind-val GL_MAX_GEOMETRY_UNIFORM_BLOCKS i32 #x8A2C)
(bind-val GL_MAX_FRAGMENT_UNIFORM_BLOCKS i32 #x8A2D)
(bind-val GL_MAX_COMBINED_UNIFORM_BLOCKS i32 #x8A2E)
(bind-val GL_MAX_UNIFORM_BUFFER_BINDINGS i32 #x8A2F)
(bind-val GL_MAX_UNIFORM_BLOCK_SIZE i32 #x8A30)
(bind-val GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS i32 #x8A31)
(bind-val GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS i32 #x8A32)
(bind-val GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS i32 #x8A33)
(bind-val GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT i32 #x8A34)
(bind-val GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH i32 #x8A35)
(bind-val GL_ACTIVE_UNIFORM_BLOCKS i32 #x8A36)
(bind-val GL_UNIFORM_TYPE i32 #x8A37)
(bind-val GL_UNIFORM_SIZE i32 #x8A38)
(bind-val GL_UNIFORM_NAME_LENGTH i32 #x8A39)
(bind-val GL_UNIFORM_BLOCK_INDEX i32 #x8A3A)
(bind-val GL_UNIFORM_OFFSET i32 #x8A3B)
(bind-val GL_UNIFORM_ARRAY_STRIDE i32 #x8A3C)
(bind-val GL_UNIFORM_MATRIX_STRIDE i32 #x8A3D)
(bind-val GL_UNIFORM_IS_ROW_MAJOR i32 #x8A3E)
(bind-val GL_UNIFORM_BLOCK_BINDING i32 #x8A3F)
(bind-val GL_UNIFORM_BLOCK_DATA_SIZE i32 #x8A40)
(bind-val GL_UNIFORM_BLOCK_NAME_LENGTH i32 #x8A41)
(bind-val GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS i32 #x8A42)
(bind-val GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES i32 #x8A43)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER i32 #x8A44)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER i32 #x8A45)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER i32 #x8A46)
(bind-val GL_INVALID_INDEX i32 #xFFFFFFFF) ;; #xFFFFFFFFu
;; #endif

;; #ifndef GL_ARB_copy_buffer
(bind-val GL_COPY_READ_BUFFER i32 #x8F36)
(bind-val GL_COPY_WRITE_BUFFER i32 #x8F37)
;; #endif

;; #ifndef GL_ARB_depth_clamp
(bind-val GL_DEPTH_CLAMP i32 #x864F)
;; #endif

;; #ifndef GL_ARB_draw_elements_base_vertex
;; #endif

;; #ifndef GL_ARB_fragment_coord_conventions
;; #endif

;; #ifndef GL_ARB_provoking_vertex
(bind-val GL_FIRST_VERTEX_CONVENTION i32 #x8E4D)
(bind-val GL_LAST_VERTEX_CONVENTION i32 #x8E4E)
(bind-val GL_PROVOKING_VERTEX i32 #x8E4F)
;; #endif

;; #ifndef GL_ARB_seamless_cube_map
(bind-val GL_TEXTURE_CUBE_MAP_SEAMLESS i32 #x884F)
;; #endif

;; #ifndef GL_ARB_sync
(bind-val GL_MAX_SERVER_WAIT_TIMEOUT i32 #x9111)
(bind-val GL_OBJECT_TYPE i32 #x9112)
(bind-val GL_SYNC_CONDITION i32 #x9113)
(bind-val GL_SYNC_STATUS i32 #x9114)
(bind-val GL_SYNC_FLAGS i32 #x9115)
(bind-val GL_SYNC_FENCE i32 #x9116)
(bind-val GL_SYNC_GPU_COMMANDS_COMPLETE i32 #x9117)
(bind-val GL_UNSIGNALED i32 #x9118)
(bind-val GL_SIGNALED i32 #x9119)
(bind-val GL_ALREADY_SIGNALED i32 #x911A)
(bind-val GL_TIMEOUT_EXPIRED i32 #x911B)
(bind-val GL_CONDITION_SATISFIED i32 #x911C)
(bind-val GL_WAIT_FAILED i32 #x911D)
(bind-val GL_SYNC_FLUSH_COMMANDS_BIT i32 #x00000001)
(bind-val GL_TIMEOUT_IGNORED i64 #xFFFFFFFFFFFFFFFF) ;; #xFFFFFFFFFFFFFFFFull
;; #endif

;; #ifndef GL_ARB_texture_multisample
(bind-val GL_SAMPLE_POSITION i32 #x8E50)
(bind-val GL_SAMPLE_MASK i32 #x8E51)
(bind-val GL_SAMPLE_MASK_VALUE i32 #x8E52)
(bind-val GL_MAX_SAMPLE_MASK_WORDS i32 #x8E59)
(bind-val GL_TEXTURE_2D_MULTISAMPLE i32 #x9100)
(bind-val GL_PROXY_TEXTURE_2D_MULTISAMPLE i32 #x9101)
(bind-val GL_TEXTURE_2D_MULTISAMPLE_ARRAY i32 #x9102)
(bind-val GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY i32 #x9103)
(bind-val GL_TEXTURE_BINDING_2D_MULTISAMPLE i32 #x9104)
(bind-val GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY i32 #x9105)
(bind-val GL_TEXTURE_SAMPLES i32 #x9106)
(bind-val GL_TEXTURE_FIXED_SAMPLE_LOCATIONS i32 #x9107)
(bind-val GL_SAMPLER_2D_MULTISAMPLE i32 #x9108)
(bind-val GL_INT_SAMPLER_2D_MULTISAMPLE i32 #x9109)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE i32 #x910A)
(bind-val GL_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910B)
(bind-val GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910C)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910D)
(bind-val GL_MAX_COLOR_TEXTURE_SAMPLES i32 #x910E)
(bind-val GL_MAX_DEPTH_TEXTURE_SAMPLES i32 #x910F)
(bind-val GL_MAX_INTEGER_SAMPLES i32 #x9110)
;; #endif

;; #ifndef GL_ARB_vertex_array_bgra
;; /* reuse GL_BGRA */
;; #endif

;; #ifndef GL_ARB_texture_query_lod
;; #endif

;; #ifndef GL_ARB_blend_func_extended
(bind-val GL_SRC1_COLOR i32 #x88F9)
(bind-val GL_SRC1_ALPHA i32 #x8589)
(bind-val GL_ONE_MINUS_SRC1_COLOR i32 #x88FA)
(bind-val GL_ONE_MINUS_SRC1_ALPHA i32 #x88FB)
(bind-val GL_MAX_DUAL_SOURCE_DRAW_BUFFERS i32 #x88FC)
;; #endif

;; #ifndef GL_ARB_explicit_attrib_location
;; #endif

;; #ifndef GL_ARB_occlusion_query2
(bind-val GL_ANY_SAMPLES_PASSED i32 #x8C2F)
;; #endif

;; #ifndef GL_ARB_sampler_objects
(bind-val GL_SAMPLER_BINDING i32 #x8919)
;; #endif

;; #ifndef GL_ARB_shader_bit_encoding
;; #endif

;; #ifndef GL_ARB_texture_rgb10_a2ui
(bind-val GL_RGB10_A2UI i32 #x906F)
;; #endif

;; #ifndef GL_ARB_texture_swizzle
(bind-val GL_TEXTURE_SWIZZLE_R i32 #x8E42)
(bind-val GL_TEXTURE_SWIZZLE_G i32 #x8E43)
(bind-val GL_TEXTURE_SWIZZLE_B i32 #x8E44)
(bind-val GL_TEXTURE_SWIZZLE_A i32 #x8E45)
(bind-val GL_TEXTURE_SWIZZLE_RGBA i32 #x8E46)
;; #endif

;; #ifndef GL_ARB_timer_query
(bind-val GL_TIME_ELAPSED i32 #x88BF)
(bind-val GL_TIMESTAMP i32 #x8E28)
;; #endif

;; #ifndef GL_ARB_vertex_type_2_10_10_10_rev
;; /* reuse GL_UNSIGNED_INT_2_10_10_10_REV */
(bind-val GL_INT_2_10_10_10_REV i32 #x8D9F)
;; #endif

;; #ifndef GL_ARB_draw_indirect
(bind-val GL_DRAW_INDIRECT_BUFFER i32 #x8F3F)
(bind-val GL_DRAW_INDIRECT_BUFFER_BINDING i32 #x8F43)
;; #endif

;; #ifndef GL_ARB_gpu_shader5
(bind-val GL_GEOMETRY_SHADER_INVOCATIONS i32 #x887F)
(bind-val GL_MAX_GEOMETRY_SHADER_INVOCATIONS i32 #x8E5A)
(bind-val GL_MIN_FRAGMENT_INTERPOLATION_OFFSET i32 #x8E5B)
(bind-val GL_MAX_FRAGMENT_INTERPOLATION_OFFSET i32 #x8E5C)
(bind-val GL_FRAGMENT_INTERPOLATION_OFFSET_BITS i32 #x8E5D)
;; /* reuse GL_MAX_VERTEX_STREAMS */
;; #endif

;; #ifndef GL_ARB_gpu_shader_fp64
;; /* reuse GL_DOUBLE */
(bind-val GL_DOUBLE_VEC2 i32 #x8FFC)
(bind-val GL_DOUBLE_VEC3 i32 #x8FFD)
(bind-val GL_DOUBLE_VEC4 i32 #x8FFE)
(bind-val GL_DOUBLE_MAT2 i32 #x8F46)
(bind-val GL_DOUBLE_MAT3 i32 #x8F47)
(bind-val GL_DOUBLE_MAT4 i32 #x8F48)
(bind-val GL_DOUBLE_MAT2x3 i32 #x8F49)
(bind-val GL_DOUBLE_MAT2x4 i32 #x8F4A)
(bind-val GL_DOUBLE_MAT3x2 i32 #x8F4B)
(bind-val GL_DOUBLE_MAT3x4 i32 #x8F4C)
(bind-val GL_DOUBLE_MAT4x2 i32 #x8F4D)
(bind-val GL_DOUBLE_MAT4x3 i32 #x8F4E)
;; #endif

;; #ifndef GL_ARB_shader_subroutine
(bind-val GL_ACTIVE_SUBROUTINES i32 #x8DE5)
(bind-val GL_ACTIVE_SUBROUTINE_UNIFORMS i32 #x8DE6)
(bind-val GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS i32 #x8E47)
(bind-val GL_ACTIVE_SUBROUTINE_MAX_LENGTH i32 #x8E48)
(bind-val GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH i32 #x8E49)
(bind-val GL_MAX_SUBROUTINES i32 #x8DE7)
(bind-val GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS i32 #x8DE8)
(bind-val GL_NUM_COMPATIBLE_SUBROUTINES i32 #x8E4A)
(bind-val GL_COMPATIBLE_SUBROUTINES i32 #x8E4B)
;; /* reuse GL_UNIFORM_SIZE */
;; /* reuse GL_UNIFORM_NAME_LENGTH */
;; #endif

;; #ifndef GL_ARB_tessellation_shader
(bind-val GL_PATCHES i32 #x000E)
(bind-val GL_PATCH_VERTICES i32 #x8E72)
(bind-val GL_PATCH_DEFAULT_INNER_LEVEL i32 #x8E73)
(bind-val GL_PATCH_DEFAULT_OUTER_LEVEL i32 #x8E74)
(bind-val GL_TESS_CONTROL_OUTPUT_VERTICES i32 #x8E75)
(bind-val GL_TESS_GEN_MODE i32 #x8E76)
(bind-val GL_TESS_GEN_SPACING i32 #x8E77)
(bind-val GL_TESS_GEN_VERTEX_ORDER i32 #x8E78)
(bind-val GL_TESS_GEN_POINT_MODE i32 #x8E79)
;; /* reuse GL_TRIANGLES */
(bind-val GL_QUADS i32 #x0007)
(bind-val GL_ISOLINES i32 #x8E7A)
;; /* reuse GL_EQUAL */
(bind-val GL_FRACTIONAL_ODD i32 #x8E7B)
(bind-val GL_FRACTIONAL_EVEN i32 #x8E7C)
;; /* reuse GL_CCW */
;; /* reuse GL_CW */
(bind-val GL_MAX_PATCH_VERTICES i32 #x8E7D)
(bind-val GL_MAX_TESS_GEN_LEVEL i32 #x8E7E)
(bind-val GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS i32 #x8E7F)
(bind-val GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS i32 #x8E80)
(bind-val GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS i32 #x8E81)
(bind-val GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS i32 #x8E82)
(bind-val GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS i32 #x8E83)
(bind-val GL_MAX_TESS_PATCH_COMPONENTS i32 #x8E84)
(bind-val GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS i32 #x8E85)
(bind-val GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS i32 #x8E86)
(bind-val GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS i32 #x8E89)
(bind-val GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS i32 #x8E8A)
(bind-val GL_MAX_TESS_CONTROL_INPUT_COMPONENTS i32 #x886C)
(bind-val GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS i32 #x886D)
(bind-val GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS i32 #x8E1E)
(bind-val GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS i32 #x8E1F)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER i32 #x84F0)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER i32 #x84F1)
(bind-val GL_TESS_EVALUATION_SHADER i32 #x8E87)
(bind-val GL_TESS_CONTROL_SHADER i32 #x8E88)
;; #endif

;; #ifndef GL_ARB_texture_buffer_object_rgb32
;; /* reuse GL_RGB32F */
;; /* reuse GL_RGB32UI */
;; /* reuse GL_RGB32I */
;; #endif

;; #ifndef GL_ARB_transform_feedback2
(bind-val GL_TRANSFORM_FEEDBACK i32 #x8E22)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED i32 #x8E23)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE i32 #x8E24)
(bind-val GL_TRANSFORM_FEEDBACK_BINDING i32 #x8E25)
;; #endif

;; #ifndef GL_ARB_transform_feedback3
(bind-val GL_MAX_TRANSFORM_FEEDBACK_BUFFERS i32 #x8E70)
(bind-val GL_MAX_VERTEX_STREAMS i32 #x8E71)
;; #endif

;; #ifndef GL_ARB_ES2_compatibility
(bind-val GL_FIXED i32 #x140C)
(bind-val GL_IMPLEMENTATION_COLOR_READ_TYPE i32 #x8B9A)
(bind-val GL_IMPLEMENTATION_COLOR_READ_FORMAT i32 #x8B9B)
(bind-val GL_LOW_FLOAT i32 #x8DF0)
(bind-val GL_MEDIUM_FLOAT i32 #x8DF1)
(bind-val GL_HIGH_FLOAT i32 #x8DF2)
(bind-val GL_LOW_INT i32 #x8DF3)
(bind-val GL_MEDIUM_INT i32 #x8DF4)
(bind-val GL_HIGH_INT i32 #x8DF5)
(bind-val GL_SHADER_COMPILER i32 #x8DFA)
(bind-val GL_SHADER_BINARY_FORMATS i32 #x8DF8)
(bind-val GL_NUM_SHADER_BINARY_FORMATS i32 #x8DF9)
(bind-val GL_MAX_VERTEX_UNIFORM_VECTORS i32 #x8DFB)
(bind-val GL_MAX_VARYING_VECTORS i32 #x8DFC)
(bind-val GL_MAX_FRAGMENT_UNIFORM_VECTORS i32 #x8DFD)
(bind-val GL_RGB565 i32 #x8D62)
;; #endif

;; #ifndef GL_ARB_get_program_binary
(bind-val GL_PROGRAM_BINARY_RETRIEVABLE_HINT i32 #x8257)
(bind-val GL_PROGRAM_BINARY_LENGTH i32 #x8741)
(bind-val GL_NUM_PROGRAM_BINARY_FORMATS i32 #x87FE)
(bind-val GL_PROGRAM_BINARY_FORMATS i32 #x87FF)
;; #endif

;; #ifndef GL_ARB_separate_shader_objects
(bind-val GL_VERTEX_SHADER_BIT i32 #x00000001)
(bind-val GL_FRAGMENT_SHADER_BIT i32 #x00000002)
(bind-val GL_GEOMETRY_SHADER_BIT i32 #x00000004)
(bind-val GL_TESS_CONTROL_SHADER_BIT i32 #x00000008)
(bind-val GL_TESS_EVALUATION_SHADER_BIT i32 #x00000010)
(bind-val GL_ALL_SHADER_BITS i32 #xFFFFFFFF)
(bind-val GL_PROGRAM_SEPARABLE i32 #x8258)
(bind-val GL_ACTIVE_PROGRAM i32 #x8259)
(bind-val GL_PROGRAM_PIPELINE_BINDING i32 #x825A)
;; #endif

;; #ifndef GL_ARB_shader_precision
;; #endif

;; #ifndef GL_ARB_vertex_attrib_64bit
;; /* reuse GL_DOUBLE */
;; /* reuse GL_DOUBLE_VEC2 */
;; /* reuse GL_DOUBLE_VEC3 */
;; /* reuse GL_DOUBLE_VEC4 */
;; /* reuse GL_DOUBLE_MAT2 */
;; /* reuse GL_DOUBLE_MAT3 */
;; /* reuse GL_DOUBLE_MAT4 */
;; /* reuse GL_DOUBLE_MAT2x3 */
;; /* reuse GL_DOUBLE_MAT2x4 */
;; /* reuse GL_DOUBLE_MAT3x2 */
;; /* reuse GL_DOUBLE_MAT3x4 */
;; /* reuse GL_DOUBLE_MAT4x2 */
;; /* reuse GL_DOUBLE_MAT4x3 */
;; #endif

;; #ifndef GL_ARB_viewport_array
;; /* reuse GL_SCISSOR_BOX */
;; /* reuse GL_VIEWPORT */
;; /* reuse GL_DEPTH_RANGE */
;; /* reuse GL_SCISSOR_TEST */
(bind-val GL_MAX_VIEWPORTS i32 #x825B)
(bind-val GL_VIEWPORT_SUBPIXEL_BITS i32 #x825C)
(bind-val GL_VIEWPORT_BOUNDS_RANGE i32 #x825D)
(bind-val GL_LAYER_PROVOKING_VERTEX i32 #x825E)
(bind-val GL_VIEWPORT_INDEX_PROVOKING_VERTEX i32 #x825F)
(bind-val GL_UNDEFINED_VERTEX i32 #x8260)
;; /* reuse GL_FIRST_VERTEX_CONVENTION */
;; /* reuse GL_LAST_VERTEX_CONVENTION */
;; /* reuse GL_PROVOKING_VERTEX */
;; #endif


;; /*************************************************************/

;; #ifndef GL_VERSION_1_0
(bind-val GL_VERSION_1_0 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glCullFace [void,GLenum]*)
(bind-lib libGL glFrontFace [void,GLenum]*)
(bind-lib libGL glHint [void,GLenum,GLenum]*)
(bind-lib libGL glLineWidth [void,GLfloat]*)
(bind-lib libGL glPointSize [void,GLfloat]*)
(bind-lib libGL glPolygonMode [void,GLenum,GLenum]*)
(bind-lib libGL glScissor [void,GLint,GLint,GLsizei,GLsizei]*)
(bind-lib libGL glTexParameterf [void,GLenum,GLenum,GLfloat]*)
(bind-lib libGL glTexParameterfv [void,GLenum,GLenum,GLfloat*]*)
(bind-lib libGL glTexParameteri [void,GLenum,GLenum,GLint]*)
(bind-lib libGL glTexParameteriv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glTexImage1D [void,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glTexImage2D [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glDrawBuffer [void,GLenum]*)
(bind-lib libGL glClear [void,GLbitfield]*)
(bind-lib libGL glClearColor [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glClearStencil [void,GLint]*)
(bind-lib libGL glClearDepth [void,GLclampd]*)
(bind-lib libGL glStencilMask [void,GLuint]*)
(bind-lib libGL glColorMask [void,GLboolean,GLboolean,GLboolean,GLboolean]*)
(bind-lib libGL glDepthMask [void,GLboolean]*)
(bind-lib libGL glDisable [void,GLenum]*)
(bind-lib libGL glEnable [void,GLenum]*)
(bind-lib libGL glFinish [void]*)
(bind-lib libGL glFlush [void]*)
(bind-lib libGL glBlendFunc [void,GLenum,GLenum]*)
(bind-lib libGL glLogicOp [void,GLenum]*)
(bind-lib libGL glStencilFunc [void,GLenum,GLint,GLuint]*)
(bind-lib libGL glStencilOp [void,GLenum,GLenum,GLenum]*)
(bind-lib libGL glDepthFunc [void,GLenum]*)
(bind-lib libGL glPixelStoref [void,GLenum,GLfloat]*)
(bind-lib libGL glPixelStorei [void,GLenum,GLint]*)
(bind-lib libGL glReadBuffer [void,GLenum]*)
(bind-lib libGL glReadPixels [void,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glGetBooleanv [void,GLenum,GLboolean*]*)
(bind-lib libGL glGetDoublev [void,GLenum,GLdouble*]*)
(bind-lib libGL glGetError [GLenum]*)
(bind-lib libGL glGetFloatv [void,GLenum,GLfloat*]*)
(bind-lib libGL glGetIntegerv [void,GLenum,GLint*]*)
(bind-lib libGL glGetString [GLubyte*,GLenum]*)
(bind-lib libGL glGetTexImage [void,GLenum,GLint,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glGetTexParameterfv [void,GLenum,GLenum,GLfloat*]*)
(bind-lib libGL glGetTexParameteriv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glGetTexLevelParameterfv [void,GLenum,GLint,GLenum,GLfloat*]*)
(bind-lib libGL glGetTexLevelParameteriv [void,GLenum,GLint,GLenum,GLint*]*)
(bind-lib libGL glIsEnabled [GLboolean,GLenum]*)
(bind-lib libGL glDepthRange [void,GLclampd,GLclampd]*)
(bind-lib libGL glViewport [void,GLint,GLint,GLsizei,GLsizei]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLCULLFACEPROC [void,GLenum]*)
(bind-alias PFNGLFRONTFACEPROC [void,GLenum]*)
(bind-alias PFNGLHINTPROC [void,GLenum,GLenum]*)
(bind-alias PFNGLLINEWIDTHPROC [void,GLfloat]*)
(bind-alias PFNGLPOINTSIZEPROC [void,GLfloat]*)
(bind-alias PFNGLPOLYGONMODEPROC [void,GLenum,GLenum]*)
(bind-alias PFNGLSCISSORPROC [void,GLint,GLint,GLsizei,GLsizei]*)
(bind-alias PFNGLTEXPARAMETERFPROC [void,GLenum,GLenum,GLfloat]*)
(bind-alias PFNGLTEXPARAMETERFVPROC [void,GLenum,GLenum,GLfloat*]*)
(bind-alias PFNGLTEXPARAMETERIPROC [void,GLenum,GLenum,GLint]*)
(bind-alias PFNGLTEXPARAMETERIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLTEXIMAGE1DPROC [void,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLTEXIMAGE2DPROC [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLDRAWBUFFERPROC [void,GLenum]*)
(bind-alias PFNGLCLEARPROC [void,GLbitfield]*)
(bind-alias PFNGLCLEARCOLORPROC [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLCLEARSTENCILPROC [void,GLint]*)
(bind-alias PFNGLCLEARDEPTHPROC [void,GLclampd]*)
(bind-alias PFNGLSTENCILMASKPROC [void,GLuint]*)
(bind-alias PFNGLCOLORMASKPROC [void,GLboolean,GLboolean,GLboolean,GLboolean]*)
(bind-alias PFNGLDEPTHMASKPROC [void,GLboolean]*)
(bind-alias PFNGLDISABLEPROC [void,GLenum]*)
(bind-alias PFNGLENABLEPROC [void,GLenum]*)
(bind-alias PFNGLFINISHPROC [void]*)
(bind-alias PFNGLFLUSHPROC [void]*)
(bind-alias PFNGLBLENDFUNCPROC [void,GLenum,GLenum]*)
(bind-alias PFNGLLOGICOPPROC [void,GLenum]*)
(bind-alias PFNGLSTENCILFUNCPROC [void,GLenum,GLint,GLuint]*)
(bind-alias PFNGLSTENCILOPPROC [void,GLenum,GLenum,GLenum]*)
(bind-alias PFNGLDEPTHFUNCPROC [void,GLenum]*)
(bind-alias PFNGLPIXELSTOREFPROC [void,GLenum,GLfloat]*)
(bind-alias PFNGLPIXELSTOREIPROC [void,GLenum,GLint]*)
(bind-alias PFNGLREADBUFFERPROC [void,GLenum]*)
(bind-alias PFNGLREADPIXELSPROC [void,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLGETBOOLEANVPROC [void,GLenum,GLboolean*]*)
(bind-alias PFNGLGETDOUBLEVPROC [void,GLenum,GLdouble*]*)
(bind-alias PFNGLGETERRORPROC [GLenum]*)
(bind-alias PFNGLGETFLOATVPROC [void,GLenum,GLfloat*]*)
(bind-alias PFNGLGETINTEGERVPROC [void,GLenum,GLint*]*)
(bind-alias PFNGLGETSTRINGPROC [GLubyte*,GLenum]*)
(bind-alias PFNGLGETTEXIMAGEPROC [void,GLenum,GLint,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLGETTEXPARAMETERFVPROC [void,GLenum,GLenum,GLfloat*]*)
(bind-alias PFNGLGETTEXPARAMETERIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLGETTEXLEVELPARAMETERFVPROC [void,GLenum,GLint,GLenum,GLfloat*]*)
(bind-alias PFNGLGETTEXLEVELPARAMETERIVPROC [void,GLenum,GLint,GLenum,GLint*]*)
(bind-alias PFNGLISENABLEDPROC [GLboolean,GLenum]*)
(bind-alias PFNGLDEPTHRANGEPROC [void,GLclampd,GLclampd]*)
(bind-alias PFNGLVIEWPORTPROC [void,GLint,GLint,GLsizei,GLsizei]*)
;; #endif

;; #ifndef GL_VERSION_1_1
(bind-val GL_VERSION_1_1 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glDrawArrays [void,GLenum,GLint,GLsizei]*)
(bind-lib libGL glDrawElements [void,GLenum,GLsizei,GLenum,GLvoid*]*)
(bind-lib libGL glPolygonOffset [void,GLfloat,GLfloat]*)
(bind-lib libGL glCopyTexImage1D [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint]*)
(bind-lib libGL glCopyTexImage2D [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint]*)
(bind-lib libGL glCopyTexSubImage1D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei]*)
(bind-lib libGL glCopyTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
(bind-lib libGL glTexSubImage1D [void,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glBindTexture [void,GLenum,GLuint]*)
(bind-lib libGL glDeleteTextures [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenTextures [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsTexture [GLboolean,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLDRAWARRAYSPROC [void,GLenum,GLint,GLsizei]*)
(bind-alias PFNGLDRAWELEMENTSPROC [void,GLenum,GLsizei,GLenum,GLvoid*]*)
(bind-alias PFNGLPOLYGONOFFSETPROC [void,GLfloat,GLfloat]*)
(bind-alias PFNGLCOPYTEXIMAGE1DPROC [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint]*)
(bind-alias PFNGLCOPYTEXIMAGE2DPROC [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint]*)
(bind-alias PFNGLCOPYTEXSUBIMAGE1DPROC [void,GLenum,GLint,GLint,GLint,GLint,GLsizei]*)
(bind-alias PFNGLCOPYTEXSUBIMAGE2DPROC [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
(bind-alias PFNGLTEXSUBIMAGE1DPROC [void,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLTEXSUBIMAGE2DPROC [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLBINDTEXTUREPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDELETETEXTURESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENTEXTURESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISTEXTUREPROC [GLboolean,GLuint]*)
;; #endif

;; #ifndef GL_VERSION_1_2
(bind-val GL_VERSION_1_2 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBlendColor [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glBlendEquation [void,GLenum]*)
(bind-lib libGL glDrawRangeElements [void,GLenum,GLuint,GLuint,GLsizei,GLenum,GLvoid*]*)
(bind-lib libGL glTexImage3D [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-lib libGL glCopyTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBLENDCOLORPROC [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLBLENDEQUATIONPROC [void,GLenum]*)
(bind-alias PFNGLDRAWRANGEELEMENTSPROC [void,GLenum,GLuint,GLuint,GLsizei,GLenum,GLvoid*]*)
(bind-alias PFNGLTEXIMAGE3DPROC [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLTEXSUBIMAGE3DPROC [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLvoid*]*)
(bind-alias PFNGLCOPYTEXSUBIMAGE3DPROC [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; #endif

;; #ifndef GL_VERSION_1_3
(bind-val GL_VERSION_1_3 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glActiveTexture [void,GLenum]*)
(bind-lib libGL glSampleCoverage [void,GLclampf,GLboolean]*)
(bind-lib libGL glCompressedTexImage3D [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-lib libGL glCompressedTexImage2D [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-lib libGL glCompressedTexImage1D [void,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-lib libGL glCompressedTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-lib libGL glCompressedTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-lib libGL glCompressedTexSubImage1D [void,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-lib libGL glGetCompressedTexImage [void,GLenum,GLint,GLvoid*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLACTIVETEXTUREPROC [void,GLenum]*)
(bind-alias PFNGLSAMPLECOVERAGEPROC [void,GLclampf,GLboolean]*)
(bind-alias PFNGLCOMPRESSEDTEXIMAGE3DPROC [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-alias PFNGLCOMPRESSEDTEXIMAGE2DPROC [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-alias PFNGLCOMPRESSEDTEXIMAGE1DPROC [void,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,GLvoid*]*)
(bind-alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-alias PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC [void,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,GLvoid*]*)
(bind-alias PFNGLGETCOMPRESSEDTEXIMAGEPROC [void,GLenum,GLint,GLvoid*]*)
;; #endif

;; #ifndef GL_VERSION_1_4
(bind-val GL_VERSION_1_4 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBlendFuncSeparate [void,GLenum,GLenum,GLenum,GLenum]*)
(bind-lib libGL glMultiDrawArrays [void,GLenum,GLint*,GLsizei*,GLsizei]*)
(bind-lib libGL glMultiDrawElements [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei]*)
(bind-lib libGL glPointParameterf [void,GLenum,GLfloat]*)
(bind-lib libGL glPointParameterfv [void,GLenum,GLfloat*]*)
(bind-lib libGL glPointParameteri [void,GLenum,GLint]*)
(bind-lib libGL glPointParameteriv [void,GLenum,GLint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBLENDFUNCSEPARATEPROC [void,GLenum,GLenum,GLenum,GLenum]*)
(bind-alias PFNGLMULTIDRAWARRAYSPROC [void,GLenum,GLint*,GLsizei*,GLsizei]*)
(bind-alias PFNGLMULTIDRAWELEMENTSPROC [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei]*)
(bind-alias PFNGLPOINTPARAMETERFPROC [void,GLenum,GLfloat]*)
(bind-alias PFNGLPOINTPARAMETERFVPROC [void,GLenum,GLfloat*]*)
(bind-alias PFNGLPOINTPARAMETERIPROC [void,GLenum,GLint]*)
(bind-alias PFNGLPOINTPARAMETERIVPROC [void,GLenum,GLint*]*)
;; #endif

;; #ifndef GL_VERSION_1_5
(bind-val GL_VERSION_1_5 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGenQueries [void,GLsizei,GLuint*]*)
(bind-lib libGL glDeleteQueries [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsQuery [GLboolean,GLuint]*)
(bind-lib libGL glBeginQuery [void,GLenum,GLuint]*)
(bind-lib libGL glEndQuery [void,GLenum]*)
(bind-lib libGL glGetQueryiv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glGetQueryObjectiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetQueryObjectuiv [void,GLuint,GLenum,GLuint*]*)
(bind-lib libGL glBindBuffer [void,GLenum,GLuint]*)
(bind-lib libGL glDeleteBuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenBuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsBuffer [GLboolean,GLuint]*)
(bind-lib libGL glBufferData [void,GLenum,GLsizeiptr,GLvoid*,GLenum]*)
(bind-lib libGL glBufferSubData [void,GLenum,GLintptr,GLsizeiptr,GLvoid*]*)
(bind-lib libGL glGetBufferSubData [void,GLenum,GLintptr,GLsizeiptr,GLvoid*]*)
(bind-lib libGL glMapBuffer [GLvoid*,GLenum,GLenum]*)
(bind-lib libGL glUnmapBuffer [GLboolean,GLenum]*)
(bind-lib libGL glGetBufferParameteriv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glGetBufferPointerv [void,GLenum,GLenum,GLvoid**]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGENQUERIESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLDELETEQUERIESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISQUERYPROC [GLboolean,GLuint]*)
(bind-alias PFNGLBEGINQUERYPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLENDQUERYPROC [void,GLenum]*)
(bind-alias PFNGLGETQUERYIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLGETQUERYOBJECTIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETQUERYOBJECTUIVPROC [void,GLuint,GLenum,GLuint*]*)
(bind-alias PFNGLBINDBUFFERPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDELETEBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISBUFFERPROC [GLboolean,GLuint]*)
(bind-alias PFNGLBUFFERDATAPROC [void,GLenum,GLsizeiptr,GLvoid*,GLenum]*)
(bind-alias PFNGLBUFFERSUBDATAPROC [void,GLenum,GLintptr,GLsizeiptr,GLvoid*]*)
(bind-alias PFNGLGETBUFFERSUBDATAPROC [void,GLenum,GLintptr,GLsizeiptr,GLvoid*]*)
(bind-alias PFNGLMAPBUFFERPROC [GLvoid*,GLenum,GLenum]*)
(bind-alias PFNGLUNMAPBUFFERPROC [GLboolean,GLenum]*)
(bind-alias PFNGLGETBUFFERPARAMETERIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLGETBUFFERPOINTERVPROC [void,GLenum,GLenum,GLvoid**]*)
;; #endif

;; #ifndef GL_VERSION_2_0
(bind-val GL_VERSION_2_0 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBlendEquationSeparate [void,GLenum,GLenum]*)
(bind-lib libGL glDrawBuffers [void,GLsizei,GLenum*]*)
(bind-lib libGL glStencilOpSeparate [void,GLenum,GLenum,GLenum,GLenum]*)
(bind-lib libGL glStencilFuncSeparate [void,GLenum,GLenum,GLint,GLuint]*)
(bind-lib libGL glStencilMaskSeparate [void,GLenum,GLuint]*)
(bind-lib libGL glAttachShader [void,GLuint,GLuint]*)
(bind-lib libGL glBindAttribLocation [void,GLuint,GLuint,GLchar*]*)
(bind-lib libGL glCompileShader [void,GLuint]*)
(bind-lib libGL glCreateProgram [GLuint]*)
(bind-lib libGL glCreateShader [GLuint,GLenum]*)
(bind-lib libGL glDeleteProgram [void,GLuint]*)
(bind-lib libGL glDeleteShader [void,GLuint]*)
(bind-lib libGL glDetachShader [void,GLuint,GLuint]*)
(bind-lib libGL glDisableVertexAttribArray [void,GLuint]*)
(bind-lib libGL glEnableVertexAttribArray [void,GLuint]*)
(bind-lib libGL glGetActiveAttrib [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
(bind-lib libGL glGetActiveUniform [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
(bind-lib libGL glGetAttachedShaders [void,GLuint,GLsizei,GLsizei*,GLuint*]*)
(bind-lib libGL glGetAttribLocation [GLint,GLuint,GLchar*]*)
(bind-lib libGL glGetProgramiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetProgramInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glGetShaderiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetShaderInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glGetShaderSource [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glGetUniformLocation [GLint,GLuint,GLchar*]*)
(bind-lib libGL glGetUniformfv [void,GLuint,GLint,GLfloat*]*)
(bind-lib libGL glGetUniformiv [void,GLuint,GLint,GLint*]*)
(bind-lib libGL glGetVertexAttribdv [void,GLuint,GLenum,GLdouble*]*)
(bind-lib libGL glGetVertexAttribfv [void,GLuint,GLenum,GLfloat*]*)
(bind-lib libGL glGetVertexAttribiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetVertexAttribPointerv [void,GLuint,GLenum,GLvoid**]*)
(bind-lib libGL glIsProgram [GLboolean,GLuint]*)
(bind-lib libGL glIsShader [GLboolean,GLuint]*)
(bind-lib libGL glLinkProgram [void,GLuint]*)
(bind-lib libGL glShaderSource [void,GLuint,GLsizei,GLchar**,GLint*]*)
(bind-lib libGL glUseProgram [void,GLuint]*)
(bind-lib libGL glUniform1f [void,GLint,GLfloat]*)
(bind-lib libGL glUniform2f [void,GLint,GLfloat,GLfloat]*)
(bind-lib libGL glUniform3f [void,GLint,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glUniform4f [void,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glUniform1i [void,GLint,GLint]*)
(bind-lib libGL glUniform2i [void,GLint,GLint,GLint]*)
(bind-lib libGL glUniform3i [void,GLint,GLint,GLint,GLint]*)
(bind-lib libGL glUniform4i [void,GLint,GLint,GLint,GLint,GLint]*)
(bind-lib libGL glUniform1fv [void,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glUniform2fv [void,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glUniform3fv [void,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glUniform4fv [void,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glUniform1iv [void,GLint,GLsizei,GLint*]*)
(bind-lib libGL glUniform2iv [void,GLint,GLsizei,GLint*]*)
(bind-lib libGL glUniform3iv [void,GLint,GLsizei,GLint*]*)
(bind-lib libGL glUniform4iv [void,GLint,GLsizei,GLint*]*)
(bind-lib libGL glUniformMatrix2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glValidateProgram [void,GLuint]*)
(bind-lib libGL glVertexAttrib1d [void,GLuint,GLdouble]*)
(bind-lib libGL glVertexAttrib1dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttrib1f [void,GLuint,GLfloat]*)
(bind-lib libGL glVertexAttrib1fv [void,GLuint,GLfloat*]*)
(bind-lib libGL glVertexAttrib1s [void,GLuint,GLshort]*)
(bind-lib libGL glVertexAttrib1sv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttrib2d [void,GLuint,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttrib2dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttrib2f [void,GLuint,GLfloat,GLfloat]*)
(bind-lib libGL glVertexAttrib2fv [void,GLuint,GLfloat*]*)
(bind-lib libGL glVertexAttrib2s [void,GLuint,GLshort,GLshort]*)
(bind-lib libGL glVertexAttrib2sv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttrib3d [void,GLuint,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttrib3dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttrib3f [void,GLuint,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glVertexAttrib3fv [void,GLuint,GLfloat*]*)
(bind-lib libGL glVertexAttrib3s [void,GLuint,GLshort,GLshort,GLshort]*)
(bind-lib libGL glVertexAttrib3sv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttrib4Nbv [void,GLuint,GLbyte*]*)
(bind-lib libGL glVertexAttrib4Niv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttrib4Nsv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttrib4Nub [void,GLuint,GLubyte,GLubyte,GLubyte,GLubyte]*)
(bind-lib libGL glVertexAttrib4Nubv [void,GLuint,GLubyte*]*)
(bind-lib libGL glVertexAttrib4Nuiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttrib4Nusv [void,GLuint,GLushort*]*)
(bind-lib libGL glVertexAttrib4bv [void,GLuint,GLbyte*]*)
(bind-lib libGL glVertexAttrib4d [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttrib4dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttrib4f [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glVertexAttrib4fv [void,GLuint,GLfloat*]*)
(bind-lib libGL glVertexAttrib4iv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttrib4s [void,GLuint,GLshort,GLshort,GLshort,GLshort]*)
(bind-lib libGL glVertexAttrib4sv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttrib4ubv [void,GLuint,GLubyte*]*)
(bind-lib libGL glVertexAttrib4uiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttrib4usv [void,GLuint,GLushort*]*)
(bind-lib libGL glVertexAttribPointer [void,GLuint,GLint,GLenum,GLboolean,GLsizei,GLvoid*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBLENDEQUATIONSEPARATEPROC [void,GLenum,GLenum]*)
(bind-alias PFNGLDRAWBUFFERSPROC [void,GLsizei,GLenum*]*)
(bind-alias PFNGLSTENCILOPSEPARATEPROC [void,GLenum,GLenum,GLenum,GLenum]*)
(bind-alias PFNGLSTENCILFUNCSEPARATEPROC [void,GLenum,GLenum,GLint,GLuint]*)
(bind-alias PFNGLSTENCILMASKSEPARATEPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLATTACHSHADERPROC [void,GLuint,GLuint]*)
(bind-alias PFNGLBINDATTRIBLOCATIONPROC [void,GLuint,GLuint,GLchar*]*)
(bind-alias PFNGLCOMPILESHADERPROC [void,GLuint]*)
(bind-alias PFNGLCREATEPROGRAMPROC [GLuint]*)
(bind-alias PFNGLCREATESHADERPROC [GLuint,GLenum]*)
(bind-alias PFNGLDELETEPROGRAMPROC [void,GLuint]*)
(bind-alias PFNGLDELETESHADERPROC [void,GLuint]*)
(bind-alias PFNGLDETACHSHADERPROC [void,GLuint,GLuint]*)
(bind-alias PFNGLDISABLEVERTEXATTRIBARRAYPROC [void,GLuint]*)
(bind-alias PFNGLENABLEVERTEXATTRIBARRAYPROC [void,GLuint]*)
(bind-alias PFNGLGETACTIVEATTRIBPROC [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
(bind-alias PFNGLGETACTIVEUNIFORMPROC [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
(bind-alias PFNGLGETATTACHEDSHADERSPROC [void,GLuint,GLsizei,GLsizei*,GLuint*]*)
(bind-alias PFNGLGETATTRIBLOCATIONPROC [GLint,GLuint,GLchar*]*)
(bind-alias PFNGLGETPROGRAMIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETPROGRAMINFOLOGPROC [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLGETSHADERIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETSHADERINFOLOGPROC [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLGETSHADERSOURCEPROC [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLGETUNIFORMLOCATIONPROC [GLint,GLuint,GLchar*]*)
(bind-alias PFNGLGETUNIFORMFVPROC [void,GLuint,GLint,GLfloat*]*)
(bind-alias PFNGLGETUNIFORMIVPROC [void,GLuint,GLint,GLint*]*)
(bind-alias PFNGLGETVERTEXATTRIBDVPROC [void,GLuint,GLenum,GLdouble*]*)
(bind-alias PFNGLGETVERTEXATTRIBFVPROC [void,GLuint,GLenum,GLfloat*]*)
(bind-alias PFNGLGETVERTEXATTRIBIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETVERTEXATTRIBPOINTERVPROC [void,GLuint,GLenum,GLvoid**]*)
(bind-alias PFNGLISPROGRAMPROC [GLboolean,GLuint]*)
(bind-alias PFNGLISSHADERPROC [GLboolean,GLuint]*)
(bind-alias PFNGLLINKPROGRAMPROC [void,GLuint]*)
(bind-alias PFNGLSHADERSOURCEPROC [void,GLuint,GLsizei,GLchar**,GLint*]*)
(bind-alias PFNGLUSEPROGRAMPROC [void,GLuint]*)
(bind-alias PFNGLUNIFORM1FPROC [void,GLint,GLfloat]*)
(bind-alias PFNGLUNIFORM2FPROC [void,GLint,GLfloat,GLfloat]*)
(bind-alias PFNGLUNIFORM3FPROC [void,GLint,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLUNIFORM4FPROC [void,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLUNIFORM1IPROC [void,GLint,GLint]*)
(bind-alias PFNGLUNIFORM2IPROC [void,GLint,GLint,GLint]*)
(bind-alias PFNGLUNIFORM3IPROC [void,GLint,GLint,GLint,GLint]*)
(bind-alias PFNGLUNIFORM4IPROC [void,GLint,GLint,GLint,GLint,GLint]*)
(bind-alias PFNGLUNIFORM1FVPROC [void,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLUNIFORM2FVPROC [void,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLUNIFORM3FVPROC [void,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLUNIFORM4FVPROC [void,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLUNIFORM1IVPROC [void,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLUNIFORM2IVPROC [void,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLUNIFORM3IVPROC [void,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLUNIFORM4IVPROC [void,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLUNIFORMMATRIX2FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX3FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX4FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLVALIDATEPROGRAMPROC [void,GLuint]*)
(bind-alias PFNGLVERTEXATTRIB1DPROC [void,GLuint,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIB1DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIB1FPROC [void,GLuint,GLfloat]*)
(bind-alias PFNGLVERTEXATTRIB1FVPROC [void,GLuint,GLfloat*]*)
(bind-alias PFNGLVERTEXATTRIB1SPROC [void,GLuint,GLshort]*)
(bind-alias PFNGLVERTEXATTRIB1SVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIB2DPROC [void,GLuint,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIB2DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIB2FPROC [void,GLuint,GLfloat,GLfloat]*)
(bind-alias PFNGLVERTEXATTRIB2FVPROC [void,GLuint,GLfloat*]*)
(bind-alias PFNGLVERTEXATTRIB2SPROC [void,GLuint,GLshort,GLshort]*)
(bind-alias PFNGLVERTEXATTRIB2SVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIB3DPROC [void,GLuint,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIB3DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIB3FPROC [void,GLuint,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLVERTEXATTRIB3FVPROC [void,GLuint,GLfloat*]*)
(bind-alias PFNGLVERTEXATTRIB3SPROC [void,GLuint,GLshort,GLshort,GLshort]*)
(bind-alias PFNGLVERTEXATTRIB3SVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIB4NBVPROC [void,GLuint,GLbyte*]*)
(bind-alias PFNGLVERTEXATTRIB4NIVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIB4NSVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIB4NUBPROC [void,GLuint,GLubyte,GLubyte,GLubyte,GLubyte]*)
(bind-alias PFNGLVERTEXATTRIB4NUBVPROC [void,GLuint,GLubyte*]*)
(bind-alias PFNGLVERTEXATTRIB4NUIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIB4NUSVPROC [void,GLuint,GLushort*]*)
(bind-alias PFNGLVERTEXATTRIB4BVPROC [void,GLuint,GLbyte*]*)
(bind-alias PFNGLVERTEXATTRIB4DPROC [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIB4DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIB4FPROC [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLVERTEXATTRIB4FVPROC [void,GLuint,GLfloat*]*)
(bind-alias PFNGLVERTEXATTRIB4IVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIB4SPROC [void,GLuint,GLshort,GLshort,GLshort,GLshort]*)
(bind-alias PFNGLVERTEXATTRIB4SVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIB4UBVPROC [void,GLuint,GLubyte*]*)
(bind-alias PFNGLVERTEXATTRIB4UIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIB4USVPROC [void,GLuint,GLushort*]*)
(bind-alias PFNGLVERTEXATTRIBPOINTERPROC [void,GLuint,GLint,GLenum,GLboolean,GLsizei,GLvoid*]*)
;; #endif

;; #ifndef GL_VERSION_2_1
(bind-val GL_VERSION_2_1 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glUniformMatrix2x3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix3x2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix2x4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix4x2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix3x4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glUniformMatrix4x3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLUNIFORMMATRIX2X3FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX3X2FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX2X4FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX4X2FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX3X4FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLUNIFORMMATRIX4X3FVPROC [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; #endif

;; #ifndef GL_VERSION_3_0
(bind-val GL_VERSION_3_0 i32 1)
;; /* OpenGL 3.0 also reuses entry points from these extensions: */
;; /* ARB_framebuffer_object */
;; /* ARB_map_buffer_range */
;; /* ARB_vertex_array_object */
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glColorMaski [void,GLuint,GLboolean,GLboolean,GLboolean,GLboolean]*)
(bind-lib libGL glGetBooleani_v [void,GLenum,GLuint,GLboolean*]*)
(bind-lib libGL glGetIntegeri_v [void,GLenum,GLuint,GLint*]*)
(bind-lib libGL glEnablei [void,GLenum,GLuint]*)
(bind-lib libGL glDisablei [void,GLenum,GLuint]*)
(bind-lib libGL glIsEnabledi [GLboolean,GLenum,GLuint]*)
(bind-lib libGL glBeginTransformFeedback [void,GLenum]*)
(bind-lib libGL glEndTransformFeedback [void]*)
(bind-lib libGL glBindBufferRange [void,GLenum,GLuint,GLuint,GLintptr,GLsizeiptr]*)
(bind-lib libGL glBindBufferBase [void,GLenum,GLuint,GLuint]*)
(bind-lib libGL glTransformFeedbackVaryings [void,GLuint,GLsizei,GLchar**,GLenum]*)
(bind-lib libGL glGetTransformFeedbackVarying [void,GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*]*)
(bind-lib libGL glClampColor [void,GLenum,GLenum]*)
(bind-lib libGL glBeginConditionalRender [void,GLuint,GLenum]*)
(bind-lib libGL glEndConditionalRender [void]*)
(bind-lib libGL glVertexAttribIPointer [void,GLuint,GLint,GLenum,GLsizei,GLvoid*]*)
(bind-lib libGL glGetVertexAttribIiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetVertexAttribIuiv [void,GLuint,GLenum,GLuint*]*)
(bind-lib libGL glVertexAttribI1i [void,GLuint,GLint]*)
(bind-lib libGL glVertexAttribI2i [void,GLuint,GLint,GLint]*)
(bind-lib libGL glVertexAttribI3i [void,GLuint,GLint,GLint,GLint]*)
(bind-lib libGL glVertexAttribI4i [void,GLuint,GLint,GLint,GLint,GLint]*)
(bind-lib libGL glVertexAttribI1ui [void,GLuint,GLuint]*)
(bind-lib libGL glVertexAttribI2ui [void,GLuint,GLuint,GLuint]*)
(bind-lib libGL glVertexAttribI3ui [void,GLuint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glVertexAttribI4ui [void,GLuint,GLuint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glVertexAttribI1iv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttribI2iv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttribI3iv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttribI4iv [void,GLuint,GLint*]*)
(bind-lib libGL glVertexAttribI1uiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttribI2uiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttribI3uiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttribI4uiv [void,GLuint,GLuint*]*)
(bind-lib libGL glVertexAttribI4bv [void,GLuint,GLbyte*]*)
(bind-lib libGL glVertexAttribI4sv [void,GLuint,GLshort*]*)
(bind-lib libGL glVertexAttribI4ubv [void,GLuint,GLubyte*]*)
(bind-lib libGL glVertexAttribI4usv [void,GLuint,GLushort*]*)
(bind-lib libGL glGetUniformuiv [void,GLuint,GLint,GLuint*]*)
(bind-lib libGL glBindFragDataLocation [void,GLuint,GLuint,GLchar*]*)
(bind-lib libGL glGetFragDataLocation [GLint,GLuint,GLchar*]*)
(bind-lib libGL glUniform1ui [void,GLint,GLuint]*)
(bind-lib libGL glUniform2ui [void,GLint,GLuint,GLuint]*)
(bind-lib libGL glUniform3ui [void,GLint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glUniform4ui [void,GLint,GLuint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glUniform1uiv [void,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glUniform2uiv [void,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glUniform3uiv [void,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glUniform4uiv [void,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glTexParameterIiv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glTexParameterIuiv [void,GLenum,GLenum,GLuint*]*)
(bind-lib libGL glGetTexParameterIiv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glGetTexParameterIuiv [void,GLenum,GLenum,GLuint*]*)
(bind-lib libGL glClearBufferiv [void,GLenum,GLint,GLint*]*)
(bind-lib libGL glClearBufferuiv [void,GLenum,GLint,GLuint*]*)
(bind-lib libGL glClearBufferfv [void,GLenum,GLint,GLfloat*]*)
(bind-lib libGL glClearBufferfi [void,GLenum,GLint,GLfloat,GLint]*)
(bind-lib libGL glGetStringi [GLubyte*,GLenum,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLCOLORMASKIPROC [void,GLuint,GLboolean,GLboolean,GLboolean,GLboolean]*)
(bind-alias PFNGLGETBOOLEANI_VPROC [void,GLenum,GLuint,GLboolean*]*)
(bind-alias PFNGLGETINTEGERI_VPROC [void,GLenum,GLuint,GLint*]*)
(bind-alias PFNGLENABLEIPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDISABLEIPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLISENABLEDIPROC [GLboolean,GLenum,GLuint]*)
(bind-alias PFNGLBEGINTRANSFORMFEEDBACKPROC [void,GLenum]*)
(bind-alias PFNGLENDTRANSFORMFEEDBACKPROC [void]*)
(bind-alias PFNGLBINDBUFFERRANGEPROC [void,GLenum,GLuint,GLuint,GLintptr,GLsizeiptr]*)
(bind-alias PFNGLBINDBUFFERBASEPROC [void,GLenum,GLuint,GLuint]*)
(bind-alias PFNGLTRANSFORMFEEDBACKVARYINGSPROC [void,GLuint,GLsizei,GLchar**,GLenum]*)
(bind-alias PFNGLGETTRANSFORMFEEDBACKVARYINGPROC [void,GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*]*)
(bind-alias PFNGLCLAMPCOLORPROC [void,GLenum,GLenum]*)
(bind-alias PFNGLBEGINCONDITIONALRENDERPROC [void,GLuint,GLenum]*)
(bind-alias PFNGLENDCONDITIONALRENDERPROC [void]*)
(bind-alias PFNGLVERTEXATTRIBIPOINTERPROC [void,GLuint,GLint,GLenum,GLsizei,GLvoid*]*)
(bind-alias PFNGLGETVERTEXATTRIBIIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETVERTEXATTRIBIUIVPROC [void,GLuint,GLenum,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBI1IPROC [void,GLuint,GLint]*)
(bind-alias PFNGLVERTEXATTRIBI2IPROC [void,GLuint,GLint,GLint]*)
(bind-alias PFNGLVERTEXATTRIBI3IPROC [void,GLuint,GLint,GLint,GLint]*)
(bind-alias PFNGLVERTEXATTRIBI4IPROC [void,GLuint,GLint,GLint,GLint,GLint]*)
(bind-alias PFNGLVERTEXATTRIBI1UIPROC [void,GLuint,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBI2UIPROC [void,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBI3UIPROC [void,GLuint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBI4UIPROC [void,GLuint,GLuint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBI1IVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIBI2IVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIBI3IVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIBI4IVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLVERTEXATTRIBI1UIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBI2UIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBI3UIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBI4UIVPROC [void,GLuint,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBI4BVPROC [void,GLuint,GLbyte*]*)
(bind-alias PFNGLVERTEXATTRIBI4SVPROC [void,GLuint,GLshort*]*)
(bind-alias PFNGLVERTEXATTRIBI4UBVPROC [void,GLuint,GLubyte*]*)
(bind-alias PFNGLVERTEXATTRIBI4USVPROC [void,GLuint,GLushort*]*)
(bind-alias PFNGLGETUNIFORMUIVPROC [void,GLuint,GLint,GLuint*]*)
(bind-alias PFNGLBINDFRAGDATALOCATIONPROC [void,GLuint,GLuint,GLchar*]*)
(bind-alias PFNGLGETFRAGDATALOCATIONPROC [GLint,GLuint,GLchar*]*)
(bind-alias PFNGLUNIFORM1UIPROC [void,GLint,GLuint]*)
(bind-alias PFNGLUNIFORM2UIPROC [void,GLint,GLuint,GLuint]*)
(bind-alias PFNGLUNIFORM3UIPROC [void,GLint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLUNIFORM4UIPROC [void,GLint,GLuint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLUNIFORM1UIVPROC [void,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLUNIFORM2UIVPROC [void,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLUNIFORM3UIVPROC [void,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLUNIFORM4UIVPROC [void,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLTEXPARAMETERIIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLTEXPARAMETERIUIVPROC [void,GLenum,GLenum,GLuint*]*)
(bind-alias PFNGLGETTEXPARAMETERIIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLGETTEXPARAMETERIUIVPROC [void,GLenum,GLenum,GLuint*]*)
(bind-alias PFNGLCLEARBUFFERIVPROC [void,GLenum,GLint,GLint*]*)
(bind-alias PFNGLCLEARBUFFERUIVPROC [void,GLenum,GLint,GLuint*]*)
(bind-alias PFNGLCLEARBUFFERFVPROC [void,GLenum,GLint,GLfloat*]*)
(bind-alias PFNGLCLEARBUFFERFIPROC [void,GLenum,GLint,GLfloat,GLint]*)
(bind-alias PFNGLGETSTRINGIPROC [GLubyte*,GLenum,GLuint]*)
;; #endif

;; #ifndef GL_VERSION_3_1
(bind-val GL_VERSION_3_1 i32 1)
;; /* OpenGL 3.1 also reuses entry points from these extensions: */
;; /* ARB_copy_buffer */
;; /* ARB_uniform_buffer_object */
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glDrawArraysInstanced [void,GLenum,GLint,GLsizei,GLsizei]*)
(bind-lib libGL glDrawElementsInstanced [void,GLenum,GLsizei,GLenum,GLvoid*,GLsizei]*)
(bind-lib libGL glTexBuffer [void,GLenum,GLenum,GLuint]*)
(bind-lib libGL glPrimitiveRestartIndex [void,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLDRAWARRAYSINSTANCEDPROC [void,GLenum,GLint,GLsizei,GLsizei]*)
(bind-alias PFNGLDRAWELEMENTSINSTANCEDPROC [void,GLenum,GLsizei,GLenum,GLvoid*,GLsizei]*)
(bind-alias PFNGLTEXBUFFERPROC [void,GLenum,GLenum,GLuint]*)
(bind-alias PFNGLPRIMITIVERESTARTINDEXPROC [void,GLuint]*)
;; #endif

;; #ifndef GL_VERSION_3_2
(bind-val GL_VERSION_3_2 i32 1)
;; /* OpenGL 3.2 also reuses entry points from these extensions: */
;; /* ARB_draw_elements_base_vertex */
;; /* ARB_provoking_vertex */
;; /* ARB_sync */
;; /* ARB_texture_multisample */
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGetInteger64i_v [void,GLenum,GLuint,GLint64*]*)
(bind-lib libGL glGetBufferParameteri64v [void,GLenum,GLenum,GLint64*]*)
(bind-lib libGL glFramebufferTexture [void,GLenum,GLenum,GLuint,GLint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGETINTEGER64I_VPROC [void,GLenum,GLuint,GLint64*]*)
(bind-alias PFNGLGETBUFFERPARAMETERI64VPROC [void,GLenum,GLenum,GLint64*]*)
(bind-alias PFNGLFRAMEBUFFERTEXTUREPROC [void,GLenum,GLenum,GLuint,GLint]*)
;; #endif

;; #ifndef GL_VERSION_3_3
(bind-val GL_VERSION_3_3 i32 1)
;; /* OpenGL 3.3 also reuses entry points from these extensions: */
;; /* ARB_blend_func_extended */
;; /* ARB_sampler_objects */
;; /* ARB_explicit_attrib_location, but it has none */
;; /* ARB_occlusion_query2 (no entry points) */
;; /* ARB_shader_bit_encoding (no entry points) */
;; /* ARB_texture_rgb10_a2ui (no entry points) */
;; /* ARB_texture_swizzle (no entry points) */
;; /* ARB_timer_query */
;; /* ARB_vertex_type_2_10_10_10_rev */
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glVertexAttribDivisor [void,GLuint,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLVERTEXATTRIBDIVISORPROC [void,GLuint,GLuint]*)
;; #endif

;; #ifndef GL_VERSION_4_0
(bind-val GL_VERSION_4_0 i32 1)
;; /* OpenGL 4.0 also reuses entry points from these extensions: */
;; /* ARB_texture_query_lod (no entry points) */
;; /* ARB_draw_indirect */
;; /* ARB_gpu_shader5 (no entry points) */
;; /* ARB_gpu_shader_fp64 */
;; /* ARB_shader_subroutine */
;; /* ARB_tessellation_shader */
;; /* ARB_texture_buffer_object_rgb32 (no entry points) */
;; /* ARB_texture_cube_map_array (no entry points) */
;; /* ARB_texture_gather (no entry points) */
;; /* ARB_transform_feedback2 */
;; /* ARB_transform_feedback3 */
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glMinSampleShading [void,GLfloat]*)
(bind-lib libGL glBlendEquationi [void,GLuint,GLenum]*)
(bind-lib libGL glBlendEquationSeparatei [void,GLuint,GLenum,GLenum]*)
(bind-lib libGL glBlendFunci [void,GLuint,GLenum,GLenum]*)
(bind-lib libGL glBlendFuncSeparatei [void,GLuint,GLenum,GLenum,GLenum,GLenum]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLMINSAMPLESHADINGPROC [void,GLfloat]*)
(bind-alias PFNGLBLENDEQUATIONIPROC [void,GLuint,GLenum]*)
(bind-alias PFNGLBLENDEQUATIONSEPARATEIPROC [void,GLuint,GLenum,GLenum]*)
(bind-alias PFNGLBLENDFUNCIPROC [void,GLuint,GLenum,GLenum]*)
(bind-alias PFNGLBLENDFUNCSEPARATEIPROC [void,GLuint,GLenum,GLenum,GLenum,GLenum]*)
;; #endif

;; #ifndef GL_VERSION_4_1
(bind-val GL_VERSION_4_1 i32 1)
;; /* OpenGL 4.1 reuses entry points from these extensions: */
;; /* ARB_ES2_compatibility */
;; /* ARB_get_program_binary */
;; /* ARB_separate_shader_objects */
;; /* ARB_shader_precision (no entry points) */
;; /* ARB_vertex_attrib_64bit */
;; /* ARB_viewport_array */
;; #endif

;; #ifndef GL_ARB_depth_buffer_float
(bind-val GL_ARB_depth_buffer_float i32 1)
;; #endif

;; #ifndef GL_ARB_framebuffer_object
(bind-val GL_ARB_framebuffer_object i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glIsRenderbuffer [GLboolean,GLuint]*)
(bind-lib libGL glBindRenderbuffer [void,GLenum,GLuint]*)
(bind-lib libGL glDeleteRenderbuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenRenderbuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glRenderbufferStorage [void,GLenum,GLenum,GLsizei,GLsizei]*)
(bind-lib libGL glGetRenderbufferParameteriv [void,GLenum,GLenum,GLint*]*)
(bind-lib libGL glIsFramebuffer [GLboolean,GLuint]*)
(bind-lib libGL glBindFramebuffer [void,GLenum,GLuint]*)
(bind-lib libGL glDeleteFramebuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenFramebuffers [void,GLsizei,GLuint*]*)
(bind-lib libGL glCheckFramebufferStatus [GLenum,GLenum]*)
(bind-lib libGL glFramebufferTexture1D [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
(bind-lib libGL glFramebufferTexture2D [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
(bind-lib libGL glFramebufferTexture3D [void,GLenum,GLenum,GLenum,GLuint,GLint,GLint]*)
(bind-lib libGL glFramebufferRenderbuffer [void,GLenum,GLenum,GLenum,GLuint]*)
(bind-lib libGL glGetFramebufferAttachmentParameteriv [void,GLenum,GLenum,GLenum,GLint*]*)
(bind-lib libGL glGenerateMipmap [void,GLenum]*)
(bind-lib libGL glBlitFramebuffer [void,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum]*)
(bind-lib libGL glRenderbufferStorageMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei]*)
(bind-lib libGL glFramebufferTextureLayer [void,GLenum,GLenum,GLuint,GLint,GLint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLISRENDERBUFFERPROC [GLboolean,GLuint]*)
(bind-alias PFNGLBINDRENDERBUFFERPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDELETERENDERBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENRENDERBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLRENDERBUFFERSTORAGEPROC [void,GLenum,GLenum,GLsizei,GLsizei]*)
(bind-alias PFNGLGETRENDERBUFFERPARAMETERIVPROC [void,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLISFRAMEBUFFERPROC [GLboolean,GLuint]*)
(bind-alias PFNGLBINDFRAMEBUFFERPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDELETEFRAMEBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENFRAMEBUFFERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLCHECKFRAMEBUFFERSTATUSPROC [GLenum,GLenum]*)
(bind-alias PFNGLFRAMEBUFFERTEXTURE1DPROC [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
(bind-alias PFNGLFRAMEBUFFERTEXTURE2DPROC [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
(bind-alias PFNGLFRAMEBUFFERTEXTURE3DPROC [void,GLenum,GLenum,GLenum,GLuint,GLint,GLint]*)
(bind-alias PFNGLFRAMEBUFFERRENDERBUFFERPROC [void,GLenum,GLenum,GLenum,GLuint]*)
(bind-alias PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC [void,GLenum,GLenum,GLenum,GLint*]*)
(bind-alias PFNGLGENERATEMIPMAPPROC [void,GLenum]*)
(bind-alias PFNGLBLITFRAMEBUFFERPROC [void,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum]*)
(bind-alias PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei]*)
(bind-alias PFNGLFRAMEBUFFERTEXTURELAYERPROC [void,GLenum,GLenum,GLuint,GLint,GLint]*)
;; #endif

;; #ifndef GL_ARB_framebuffer_sRGB
(bind-val GL_ARB_framebuffer_sRGB i32 1)
;; #endif

;; #ifndef GL_ARB_half_float_vertex
(bind-val GL_ARB_half_float_vertex i32 1)
;; #endif

;; #ifndef GL_ARB_map_buffer_range
(bind-val GL_ARB_map_buffer_range i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glMapBufferRange [GLvoid*,GLenum,GLintptr,GLsizeiptr,GLbitfield]*)
(bind-lib libGL glFlushMappedBufferRange [void,GLenum,GLintptr,GLsizeiptr]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLMAPBUFFERRANGEPROC [GLvoid*,GLenum,GLintptr,GLsizeiptr,GLbitfield]*)
(bind-alias PFNGLFLUSHMAPPEDBUFFERRANGEPROC [void,GLenum,GLintptr,GLsizeiptr]*)
;; #endif

;; #ifndef GL_ARB_texture_compression_rgtc
(bind-val GL_ARB_texture_compression_rgtc i32 1)
;; #endif

;; #ifndef GL_ARB_texture_rg
(bind-val GL_ARB_texture_rg i32 1)
;; #endif

;; #ifndef GL_ARB_vertex_array_object
(bind-val GL_ARB_vertex_array_object i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBindVertexArray [void,GLuint]*)
(bind-lib libGL glDeleteVertexArrays [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenVertexArrays [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsVertexArray [GLboolean,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBINDVERTEXARRAYPROC [void,GLuint]*)
(bind-alias PFNGLDELETEVERTEXARRAYSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENVERTEXARRAYSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISVERTEXARRAYPROC [GLboolean,GLuint]*)
;; #endif

;; #ifndef GL_ARB_uniform_buffer_object
(bind-val GL_ARB_uniform_buffer_object i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGetUniformIndices [void,GLuint,GLsizei,GLchar**,GLuint*]*)
(bind-lib libGL glGetActiveUniformsiv [void,GLuint,GLsizei,GLuint*,GLenum,GLint*]*)
(bind-lib libGL glGetActiveUniformName [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glGetUniformBlockIndex [GLuint,GLuint,GLchar*]*)
(bind-lib libGL glGetActiveUniformBlockiv [void,GLuint,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetActiveUniformBlockName [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glUniformBlockBinding [void,GLuint,GLuint,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGETUNIFORMINDICESPROC [void,GLuint,GLsizei,GLchar**,GLuint*]*)
(bind-alias PFNGLGETACTIVEUNIFORMSIVPROC [void,GLuint,GLsizei,GLuint*,GLenum,GLint*]*)
(bind-alias PFNGLGETACTIVEUNIFORMNAMEPROC [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLGETUNIFORMBLOCKINDEXPROC [GLuint,GLuint,GLchar*]*)
(bind-alias PFNGLGETACTIVEUNIFORMBLOCKIVPROC [void,GLuint,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLUNIFORMBLOCKBINDINGPROC [void,GLuint,GLuint,GLuint]*)
;; #endif

;; #ifndef GL_ARB_copy_buffer
(bind-val GL_ARB_copy_buffer i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glCopyBufferSubData [void,GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLCOPYBUFFERSUBDATAPROC [void,GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr]*)
;; #endif

;; #ifndef GL_ARB_depth_clamp
(bind-val GL_ARB_depth_clamp i32 1)
;; #endif

;; #ifndef GL_ARB_draw_elements_base_vertex
(bind-val GL_ARB_draw_elements_base_vertex i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glDrawElementsBaseVertex [void,GLenum,GLsizei,GLenum,GLvoid*,GLint]*)
(bind-lib libGL glDrawRangeElementsBaseVertex [void,GLenum,GLuint,GLuint,GLsizei,GLenum,GLvoid*,GLint]*)
(bind-lib libGL glDrawElementsInstancedBaseVertex [void,GLenum,GLsizei,GLenum,GLvoid*,GLsizei,GLint]*)
(bind-lib libGL glMultiDrawElementsBaseVertex [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei,GLint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLDRAWELEMENTSBASEVERTEXPROC [void,GLenum,GLsizei,GLenum,GLvoid*,GLint]*)
(bind-alias PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC [void,GLenum,GLuint,GLuint,GLsizei,GLenum,GLvoid*,GLint]*)
(bind-alias PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC [void,GLenum,GLsizei,GLenum,GLvoid*,GLsizei,GLint]*)
(bind-alias PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei,GLint*]*)
;; #endif

;; #ifndef GL_ARB_fragment_coord_conventions
(bind-val GL_ARB_fragment_coord_conventions i32 1)
;; #endif

;; #ifndef GL_ARB_provoking_vertex
(bind-val GL_ARB_provoking_vertex i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glProvokingVertex [void,GLenum]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLPROVOKINGVERTEXPROC [void,GLenum]*)
;; #endif

;; #ifndef GL_ARB_seamless_cube_map
(bind-val GL_ARB_seamless_cube_map i32 1)
;; #endif

;; #ifndef GL_ARB_sync
(bind-val GL_ARB_sync i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glFenceSync [GLsync,GLenum,GLbitfield]*)
(bind-lib libGL glIsSync [GLboolean,GLsync]*)
(bind-lib libGL glDeleteSync [void,GLsync]*)
(bind-lib libGL glClientWaitSync [GLenum,GLsync,GLbitfield,GLuint64]*)
(bind-lib libGL glWaitSync [void,GLsync,GLbitfield,GLuint64]*)
(bind-lib libGL glGetInteger64v [void,GLenum,GLint64*]*)
(bind-lib libGL glGetSynciv [void,GLsync,GLenum,GLsizei,GLsizei*,GLint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLFENCESYNCPROC [GLsync,GLenum,GLbitfield]*)
(bind-alias PFNGLISSYNCPROC [GLboolean,GLsync]*)
(bind-alias PFNGLDELETESYNCPROC [void,GLsync]*)
(bind-alias PFNGLCLIENTWAITSYNCPROC [GLenum,GLsync,GLbitfield,GLuint64]*)
(bind-alias PFNGLWAITSYNCPROC [void,GLsync,GLbitfield,GLuint64]*)
(bind-alias PFNGLGETINTEGER64VPROC [void,GLenum,GLint64*]*)
(bind-alias PFNGLGETSYNCIVPROC [void,GLsync,GLenum,GLsizei,GLsizei*,GLint*]*)
;; #endif

;; #ifndef GL_ARB_texture_multisample
(bind-val GL_ARB_texture_multisample i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glTexImage2DMultisample [void,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLboolean]*)
(bind-lib libGL glTexImage3DMultisample [void,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLsizei,GLboolean]*)
(bind-lib libGL glGetMultisamplefv [void,GLenum,GLuint,GLfloat*]*)
(bind-lib libGL glSampleMaski [void,GLuint,GLbitfield]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLTEXIMAGE2DMULTISAMPLEPROC [void,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLboolean]*)
(bind-alias PFNGLTEXIMAGE3DMULTISAMPLEPROC [void,GLenum,GLsizei,GLint,GLsizei,GLsizei,GLsizei,GLboolean]*)
(bind-alias PFNGLGETMULTISAMPLEFVPROC [void,GLenum,GLuint,GLfloat*]*)
(bind-alias PFNGLSAMPLEMASKIPROC [void,GLuint,GLbitfield]*)
;; #endif

;; #ifndef GL_ARB_vertex_array_bgra
(bind-val GL_ARB_vertex_array_bgra i32 1)
;; #endif

;; #ifndef GL_ARB_texture_query_lod
(bind-val GL_ARB_texture_query_lod i32 1)
;; #endif

;; #ifndef GL_ARB_blend_func_extended
(bind-val GL_ARB_blend_func_extended i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBindFragDataLocationIndexed [void,GLuint,GLuint,GLuint,GLchar*]*)
(bind-lib libGL glGetFragDataIndex [GLint,GLuint,GLchar*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBINDFRAGDATALOCATIONINDEXEDPROC [void,GLuint,GLuint,GLuint,GLchar*]*)
(bind-alias PFNGLGETFRAGDATAINDEXPROC [GLint,GLuint,GLchar*]*)
;; #endif

;; #ifndef GL_ARB_explicit_attrib_location
(bind-val GL_ARB_explicit_attrib_location i32 1)
;; #endif

;; #ifndef GL_ARB_occlusion_query2
(bind-val GL_ARB_occlusion_query2 i32 1)
;; #endif

;; #ifndef GL_ARB_sampler_objects
(bind-val GL_ARB_sampler_objects i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGenSamplers [void,GLsizei,GLuint*]*)
(bind-lib libGL glDeleteSamplers [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsSampler [GLboolean,GLuint]*)
(bind-lib libGL glBindSampler [void,GLuint,GLuint]*)
(bind-lib libGL glSamplerParameteri [void,GLuint,GLenum,GLint]*)
(bind-lib libGL glSamplerParameteriv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glSamplerParameterf [void,GLuint,GLenum,GLfloat]*)
(bind-lib libGL glSamplerParameterfv [void,GLuint,GLenum,GLfloat*]*)
(bind-lib libGL glSamplerParameterIiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glSamplerParameterIuiv [void,GLuint,GLenum,GLuint*]*)
(bind-lib libGL glGetSamplerParameteriv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetSamplerParameterIiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetSamplerParameterfv [void,GLuint,GLenum,GLfloat*]*)
(bind-lib libGL glGetSamplerParameterIuiv [void,GLuint,GLenum,GLuint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGENSAMPLERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLDELETESAMPLERSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISSAMPLERPROC [GLboolean,GLuint]*)
(bind-alias PFNGLBINDSAMPLERPROC [void,GLuint,GLuint]*)
(bind-alias PFNGLSAMPLERPARAMETERIPROC [void,GLuint,GLenum,GLint]*)
(bind-alias PFNGLSAMPLERPARAMETERIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLSAMPLERPARAMETERFPROC [void,GLuint,GLenum,GLfloat]*)
(bind-alias PFNGLSAMPLERPARAMETERFVPROC [void,GLuint,GLenum,GLfloat*]*)
(bind-alias PFNGLSAMPLERPARAMETERIIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLSAMPLERPARAMETERIUIVPROC [void,GLuint,GLenum,GLuint*]*)
(bind-alias PFNGLGETSAMPLERPARAMETERIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETSAMPLERPARAMETERIIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETSAMPLERPARAMETERFVPROC [void,GLuint,GLenum,GLfloat*]*)
(bind-alias PFNGLGETSAMPLERPARAMETERIUIVPROC [void,GLuint,GLenum,GLuint*]*)
;; #endif

;; #ifndef GL_ARB_shader_bit_encoding
(bind-val GL_ARB_shader_bit_encoding i32 1)
;; #endif

;; #ifndef GL_ARB_texture_rgb10_a2ui
(bind-val GL_ARB_texture_rgb10_a2ui i32 1)
;; #endif

;; #ifndef GL_ARB_texture_swizzle
(bind-val GL_ARB_texture_swizzle i32 1)
;; #endif

;; #ifndef GL_ARB_timer_query
(bind-val GL_ARB_timer_query i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glQueryCounter [void,GLuint,GLenum]*)
(bind-lib libGL glGetQueryObjecti64v [void,GLuint,GLenum,GLint64*]*)
(bind-lib libGL glGetQueryObjectui64v [void,GLuint,GLenum,GLuint64*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLQUERYCOUNTERPROC [void,GLuint,GLenum]*)
(bind-alias PFNGLGETQUERYOBJECTI64VPROC [void,GLuint,GLenum,GLint64*]*)
(bind-alias PFNGLGETQUERYOBJECTUI64VPROC [void,GLuint,GLenum,GLuint64*]*)
;; #endif

;; #ifndef GL_ARB_vertex_type_2_10_10_10_rev
(bind-val GL_ARB_vertex_type_2_10_10_10_rev i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glVertexAttribP1ui [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-lib libGL glVertexAttribP1uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-lib libGL glVertexAttribP2ui [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-lib libGL glVertexAttribP2uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-lib libGL glVertexAttribP3ui [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-lib libGL glVertexAttribP3uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-lib libGL glVertexAttribP4ui [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-lib libGL glVertexAttribP4uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLVERTEXATTRIBP1UIPROC [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBP1UIVPROC [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBP2UIPROC [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBP2UIVPROC [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBP3UIPROC [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBP3UIVPROC [void,GLuint,GLenum,GLboolean,GLuint*]*)
(bind-alias PFNGLVERTEXATTRIBP4UIPROC [void,GLuint,GLenum,GLboolean,GLuint]*)
(bind-alias PFNGLVERTEXATTRIBP4UIVPROC [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; #endif

;; #ifndef GL_ARB_draw_indirect
(bind-val GL_ARB_draw_indirect i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glDrawArraysIndirect [void,GLenum,GLvoid*]*)
(bind-lib libGL glDrawElementsIndirect [void,GLenum,GLenum,GLvoid*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLDRAWARRAYSINDIRECTPROC [void,GLenum,GLvoid*]*)
(bind-alias PFNGLDRAWELEMENTSINDIRECTPROC [void,GLenum,GLenum,GLvoid*]*)
;; #endif

;; #ifndef GL_ARB_gpu_shader5
(bind-val GL_ARB_gpu_shader5 i32 1)
;; #endif

;; #ifndef GL_ARB_gpu_shader_fp64
(bind-val GL_ARB_gpu_shader_fp64 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glUniform1d [void,GLint,GLdouble]*)
(bind-lib libGL glUniform2d [void,GLint,GLdouble,GLdouble]*)
(bind-lib libGL glUniform3d [void,GLint,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glUniform4d [void,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glUniform1dv [void,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glUniform2dv [void,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glUniform3dv [void,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glUniform4dv [void,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glUniformMatrix2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix2x3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix2x4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix3x2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix3x4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix4x2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glUniformMatrix4x3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glGetUniformdv [void,GLuint,GLint,GLdouble*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLUNIFORM1DPROC [void,GLint,GLdouble]*)
(bind-alias PFNGLUNIFORM2DPROC [void,GLint,GLdouble,GLdouble]*)
(bind-alias PFNGLUNIFORM3DPROC [void,GLint,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLUNIFORM4DPROC [void,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLUNIFORM1DVPROC [void,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLUNIFORM2DVPROC [void,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLUNIFORM3DVPROC [void,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLUNIFORM4DVPROC [void,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX2DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX3DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX4DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX2X3DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX2X4DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX3X2DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX3X4DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX4X2DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLUNIFORMMATRIX4X3DVPROC [void,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLGETUNIFORMDVPROC [void,GLuint,GLint,GLdouble*]*)
;; #endif

;; #ifndef GL_ARB_shader_subroutine
(bind-val GL_ARB_shader_subroutine i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGetSubroutineUniformLocation [GLint,GLuint,GLenum,GLchar*]*)
(bind-lib libGL glGetSubroutineIndex [GLuint,GLuint,GLenum,GLchar*]*)
(bind-lib libGL glGetActiveSubroutineUniformiv [void,GLuint,GLenum,GLuint,GLenum,GLint*]*)
(bind-lib libGL glGetActiveSubroutineUniformName [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glGetActiveSubroutineName [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-lib libGL glUniformSubroutinesuiv [void,GLenum,GLsizei,GLuint*]*)
(bind-lib libGL glGetUniformSubroutineuiv [void,GLenum,GLint,GLuint*]*)
(bind-lib libGL glGetProgramStageiv [void,GLuint,GLenum,GLenum,GLint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC [GLint,GLuint,GLenum,GLchar*]*)
(bind-alias PFNGLGETSUBROUTINEINDEXPROC [GLuint,GLuint,GLenum,GLchar*]*)
(bind-alias PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC [void,GLuint,GLenum,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLGETACTIVESUBROUTINENAMEPROC [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
(bind-alias PFNGLUNIFORMSUBROUTINESUIVPROC [void,GLenum,GLsizei,GLuint*]*)
(bind-alias PFNGLGETUNIFORMSUBROUTINEUIVPROC [void,GLenum,GLint,GLuint*]*)
(bind-alias PFNGLGETPROGRAMSTAGEIVPROC [void,GLuint,GLenum,GLenum,GLint*]*)
;; #endif

;; #ifndef GL_ARB_tessellation_shader
(bind-val GL_ARB_tessellation_shader i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glPatchParameteri [void,GLenum,GLint]*)
(bind-lib libGL glPatchParameterfv [void,GLenum,GLfloat*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLPATCHPARAMETERIPROC [void,GLenum,GLint]*)
(bind-alias PFNGLPATCHPARAMETERFVPROC [void,GLenum,GLfloat*]*)
;; #endif

;; #ifndef GL_ARB_texture_buffer_object_rgb32
(bind-val GL_ARB_texture_buffer_object_rgb32 i32 1)
;; #endif

;; #ifndef GL_ARB_transform_feedback2
(bind-val GL_ARB_transform_feedback2 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glBindTransformFeedback [void,GLenum,GLuint]*)
(bind-lib libGL glDeleteTransformFeedbacks [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenTransformFeedbacks [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsTransformFeedback [GLboolean,GLuint]*)
(bind-lib libGL glPauseTransformFeedback [void]*)
(bind-lib libGL glResumeTransformFeedback [void]*)
(bind-lib libGL glDrawTransformFeedback [void,GLenum,GLuint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLBINDTRANSFORMFEEDBACKPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLDELETETRANSFORMFEEDBACKSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENTRANSFORMFEEDBACKSPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISTRANSFORMFEEDBACKPROC [GLboolean,GLuint]*)
(bind-alias PFNGLPAUSETRANSFORMFEEDBACKPROC [void]*)
(bind-alias PFNGLRESUMETRANSFORMFEEDBACKPROC [void]*)
(bind-alias PFNGLDRAWTRANSFORMFEEDBACKPROC [void,GLenum,GLuint]*)
;; #endif

;; #ifndef GL_ARB_transform_feedback3
(bind-val GL_ARB_transform_feedback3 i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glDrawTransformFeedbackStream [void,GLenum,GLuint,GLuint]*)
(bind-lib libGL glBeginQueryIndexed [void,GLenum,GLuint,GLuint]*)
(bind-lib libGL glEndQueryIndexed [void,GLenum,GLuint]*)
(bind-lib libGL glGetQueryIndexediv [void,GLenum,GLuint,GLenum,GLint*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC [void,GLenum,GLuint,GLuint]*)
(bind-alias PFNGLBEGINQUERYINDEXEDPROC [void,GLenum,GLuint,GLuint]*)
(bind-alias PFNGLENDQUERYINDEXEDPROC [void,GLenum,GLuint]*)
(bind-alias PFNGLGETQUERYINDEXEDIVPROC [void,GLenum,GLuint,GLenum,GLint*]*)
;; #endif

;; #ifndef GL_ARB_ES2_compatibility
(bind-val GL_ARB_ES2_compatibility i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glReleaseShaderCompiler [void]*)
(bind-lib libGL glShaderBinary [void,GLsizei,GLuint*,GLenum,GLvoid*,GLsizei]*)
(bind-lib libGL glGetShaderPrecisionFormat [void,GLenum,GLenum,GLint*,GLint*]*)
(bind-lib libGL glDepthRangef [void,GLclampf,GLclampf]*)
(bind-lib libGL glClearDepthf [void,GLclampf]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLRELEASESHADERCOMPILERPROC [void]*)
(bind-alias PFNGLSHADERBINARYPROC [void,GLsizei,GLuint*,GLenum,GLvoid*,GLsizei]*)
(bind-alias PFNGLGETSHADERPRECISIONFORMATPROC [void,GLenum,GLenum,GLint*,GLint*]*)
(bind-alias PFNGLDEPTHRANGEFPROC [void,GLclampf,GLclampf]*)
(bind-alias PFNGLCLEARDEPTHFPROC [void,GLclampf]*)
;; #endif

;; #ifndef GL_ARB_get_program_binary
(bind-val GL_ARB_get_program_binary i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glGetProgramBinary [void,GLuint,GLsizei,GLsizei*,GLenum*,GLvoid*]*)
(bind-lib libGL glProgramBinary [void,GLuint,GLenum,GLvoid*,GLsizei]*)
(bind-lib libGL glProgramParameteri [void,GLuint,GLenum,GLint]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLGETPROGRAMBINARYPROC [void,GLuint,GLsizei,GLsizei*,GLenum*,GLvoid*]*)
(bind-alias PFNGLPROGRAMBINARYPROC [void,GLuint,GLenum,GLvoid*,GLsizei]*)
(bind-alias PFNGLPROGRAMPARAMETERIPROC [void,GLuint,GLenum,GLint]*)
;; #endif

;; #ifndef GL_ARB_separate_shader_objects
(bind-val GL_ARB_separate_shader_objects i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glUseProgramStages [void,GLuint,GLbitfield,GLuint]*)
(bind-lib libGL glActiveShaderProgram [void,GLuint,GLuint]*)
(bind-lib libGL glCreateShaderProgramv [GLuint,GLenum,GLsizei,GLchar**]*)
(bind-lib libGL glBindProgramPipeline [void,GLuint]*)
(bind-lib libGL glDeleteProgramPipelines [void,GLsizei,GLuint*]*)
(bind-lib libGL glGenProgramPipelines [void,GLsizei,GLuint*]*)
(bind-lib libGL glIsProgramPipeline [GLboolean,GLuint]*)
(bind-lib libGL glGetProgramPipelineiv [void,GLuint,GLenum,GLint*]*)
(bind-lib libGL glProgramUniform1i [void,GLuint,GLint,GLint]*)
(bind-lib libGL glProgramUniform1iv [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-lib libGL glProgramUniform1f [void,GLuint,GLint,GLfloat]*)
(bind-lib libGL glProgramUniform1fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glProgramUniform1d [void,GLuint,GLint,GLdouble]*)
(bind-lib libGL glProgramUniform1dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glProgramUniform1ui [void,GLuint,GLint,GLuint]*)
(bind-lib libGL glProgramUniform1uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glProgramUniform2i [void,GLuint,GLint,GLint,GLint]*)
(bind-lib libGL glProgramUniform2iv [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-lib libGL glProgramUniform2f [void,GLuint,GLint,GLfloat,GLfloat]*)
(bind-lib libGL glProgramUniform2fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glProgramUniform2d [void,GLuint,GLint,GLdouble,GLdouble]*)
(bind-lib libGL glProgramUniform2dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glProgramUniform2ui [void,GLuint,GLint,GLuint,GLuint]*)
(bind-lib libGL glProgramUniform2uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glProgramUniform3i [void,GLuint,GLint,GLint,GLint,GLint]*)
(bind-lib libGL glProgramUniform3iv [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-lib libGL glProgramUniform3f [void,GLuint,GLint,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glProgramUniform3fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glProgramUniform3d [void,GLuint,GLint,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glProgramUniform3dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glProgramUniform3ui [void,GLuint,GLint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glProgramUniform3uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glProgramUniform4i [void,GLuint,GLint,GLint,GLint,GLint,GLint]*)
(bind-lib libGL glProgramUniform4iv [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-lib libGL glProgramUniform4f [void,GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glProgramUniform4fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-lib libGL glProgramUniform4d [void,GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glProgramUniform4dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-lib libGL glProgramUniform4ui [void,GLuint,GLint,GLuint,GLuint,GLuint,GLuint]*)
(bind-lib libGL glProgramUniform4uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-lib libGL glProgramUniformMatrix2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix2x3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix3x2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix2x4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix4x2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix3x4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix4x3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-lib libGL glProgramUniformMatrix2x3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix3x2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix2x4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix4x2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix3x4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glProgramUniformMatrix4x3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-lib libGL glValidateProgramPipeline [void,GLuint]*)
(bind-lib libGL glGetProgramPipelineInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLUSEPROGRAMSTAGESPROC [void,GLuint,GLbitfield,GLuint]*)
(bind-alias PFNGLACTIVESHADERPROGRAMPROC [void,GLuint,GLuint]*)
(bind-alias PFNGLCREATESHADERPROGRAMVPROC [GLuint,GLenum,GLsizei,GLchar**]*)
(bind-alias PFNGLBINDPROGRAMPIPELINEPROC [void,GLuint]*)
(bind-alias PFNGLDELETEPROGRAMPIPELINESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLGENPROGRAMPIPELINESPROC [void,GLsizei,GLuint*]*)
(bind-alias PFNGLISPROGRAMPIPELINEPROC [GLboolean,GLuint]*)
(bind-alias PFNGLGETPROGRAMPIPELINEIVPROC [void,GLuint,GLenum,GLint*]*)
(bind-alias PFNGLPROGRAMUNIFORM1IPROC [void,GLuint,GLint,GLint]*)
(bind-alias PFNGLPROGRAMUNIFORM1IVPROC [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLPROGRAMUNIFORM1FPROC [void,GLuint,GLint,GLfloat]*)
(bind-alias PFNGLPROGRAMUNIFORM1FVPROC [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORM1DPROC [void,GLuint,GLint,GLdouble]*)
(bind-alias PFNGLPROGRAMUNIFORM1DVPROC [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORM1UIPROC [void,GLuint,GLint,GLuint]*)
(bind-alias PFNGLPROGRAMUNIFORM1UIVPROC [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLPROGRAMUNIFORM2IPROC [void,GLuint,GLint,GLint,GLint]*)
(bind-alias PFNGLPROGRAMUNIFORM2IVPROC [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLPROGRAMUNIFORM2FPROC [void,GLuint,GLint,GLfloat,GLfloat]*)
(bind-alias PFNGLPROGRAMUNIFORM2FVPROC [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORM2DPROC [void,GLuint,GLint,GLdouble,GLdouble]*)
(bind-alias PFNGLPROGRAMUNIFORM2DVPROC [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORM2UIPROC [void,GLuint,GLint,GLuint,GLuint]*)
(bind-alias PFNGLPROGRAMUNIFORM2UIVPROC [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLPROGRAMUNIFORM3IPROC [void,GLuint,GLint,GLint,GLint,GLint]*)
(bind-alias PFNGLPROGRAMUNIFORM3IVPROC [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLPROGRAMUNIFORM3FPROC [void,GLuint,GLint,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLPROGRAMUNIFORM3FVPROC [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORM3DPROC [void,GLuint,GLint,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLPROGRAMUNIFORM3DVPROC [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORM3UIPROC [void,GLuint,GLint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLPROGRAMUNIFORM3UIVPROC [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLPROGRAMUNIFORM4IPROC [void,GLuint,GLint,GLint,GLint,GLint,GLint]*)
(bind-alias PFNGLPROGRAMUNIFORM4IVPROC [void,GLuint,GLint,GLsizei,GLint*]*)
(bind-alias PFNGLPROGRAMUNIFORM4FPROC [void,GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLPROGRAMUNIFORM4FVPROC [void,GLuint,GLint,GLsizei,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORM4DPROC [void,GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLPROGRAMUNIFORM4DVPROC [void,GLuint,GLint,GLsizei,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORM4UIPROC [void,GLuint,GLint,GLuint,GLuint,GLuint,GLuint]*)
(bind-alias PFNGLPROGRAMUNIFORM4UIVPROC [void,GLuint,GLint,GLsizei,GLuint*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
(bind-alias PFNGLVALIDATEPROGRAMPIPELINEPROC [void,GLuint]*)
(bind-alias PFNGLGETPROGRAMPIPELINEINFOLOGPROC [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; #endif

;; #ifndef GL_ARB_shader_precision
(bind-val GL_ARB_shader_precision i32 1)
;; #endif

;; #ifndef GL_ARB_vertex_attrib_64bit
(bind-val GL_ARB_vertex_attrib_64bit i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glVertexAttribL1d [void,GLuint,GLdouble]*)
(bind-lib libGL glVertexAttribL2d [void,GLuint,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttribL3d [void,GLuint,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttribL4d [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-lib libGL glVertexAttribL1dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttribL2dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttribL3dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttribL4dv [void,GLuint,GLdouble*]*)
(bind-lib libGL glVertexAttribLPointer [void,GLuint,GLint,GLenum,GLsizei,GLvoid*]*)
(bind-lib libGL glGetVertexAttribLdv [void,GLuint,GLenum,GLdouble*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLVERTEXATTRIBL1DPROC [void,GLuint,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIBL2DPROC [void,GLuint,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIBL3DPROC [void,GLuint,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIBL4DPROC [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
(bind-alias PFNGLVERTEXATTRIBL1DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIBL2DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIBL3DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIBL4DVPROC [void,GLuint,GLdouble*]*)
(bind-alias PFNGLVERTEXATTRIBLPOINTERPROC [void,GLuint,GLint,GLenum,GLsizei,GLvoid*]*)
(bind-alias PFNGLGETVERTEXATTRIBLDVPROC [void,GLuint,GLenum,GLdouble*]*)
;; #endif

;; #ifndef GL_ARB_viewport_array
(bind-val GL_ARB_viewport_array i32 1)
;; #ifdef GL3_PROTOTYPES
(bind-lib libGL glViewportArrayv [void,GLuint,GLsizei,GLfloat*]*)
(bind-lib libGL glViewportIndexedf [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-lib libGL glViewportIndexedfv [void,GLuint,GLfloat*]*)
(bind-lib libGL glScissorArrayv [void,GLuint,GLsizei,GLint*]*)
(bind-lib libGL glScissorIndexed [void,GLuint,GLint,GLint,GLsizei,GLsizei]*)
(bind-lib libGL glScissorIndexedv [void,GLuint,GLint*]*)
(bind-lib libGL glDepthRangeArrayv [void,GLuint,GLsizei,GLclampd*]*)
(bind-lib libGL glDepthRangeIndexed [void,GLuint,GLclampd,GLclampd]*)
(bind-lib libGL glGetFloati_v [void,GLenum,GLuint,GLfloat*]*)
(bind-lib libGL glGetDoublei_v [void,GLenum,GLuint,GLdouble*]*)
;; #endif /* GL3_PROTOTYPES */
(bind-alias PFNGLVIEWPORTARRAYVPROC [void,GLuint,GLsizei,GLfloat*]*)
(bind-alias PFNGLVIEWPORTINDEXEDFPROC [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
(bind-alias PFNGLVIEWPORTINDEXEDFVPROC [void,GLuint,GLfloat*]*)
(bind-alias PFNGLSCISSORARRAYVPROC [void,GLuint,GLsizei,GLint*]*)
(bind-alias PFNGLSCISSORINDEXEDPROC [void,GLuint,GLint,GLint,GLsizei,GLsizei]*)
(bind-alias PFNGLSCISSORINDEXEDVPROC [void,GLuint,GLint*]*)
(bind-alias PFNGLDEPTHRANGEARRAYVPROC [void,GLuint,GLsizei,GLclampd*]*)
(bind-alias PFNGLDEPTHRANGEINDEXEDPROC [void,GLuint,GLclampd,GLclampd]*)
(bind-alias PFNGLGETFLOATI_VPROC [void,GLenum,GLuint,GLfloat*]*)
(bind-alias PFNGLGETDOUBLEI_VPROC [void,GLenum,GLuint,GLdouble*]*)
;; some helper functions

;; gl print
(bind-func gl_print_error_with_msg
  (lambda (msg:i8*)
    (let ((err (glGetError)))
      (cond
       ((= err GL_INVALID_ENUM)
        (printf "%s: Invalid Enum\n" msg))
       ((= err GL_INVALID_VALUE)
        (printf "%s: Invalid Value\n" msg))
       ((= err GL_INVALID_OPERATION)
        (printf "%s: Invalid Operation\n" msg))
       ((= err GL_OUT_OF_MEMORY)
        (printf "%s: Out Of Memory\n" msg))
       ((= err GL_INVALID_FRAMEBUFFER_OPERATION)
        (printf "%s: Invalid Framebuffer Operation\n" msg))
       ((= err GL_NO_ERROR)
        1:i32)
       (else
        (printf "%s\n" msg)))
      void)))

(bind-func gl_print_error_no_msg
  (lambda ()
    (gl_print_error_with_msg "OpenGL Error")))

(bind-poly gl_print_error gl_print_error_with_msg)
(bind-poly gl_print_error gl_print_error_no_msg)

(bind-func gl_print_driver_info
  (lambda ()
    (println "--------------------------------------------------")
    (println "Extempore OpenGL driver info")
    (println "--------------------------------------------------")
    (printf "  Vendor:  %s\n" (glGetString GL_VENDOR))
    (printf "Renderer:  %s\n" (glGetString GL_RENDERER))
    (printf " Version:  %s\n" (glGetString GL_VERSION))
    (println "--------------------------------------------------")
    void))

;; Vertex Buffer Object

;; id, type, size (bytes), data
(bind-type VBO <GLuint,GLenum,GLsizeiptr,GLvoid*>)

;; accessors

(bind-func VBO_id
  (lambda (vbo:VBO*)
    (tref vbo 0)))

(bind-func VBO_type
  (lambda (vbo:VBO*)
    (tref vbo 1)))

(bind-func VBO_size
  (lambda (vbo:VBO*)
    (tref vbo 2)))

(bind-func VBO_data
  (lambda (vbo:VBO*)
    (tref vbo 3)))

(bind-func VBO_print
  (lambda (vbo:VBO*)
    (printf "VBO: <id=%d type=%s nbytes=%d data=%p>"
            (tref vbo 0)
            (let ((type (VBO_type vbo)))
              (cond ((= type GL_BYTE) "byte")
                    ((= type GL_SHORT) "short")
                    ((= type GL_INT) "int")
                    ((= type GL_FLOAT) "float")
                    (else "unknown")))
            (tref vbo 2)
            (tref vbo 3))
    void))

(bind-poly print VBO_print)

(bind-func VBO_tostring
  (lambda (vbo:VBO*)
    (let ((s:i8* (salloc 256)))
      (sprintf s "VBO: <id=%d type=%s nbytes=%d data=%p>"
               (tref vbo 0)
               (let ((type (VBO_type vbo)))
                 (cond ((= type GL_BYTE) "byte")
                    ((= type GL_SHORT) "short")
                    ((= type GL_INT) "int")
                    ((= type GL_FLOAT) "float")
                    (else "unknown")))
               (tref vbo 2)
               (tref vbo 3))
      (Str s))))

(bind-poly tostring VBO_tostring)

(bind-func VBO_create_float
  (lambda (buf:float* buflen)
    (let ((vbo:VBO* (zalloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (VBO_print vbo) (printf "\n")
      vbo)))

(bind-func VBO_create_i32
  (lambda (buf:i32* buflen)
    (let ((vbo:VBO* (zalloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_INT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (VBO_print vbo) (printf "\n")
      vbo)))

(bind-poly VBO_create VBO_create_float)
(bind-poly VBO_create VBO_create_i32)

(bind-func VBO_update_data
  "update the full buffer"
  (lambda (vbo:VBO*)
    (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
    (gl_print_error "Error binding VBO")
    (glBufferSubData GL_ARRAY_BUFFER 0 (VBO_size vbo) (VBO_data vbo))
    (gl_print_error "Error updating VBO subdata")
    (glBindBuffer GL_ARRAY_BUFFER 0)))

(bind-func VBO_delete
  (lambda (vbo:VBO*)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 (VBO_id vbo))
      (glDeleteBuffers 1 id)
      (gl_print_error "Error deleting VBO")
      (free vbo))))

;; Vertex Array Object

(bind-type VAO <GLuint>)

(bind-func VAO_id
  (lambda (vao:VAO*)
    (tref vao 0)))

(bind-func VAO_print
  (lambda (vao:VAO*)
    (printf "VAO: id %d" (tref vao 0))
    void))

(bind-poly print VAO_print)

(bind-func VAO_tostring
  (lambda (vao:VAO*)
    (let ((s:i8* (salloc 256)))
      (sprintf s "VAO: id %d" (tref vao 0))
      (Str s))))

(bind-poly tostring VAO_tostring)

(bind-func VAO_create
  (lambda ()
    (let ((vao:VAO* (zalloc))
          (id:GLuint* (salloc)))
      (glGenVertexArrays 1 id)
      (gl_print_error "Error creating VAO")
      (tset! vao 0 (pref id 0))
      vao)))

(bind-func bind_attribute_full
  (lambda (vao:VAO* vbo:VBO* index size stride offset)
    (glBindVertexArray (VAO_id vao))
    (gl_print_error "Error binding VAO")
    (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
    (gl_print_error "Error binding VBO")
    (let ((component_size 4)) ;; for for GL_FLOAT and GL_INT
      (glVertexAttribPointer index
                             size
                             (VBO_type vbo)
                             GL_FALSE
                             (* component_size stride)
                             (pref-ptr (cast null GLvoid*) (* component_size offset))))
    (gl_print_error "Error binding VAO attribute")
    (glEnableVertexAttribArray index)
    (gl_print_error "Error enabling VAO attribute")
    (glBindVertexArray 0)))

(bind-func bind_attribute_packed
  (lambda (vao vbo index size)
    (bind_attribute_full vao vbo index size 0 0)))

(bind-poly bind_attribute bind_attribute_full)
(bind-poly bind_attribute bind_attribute_packed)

(bind-func draw_vertex_array
  (lambda (vao:VAO* draw_mode first_element count)
    (glBindVertexArray (VAO_id vao))
    (gl_print_error "Error binding vertex array")
    (glDrawArrays draw_mode first_element count)
    (gl_print_error "Error drawing vertex array")
    (glBindVertexArray 0)))

(bind-func VAO_delete
  (lambda (vao:VAO*)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 (VAO_id vao))
      (glDeleteVertexArrays 1 id)
      (gl_print_error "Error deleting VAO")
      (free vao))))

;; GL Texture

(bind-alias Texture GLuint)

(bind-func Texture_create
  (lambda ()
    (let ((id:GLuint* (salloc)))
      (glGenTextures 1 id)
      (gl_print_error "Error creating Texture")
      (pref id 0))))

;; (bind-func Texture_bind
;;   (lambda (tex:Texture data:GLvoid*)
;;     (glBindTexture GL_TEXTURE_2D (Texture_id tex))
;;     (glTexImage2D GL_TEXTURE_2D 0 GL_RGB 2 2 0 GL_RGB GL_FLOAT data)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
;;     void))

(bind-func Texture_delete
  (lambda (tex:Texture)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 tex)
      (glDeleteTextures 1 id)
      (gl_print_error "Error deleting Texture"))))

(bind-func bind_image_texture
  (lambda (tex:Texture filename)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 -1)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "couldn't bind_image_texture")
            tex)))))

;; OpenGL shaders

;;                <id    ,type  >
(bind-type Shader <GLuint,GLenum>)
(bind-alias ShaderProgram GLuint)

(bind-func Shader_id
  (lambda (shader:Shader*)
    (tref shader 0)))

(bind-func Shader_type
  (lambda (shader:Shader*)
    (tref shader 1)))

(bind-func Shader_print_info_log
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (shader:Shader*)
      (let ((len_ptr (salloc 1 i32)))
        (glGetShaderInfoLog (Shader_id shader)
                            max_log_length
                            len_ptr
                            logbuf)
        (printf "%s shader info log: %s\n"
                (cond ((= (Shader_type shader) GL_VERTEX_SHADER)
                       "Vert")
                      ((= (Shader_type shader) GL_FRAGMENT_SHADER)
                       "Frag")
                      ((= (Shader_type shader) GL_GEOMETRY_SHADER)
                       "Geom")
                      (else ""))
                (if (= (pref len_ptr 0) 0)
                    "OK"
                    logbuf))
        (if (= (pref len_ptr 0) 0) 0 1)))))

(bind-func ShaderProgram_print_info_log
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (program:ShaderProgram)
      (let ((len_ptr (salloc 1 i32)))
        (glGetProgramInfoLog program
                             max_log_length
                             len_ptr
                             logbuf)
        (printf "Program info log: %s\n"
                (if (= (pref len_ptr 0) 0)
                    "OK"
                    logbuf))
        (if (= (pref len_ptr 0) 0) 0 1)))))

(bind-func Shader_create
  "create (and compile) an OpenGL shader"
  (lambda (source:i8* type:GLenum)
    (if (not (or (= type GL_VERTEX_SHADER)
                 (= type GL_FRAGMENT_SHADER)
                 (= type GL_GEOMETRY_SHADER)))
        (begin (println "Error: shader type must be one of GL_VERTEX_SHADER, GL_FRAGMENT_SHADER or GL_GEOMETRY_SHADER")
               null)
        (let ((shader_id (glCreateShader type))
              (source_ptr:i8** (salloc))
              (shader (Shader shader_id type)))
          (pset! source_ptr 0 source)
          (glShaderSource shader_id 1 source_ptr (cast null i32*))
          (glCompileShader shader_id)
          (Shader_print_info_log shader)
          shader))))

(bind-func ShaderProgram_create_vf
  "compile and link shader program (vert and frag shader)"
  (lambda (vert:Shader* frag:Shader*)
    (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER)
                  (= (Shader_type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert and frag respectively.")
               -1)
        (let ((program (glCreateProgram)))
          (glAttachShader program (Shader_id vert))
          (glAttachShader program (Shader_id frag))
          (glLinkProgram program)
          (ShaderProgram_print_info_log program)
          program))))

(bind-func ShaderProgram_create_vgf
  "compile and link shader program (vert and frag shader)"
  (lambda (vert:Shader* geom:Shader* frag:Shader*)
    (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER)
                  (= (Shader_type geom) GL_GEOMETRY_SHADER)
                  (= (Shader_type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert and frag respectively.")
               -1)
        (let ((program (glCreateProgram)))
          (glAttachShader program (Shader_id vert))
          (glAttachShader program (Shader_id geom))
          (glAttachShader program (Shader_id frag))
          (glLinkProgram program)
          (ShaderProgram_print_info_log program)
          program))))

;; these ones are handy when you want to create a new shader program
;; directly from the sources

(bind-func ShaderProgram_create_vsfs
  "compile and link shader program (vert and frag shader source)"
  (lambda (vsource:i8* fsource:i8*)
    (let ((vert (Shader_create vsource GL_VERTEX_SHADER))
          (frag (Shader_create fsource GL_FRAGMENT_SHADER)))
      (if (or (null? vert) (null? frag))
          -1
          (ShaderProgram_create_vf vert frag)))))

(bind-func ShaderProgram_create_vsgsfs
  "compile and link shader program (vert and frag shader source)"
  (lambda (vsource:i8* gsource:i8* fsource:i8*)
    (let ((vert (Shader_create vsource GL_VERTEX_SHADER))
          (geom (Shader_create vsource GL_GEOMETRY_SHADER))
          (frag (Shader_create fsource GL_FRAGMENT_SHADER)))
      (if (or (null? vert) (null? geom) (null? frag))
          -1
          (ShaderProgram_create_vgf vert geom frag)))))

(bind-poly ShaderProgram_create ShaderProgram_create_vf)
(bind-poly ShaderProgram_create ShaderProgram_create_vgf)
(bind-poly ShaderProgram_create ShaderProgram_create_vsfs)
(bind-poly ShaderProgram_create ShaderProgram_create_vsgsfs)

(impc:aot:insert-footer "xtmgl")
(define *xtmlib-gl-loaded* #t)
