;;; xtlang_test.xtm -- rudimentary unit testing for xtlang code

;; Author: Ben Swift, Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; a test suite for xtlang code which relies on external libraries.
;; Currently, the tests cannot be run with (sys:load
;; "libs/core/xtlang_test.xtm"), because the first failing compilation
;; will stop the evaluation of the file.

;; The way to run all the tests, then, is to use the evaluate-buffer
;; functionality of your editor (in Emacs, bound to C-x C-b by
;; default) to send the forms one at a time to the compiler. After all
;; the tests are run, a summary of the results will be printed to the
;; log.

;;; Code:

(define *func-successes* '((correct)
			   (incorrect)
			   (compile)
			   (no-compile)))

(define-macro (change-test-result category func-sym)
  `(for-each
    (lambda (cat)
      (if (equal? (car cat) ,category)
	  (set-cdr! cat (if (not (member ,func-sym cat))
			    (cons ,func-sym (cdr cat))))
	  (set-cdr! cat (cl:remove ,func-sym (cdr cat)))))
    *func-successes*))

(define-macro (test-xtfunc form . retval)
  `(let ((func-sym (quote ,(car form))))
     (begin
       (change-test-result 'no-compile func-sym)
       (if (defined? func-sym)
	   (begin (change-test-result 'compile func-sym)
		  ,(if (null? retval)
                       `(begin ,form
                               (change-test-result 'correct func-sym))
                       `(if (= ,form ,(car retval))
                            (change-test-result 'correct func-sym)
                            (change-test-result 'incorrect func-sym))))))))

(define print-test-results
  (lambda ()
    (begin (println 'Test 'results:)
	   (println '=====================)
	   (println)
	   (for-each (lambda (result)
		       (println '*** (car result) '***)
		       (println)
		       (for-each (lambda (fn)
				   (println '--> fn))
				 (cdr result))
		       (println))
		     *func-successes*))))

;; (bind-func non-compiling-func
;;   (lambda (a)
;;     a))

;; (test-xtfunc (non-compiling-func))

;; (bind-func compiling-func
;;   (lambda (a)
;;     (+ a 2)))

;; (test-xtfunc (compiling-func))

;; (bind-func calling-func
;;   (lambda (a)
;;     (+ a 2)))

;; (test-xtfunc (calling-func 2))

;; (print-test-results)

;;;;;;;;;;;;;;;
;; fft tests ;;
;;;;;;;;;;;;;;;

(sys:load "libs/external/fft.xtm")

(bind-func test_fft
  (lambda (fft_length printq)
    (let ((signal:kiss_fft_scalar* (zalloc fft_length))
          (in:kiss_fft_cpx* (zalloc fft_length))
          (out:kiss_fft_cpx* (zalloc fft_length))
          (i 0)
          (residual 0.))
      ;; fill signal buffer with noise
      (dotimes (i fft_length)
        (pset! signal i (cosf (/ (* (dtof TWOPI) (i64tof i)) (i64tof fft_length)))))
      (fill_cpx_buffer signal in fft_length)
      (if (= printq 1)
          (dotimes (i fft_length)
            (printf "in[%lld] = %f+%fi\n" i
                    (ftod (tref (pref-ptr in i) 0))
                    (ftod (tref (pref-ptr in i) 1)))))
      (fft in out fft_length)
      (if (= printq 1)
          (dotimes (i fft_length)
            (printf "out[%lld] = %f+%fi\n" i
                    (ftod (tref (pref-ptr out i) 0))
                    (ftod (tref (pref-ptr out i) 1)))))
      (ifft out in fft_length)
      (dotimes (i fft_length)
        (set! residual (+ residual (- (tref (pref-ptr in i) 0)
                                      (pref signal i)))))
      (set! residual (/ residual (i64tof fft_length)))
      (printf "Average residual = %f\n" (ftod residual))
      (if (< residual (dtof 0.0001)) 0 1))))

(test-xtfunc (test_fft 4 1) 0)
(test-xtfunc (test_fft 64 1) 0)
(test-xtfunc (test_fft 4096 0) 0)

;; test real-only ffts

(bind-func test_fftr
  (lambda (fft_length printq)
    (let ((signal:kiss_fft_scalar* (zalloc fft_length))
          (in:kiss_fft_scalar* (zalloc fft_length))
          (out:kiss_fft_cpx* (zalloc fft_length))
          (i 0)
          (residual 0.))
      ;; fill signal buffer with noise
      (dotimes (i fft_length)
        (pset! signal i (cosf (/ (* (dtof TWOPI) (i64tof i)) (i64tof fft_length))))
        (pset! in i (cosf (/ (* (dtof TWOPI) (i64tof i)) (i64tof fft_length)))))
      (if (= printq 1)
          (dotimes (i fft_length)
            (printf "in[%lld] = %f+%fi\n" i (ftod (pref in i)) (ftod (pref in i)))))
      (fftr in out fft_length)
      (if (= printq 1)
          (dotimes (i (+ 1 (/ fft_length 2)))
            (printf "out[%lld] = %f+%fi\n" i
                    (ftod (tref (pref-ptr out i) 0))
                    (ftod (tref (pref-ptr out i) 1)))))
      (ifftr out in fft_length)
      (dotimes (i (+ 1 (/ fft_length 2)))
        (set! residual (+ residual (- (pref in i) (pref signal i)))))
      (set! residual (/ residual (i64tof fft_length)))
      (printf "Average residual = %f\n" residual)
      (if (< residual (dtof 0.0001)) 0 1))))

(test-xtfunc (test_fftr 4 1) 0)
(test-xtfunc (test_fftr 64 1) 0)
(test-xtfunc (test_fftr 4096 0) 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FINISH!
;;
;; print out the results of all the tests!

(print-test-results)
