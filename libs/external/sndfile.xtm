;;; sndfile.xtm -- working with audio files

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; 

;;; Code:

;; lib-loading config
(sys:load-preload-check 'sndfile)

;; load the libsndfile dynamic library
(define libsndfile
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:load-dylib "libsndfile.so"))
          ((string=? platform "Windows") (sys:load-dylib "libsndfile.dll"))
          ((string=? platform "OSX") (sys:load-dylib "libsndfile.dylib"))
          (else (print "Unknown platform: " platform)))))

(if (or (eq? #f libsndfile)
        (null? libsndfile))
    (sys:load-escape "Error loading libsndfile dynamic library"))

(define *xtmlib-sndfile-loaded* #t)

(sys:load "libs/core/audio_dsp.xtm")

;; frames (total)
;; channels
;; offset           
;; subframes (relates to offset)
;; SAMPLE* (data)
(bind-type AudioBuffer <i64,i32,i64,i64,i32,SAMPLE*>)

(bind-func CreateAudioBuffer
  (lambda (frames:i64 channels:i32)
    (let ((abuf:AudioBuffer* (halloc))
	  (buf:SAMPLE* (halloc (* (i32toi64 channels) frames))))
      (tfill! abuf frames channels 0 frames (convert SAMPLERATE) buf)
      abuf)))

(bind-func DeleteAudioBuffer
  (lambda (abuf:AudioBuffer*)
    (free (tref abuf 5))
    (free abuf)
    void))

(bind-func AudioBufferPtr
  (lambda (abuf:AudioBuffer* frame:i64 channel:i64)
    (if (and (< frame (+ (tref abuf 2) (tref abuf 3)))
	     (< channel (i32toi64 (tref abuf 1))))
	(pref-ptr (tref abuf 5) (* frame channel)))))

(bind-val SF_LOOP_NONE i32 800)
(bind-val SF_LOOP_FORWARD i32 801)
(bind-val SF_LOOP_BACKWARD i32 802)
(bind-val SF_LOOP_ALTERNATING i32 803)

(bind-val SFC_GET_INSTRUMENT i32 4304) ;; 0x10D0
(bind-val SFC_GET_LOOP_INFO i32 4320) ;; 0x10E0

(bind-val SFM_READ i32 #x20)
(bind-val SFM_WRITE i32 #x30)
(bind-val SFM_RDWR i32 #x40)

(bind-val SF_FORMAT_WAV i32 #x10000)
(bind-val SF_FORMAT_AIF i32 #x20000)
(bind-val SF_FORMAT_AU i32 #x30000)
(bind-val SF_FORMAT_RAW i32 #x40000)
(bind-val SF_FORMAT_VOC i32 #x80000)
(bind-val SF_FORMAT_FLAC i32 #x170000)
(bind-val SF_FORMAT_CAF i32 #x180000)
(bind-val SF_FORMAT_OGG i32 #x200000)

(bind-val SF_FORMAT_PCM_16 i32 #x2)
(bind-val SF_FORMAT_PCM_24 i32 #x3)
(bind-val SF_FORMAT_PCM_32 i32 #x4)

(bind-val SF_FORMAT_FLOAT i32 #x6)
(bind-val SF_FORMAT_DOUBLE i32 #x7)

(bind-val SF_FORMAT_VORBIS i32 #x60)

(bind-type sf_info <i64,i32,i32,i32,i32,i32>)
(bind-type sf_format_info <i32,i8*,i8*>)
;; mode,start,end,count

(bind-type _sf_loop_ <i32,i32,i32,i32>)
;; 270 bytes
;; gain,basenote,detune,velocity_lo,velocity_hi,key_lo,key_hi,loop_count,loops
(bind-type SF_INSTRUMENT <i32,i8,i8,i8,i8,i8,i8,i32,|16,_sf_loop_|>)
;; 44 bytes
;; time_sig_num time_sig_den loop_mode num_beats bpm root_key future[6]
(bind-type SF_LOOP_INFO <|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|>)
(bind-val SF_FALSE i32 0)
(bind-val SF_TRUE i32 1)

(bind-lib libsndfile sf_open [i8*,i8*,i32,sf_info*]*)
(bind-lib libsndfile sf_open_fd [i8*,i32,i32,sf_info*,i32]*)
(bind-lib libsndfile sf_close [i32,i8*]*)
(bind-lib libsndfile sf_seek [i64,i8*,i64,i32]*)
(bind-lib libsndfile sf_write_sync [void,i8*]*)
(bind-lib libsndfile sf_read_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_write_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_read_float [i64,i8*,float*,i64]*)
(bind-lib libsndfile sf_write_float [i64,i8*,float*,i64]*)
(bind-lib libsndfile sf_strerror [i8*,i8*]*)
(bind-lib libsndfile sf_command [i32,i8*,i32,i8*,i32]*)

(bind-poly sf_read sf_read_double)
(bind-poly sf_read sf_read_float)
(bind-poly sf_write sf_write_double)
(bind-poly sf_write sf_write_float)

;; struct accessors

(bind-func sf_frames
  (lambda (info:sf_info*)
    (tref info 0)))

(bind-func sf_samplerate
  (lambda (info:sf_info*)
    (i32toi64 (tref info 1))))

(bind-func sf_channels
  (lambda (info:sf_info*)
    (i32toi64 (tref info 2))))

(bind-func sf_format
  (lambda (info:sf_info*)
    (i32toi64 (tref info 3))))

(bind-func sf_sections
  (lambda (info:sf_info*)
    (i32toi64 (tref info 4))))

(bind-func sf_seekable
  (lambda (info:sf_info*)
    (i32toi64 (tref info 5))))


;; size of audio data in file (in bytes)
(bind-func print_audio_file_info
  (lambda (fname)
    (let ((info:sf_info* (zalloc))
	  (audiofile (sf_open fname #x10 info)) ;; #x10 read #x20 write (#x30 read+write)
	  (channels (i32toi64 (tref info 2))))
      (if (null? audiofile)
          (begin (printf "Bad audio file!\n")
                 void)
          (begin
            (printf "---------------\n")
            (printf "filename:    %s\n" fname)
            (printf "samplerate:  %d\n" (tref info 1))
            (printf "channels:    %d\n" (tref info 2))
	    (printf "format:      %#x\n" (tref info 3))
            (printf "frames:      %lld\n" (tref info 0))
	    (if (< (tref info 0) (* 44100 60 1))
		(printf "seconds:     %f\n"
			(/ (i64tod (tref info 0))
			   (i32tod (tref info 1))))
		(if (< (tref info 0) (* 44100 60 60))
		    (printf "minutes:     %f\n"
			    (/ (i64tod (tref info 0))
			       (i32tod (tref info 1))
			       60.))
		    (printf "hours:       %f\n"
			    (/ (i64tod (tref info 0))
			       (i32tod (tref info 1))
			       60.))))
            (let ((loops:SF_LOOP_INFO* (alloc))
                  (lp1 (sf_command audiofile SFC_GET_LOOP_INFO (cast loops i8*) 44)))
              (if (= lp1 SF_TRUE)
                  (printf "loop-mode:   %d - bpm(%f)\n" (tref loops 2) (ftod (tref loops 4)))
                  (printf "loop-mode:\n")))
            (let ((inst:SF_INSTRUMENT* (alloc))
                  (lp2 (sf_command audiofile SFC_GET_INSTRUMENT (cast inst i8*) 270)))
              (if (= lp2 SF_TRUE)
                  (printf "num loops:   %d\n" (tref inst 7))
                  (printf "num loops:   0\n")))
            (sf_close audiofile)
            void)))))

;; write buffer to audio file

(bind-func write_audio_data_1
  (lambda (fname format rate frames channels:i32 dat:SAMPLE*)
    (let ((info:sf_info* (zalloc)))
      (tset! info 0 frames)
      (tset! info 1 rate)
      (tset! info 2 channels)
      (tset! info 3 format) 
      (let ((audiofile (sf_open fname SFM_WRITE info))
	    (samples_written (sf_write audiofile
                                       dat
                                       (* (i32toi64 channels) frames))))
	(if (null? audiofile)
	    (printf "error writing file: %s\n" (sf_strerror audiofile)))
	(sf_write_sync audiofile)
	(sf_close audiofile)
	samples_written))))

;; write out an audio buffer
;; has default format of 16bit PCM AIFF file.
;; uses current system samplerate
(bind-func write_audio_data_2
  (lambda (fname format frames channels:i32 dat:SAMPLE*)
    (write_audio_data_1 fname format
			(convert SAMPLERATE) frames channels dat)))

;; write out an audio buffer
;; uses systems samplerate
(bind-func write_audio_data_3
  (lambda (fname frames channels:i32 dat:SAMPLE*)
    (write_audio_data_1 fname
			(+ SF_FORMAT_AIF SF_FORMAT_PCM_16)
			(convert SAMPLERATE)
			frames
			channels dat)))

(bind-func write_audio_data_4
  (lambda (fname format abuf:AudioBuffer*)
    (let ((frames (tref abuf 0))
	  (chans (tref abuf 1))
	  (offset (tref abuf 2))
	  (subframes (tref abuf 3))
	  (rate (tref abuf 4))
	  (data (tref abuf 5)))
      (if (> (+ offset subframes) frames)
	  (begin (printf "Attempting to write off end of AudioBuffer")
		 0)
	  (write_audio_data_1 fname format rate subframes chans
			      (pref-ptr data offset))))))

(bind-func write_audio_data_5
  (lambda (fname abuf:AudioBuffer*)
    (write_audio_data_4 fname (+ SF_FORMAT_AIF SF_FORMAT_PCM_16) abuf)))

;; thee write SAMPLE*
(bind-poly write_audio_file write_audio_data_1)
(bind-poly write_audio_file write_audio_data_2)
(bind-poly write_audio_file write_audio_data_3)
;; these write AudioBuffer*
(bind-poly write_audio_file write_audio_data_4)
(bind-poly write_audio_file write_audio_data_5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; read an audiofile into an audio buffer
;;

;; these for dat:SAMPLE* buffers
;; if dat is set to null then
;; read_audio_data will return number of frames*channels
(bind-func read_audio_data_1
  (lambda (fname dat:SAMPLE* offset num printdata:i32)
    (let ((info:sf_info* (salloc))
	  (audiofile (sf_open fname SFM_READ info))
	  (channels (i32toi64 (tref info 2)))
	  (num_to_read (* num channels))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audiofile num_to_offset 0))
	  (samples_read (sf_read audiofile dat num_to_read)))
      (if (<> null audiofile)
          (begin
            (if (> printdata 0)
                (begin
                  (printf "---------------\n")
                  (printf "file name:     %s\n" fname)
                  (printf "samplerate:    %d\n" (tref info 1))
                  (printf "channels:      %d\n" (tref info 2))
		  (printf "format:        %#x\n" (tref info 3))
                  (printf "frames:        %d\n" (tref info 0))
                  (printf "samples read:  %lld\n" samples_read)))
            (sf_close audiofile))
          (printf "errors:  %s\n" (sf_strerror audiofile)))
      (if (null? dat)
          (* (tref info 0) channels) ;; frames * channels
          samples_read))))

(bind-func read_audio_data_2
  (lambda (fname dat:SAMPLE* num)
    (read_audio_data_1 fname dat 0 num 0)))

;;
;; these return an AudioBuffer tuple
;;
(bind-func read_audio_data_3
  (lambda (fname offset:i64 num:i64)
    (let ((info:sf_info* (salloc))
	  (audiofile (sf_open fname SFM_READ info))
	  (frames (tref info 0))
	  (rate (tref info 1))
	  (channels (tref info 2)))
      (printf "FRAMES: %lld\n" frames)
      (if (> (+ offset num) frames)
	  (begin (printf "Trying to load samples beyond end of %s\n" fname)
		 null)
	  (let ((abuf (CreateAudioBuffer num channels))
		(data (tref abuf 5))
		(num_to_read (* num (i32toi64 channels)))
		(num_to_offset (* offset (i32toi64 channels)))
		(cnt (sf_seek audiofile num_to_offset 0))
		(samples_read (sf_read audiofile data num_to_read)))
	    (tset! abuf 4 rate)
            (sf_close audiofile)	    
	    abuf)))))

(bind-func read_audio_data_4
  (lambda (fname num:i64)
    (read_audio_data_3 fname 0 num)))


;; these read into SAMPLE*
(bind-poly read_audio_data read_audio_data_1)
(bind-poly read_audio_data read_audio_data_2)
;; These read into (and return) an AudioBuffer
(bind-poly read_audio_data read_audio_data_3)
(bind-poly read_audio_data read_audio_data_4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some ben stuff
;; (no idea what this is for :(

;; an audio buffer reader (returns a value)
(bind-func audiofile_c
  (lambda (fname offset num)
    (let ((info:sf_info* (zalloc))
          (audio_file (sf_open fname #x10 info)) ;; #x10 read (#x30 read+write)
	  (channels (sf_channels info))
          (buffer_len (* channels (sf_frames info)))
	  (audio_dat:SAMPLE* (zalloc buffer_len))
	  (num_to_read (if (= 0 num) buffer_len (* num channels)))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audio_file num_to_offset 0))
	  (samples_read (sf_read audio_file audio_dat num_to_read))
          (playhead 0))
      (if (<> null audio_file)
          (begin
            (printf "---------------\n")
            (printf "file name:     %s\n" fname)
            (printf "samplerate:    %d\n" (sf_samplerate info))
            (printf "channels:      %d\n" channels)
            (printf "samples read:  %lld\n" samples_read)
            (lambda ()
              (let ((ph playhead))
                channels
                (set! playhead (modulo (+ playhead 1) samples_read))
                (pref audio_dat ph))))
          (begin (printf "errors:  %s\n" (sf_strerror audio_file))
                 (lambda ()
                   (printf "Error: audio_closure wasn't initialised properly.")
                   audio_dat))))))

;; an audio buffer reader (returns a ptr)
(bind-func audiofile_ptr_c
  (lambda (fname offset num)
    (let ((info:sf_info* (zalloc))
          (audio_file (sf_open fname #x10 info)) ;; #x10 read  #x20 write (#x30 read+write)
	  (channels (sf_channels info))
          (buffer_len (* channels (sf_frames info)))
	  (audio_dat:SAMPLE* (zalloc buffer_len))
	  (num_to_read (if (= 0 num) buffer_len (* num channels)))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audio_file num_to_offset 0))
	  (samples_read (sf_read audio_file audio_dat num_to_read))
          (playhead 0))
      (if (<> null audio_file)
          (begin
            (printf "---------------\n")
            (printf "file name:     %s\n" fname)
            (printf "samplerate:    %d\n" (sf_samplerate info))
            (printf "channels:      %d\n" channels)
            (printf "samples read:  %lld\n" samples_read)
            (lambda ()
              (let ((ph playhead))
                channels
                (set! playhead (modulo (+ playhead 1) samples_read))
                (pref-ptr audio_dat ph))))
          (begin (printf "errors:  %s\n" (sf_strerror audio_file))
                 (lambda ()
                   (printf "Error: audio_closure wasn't initialised properly.")
                   audio_dat))))))
