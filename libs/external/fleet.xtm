;;; fleet.xtm -- (CoreOS) fleet management

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: 

;;; Commentary:

;; See examples/external/fleet.xtm

;;; Code:

(sys:load-preload-check 'fleet)
(define *xtmlib-fleet-loaded* #f)

(sys:load "libs/external/ghttp.xtm")

(bind-val FLEET_API_VERSION i8* "v1-alpha")

;; (ghttp_print_get_response "http://localhost:8080/v1-alpha/discovery.json")

(bind-func fleet_get_api
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/discovery.json" host port FLEET_API_VERSION)
      (ghttp_request_body_as_json (ghttp_perform_GET url)))))

(bind-func fleet_get_machines
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/machines" host port FLEET_API_VERSION)
      (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url))
                       "machines"))))

(bind-func fleet_list_machines
  (lambda (host:i8* port:i32)
    (let ((machines (fleet_get_machines host port)))
      (if (not (null? machines))
          (begin
            (println "Fleet machines:\n")
            (doloop (i (json_array_size machines))
              (let ((mchn (json_array_get machines i)))
                (printf "[%lld] id: %s\n" i (json_string_value (json_object_get mchn "id")))
                (printf "    IP: %s\n" (json_string_value (json_object_get mchn "primaryIP")))
                (println))))
          (println "Fleet: no machines found.")))))

(bind-func fleet_get_units
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/units" host port FLEET_API_VERSION)
      (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url))
                       "units"))))

(bind-func fleet_list_units
  (lambda (host:i8* port:i32)
    (let ((units (fleet_get_units host port)))
      (if (not (null? units))
          (begin
            (println "Fleet units:\n")
            (doloop (i (json_array_size units))
              (let ((unit (json_array_get units i)))
                (printf "[%lld]          name: %s\n" i (json_string_value (json_object_get unit "name")))
                (printf "    current state: %s\n" (json_string_value (json_object_get unit "currentState")))
                (printf "    desired state: %s\n" (json_string_value (json_object_get unit "desiredState")))
                (println))))
          (println "Fleet: no units found.")))))

(bind-func fleet_get_states
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/state" host port FLEET_API_VERSION)
      (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url))
                       "states"))))

(bind-func fleet_list_states
  (lambda (host:i8* port:i32)
    (let ((states (fleet_get_states host port)))
      (if (not (null? states))
          (begin
            (println "Fleet state:\n")
            (doloop (i (json_array_size states))
              (let ((state (json_array_get states i)))
                (printf "[%lld]           name: %s\n\n" i (json_string_value (json_object_get state "name")))
                (printf "         machineID: %s\n" (json_string_value (json_object_get state "machineID")))
                (printf "systemdActiveState: %s\n" (json_string_value (json_object_get state "systemdActiveState")))
                (printf "  systemdLoadState: %s\n" (json_string_value (json_object_get state "systemdLoadState")))
                (printf "   systemdSubState: %s\n" (json_string_value (json_object_get state "systemdSubState")))
                (println))))
          (println "Fleet: no states available.")))))

(bind-func fleet_delete_unit
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit:i8*)
      (sprintf url "http://%s:%d/%s/units/%s" host port FLEET_API_VERSION unit)
      (let ((json (ghttp_request_body_as_json (ghttp_perform_DELETE url))))
        (if (null? (json_object_get json "error"))
            (println "Successfully deleted unit")
            (begin (printf "Fleet error: %s\n" (json_string_value (json_object_get (json_object_get json "error") "message")))
                   void))))))

(bind-func fleet_create_unit
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit_name:i8* unit:json_t*)
      (sprintf url "http://%s:%d/%s/units/%s" host port FLEET_API_VERSION unit_name)
      (ghttp_request_body_as_json (ghttp_perform_PUT url unit)))))

(bind-func fleet_submit_extempore_service
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/units/extempore.service" host port FLEET_API_VERSION)
      (let ((body (json_object))
            ;; (options (json_array))
            (err:json_error_t* (zalloc)))
        ;; create the extempore unit (JSON version)
        (json_object_set_new body "desiredState" (json_string "inactive"))
        ;; set the options
        (json_object_set_new
         body
         "options" 
         (json_loads
          "[{\\22section\\22: \\22Unit\\22, \\22name\\22: \\22After\\22, \\22value\\22: \\22docker.service\\22}
            {\\22section\\22: \\22Unit\\22, \\22name\\22: \\22Requires\\22, \\22value\\22: \\22docker.service\\22}
            
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22TimeoutStartSec\\22, \\22value\\22: \\220\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStartPre\\22, \\22value\\22: \\22-/usr/bin/docker kill benswift/extempore\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStartPre\\22, \\22value\\22: \\22-/usr/bin/docker pull benswift/extempore\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStart\\22, \\22value\\22: \\22/usr/bin/docker run --rm -p 7099:7099 -p 7098:7098 --privileged benswift/extempore --nodevice\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStop\\22, \\22value\\22: \\22/usr/bin/docker stop benswift/extempore\\22}
            
            {\\22section\\22: \\22X-Fleet\\22, \\22name\\22: \\22Global\\22, \\22value\\22: \\22true\\22}]"
          0 ;;flags
          err))
        (println (fleet_create_unit host port "extempore.service" body))))))

(define *xtmlib-fleet-loaded* #t)
