;;; gui.xtm -- simple 2D GUI library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3, libnanovg

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/gui.xtm" 'quiet)
(sys:load-preload-check 'gui)
(define *xtmlib-gui-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm")
 (sys:load "libs/external/nanovg.xtm")
 (sys:load "libs/external/glfw3.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/core/std.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/external/nanovg.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/external/glfw3.xtm" 'quiet))

(impc:aot:insert-header "xtmgui")

;; <x,y,w,h>
(bind-type Rect <float,float,float,float>)

(bind-func Rect_print
  (lambda (rect:Rect*)
    (printf "<Rect: x=%.3f y=%.3f w=%.3f h=%.3f>"
            (convert (tref rect 0) double)
            (convert (tref rect 1) double)
            (convert (tref rect 2) double)
            (convert (tref rect 3) double))
    void))

(bind-poly print Rect_print)

;; 0. id
;; 1. split
;; 2. type (flags)
;; 3. callback (to draw widget, handle events)
;; 4. parent widget
;; 5. left child widget
;; 6. right child widget
(bind-type Widget <i32,float,i64,[void,Widget*,Rect*]*,Widget*,Widget*,Widget*>)

(bind-alias WidgetCB [void,Widget*,Rect*]*)

;; accessors
(bind-func Widget_id
  (lambda (widget:Widget*)
    (tref widget 0)))

(bind-func Widget_split
  (lambda (widget:Widget*)
    (tref widget 1)))

(bind-func Widget_set_split
  (lambda (widget:Widget* split)
    (tset! widget 1 split)))

(bind-func Widget_type
  (lambda (widget:Widget*)
    (tref widget 2)))

(bind-func Widget_cb
  (lambda (widget:Widget*)
    (tref widget 3)))

(bind-func Widget_set_cb
  (lambda (widget:Widget* cb:WidgetCB)
    (tset! widget 3 cb)))

(bind-func Widget_parent
  (lambda (widget:Widget*)
    (tref widget 4)))

(bind-func Widget_set_parent
  (lambda (child:Widget* parent)
    (tset! child 4 parent)))

(bind-func Widget_left_child
  (lambda (widget:Widget*)
    (tref widget 5)))

(bind-func Widget_set_left_child
  (lambda (parent:Widget* child)
    (tset! parent 5 child)))

(bind-func Widget_right_child
  (lambda (widget:Widget*)
    (tref widget 6)))

(bind-func Widget_set_right_child
  (lambda (parent:Widget* child)
    (tset! parent 6 child)))

(bind-func Widget_print
  (lambda (widget:Widget*)
    (if (null? widget)
        (printf "<Widget 0x0>")
        (printf "<Widget %p\n        id=%d\n        split=%.3f\n        type=%lld\n        parent=%p\n        Lchild=%p\n        Rchild=%p\n>"
                widget
                (Widget_id widget)
                (convert (Widget_split widget) double)
                (Widget_type widget)
                ;; (Widget_cb widget) ;; callback
                (Widget_parent widget)
                (Widget_left_child widget)
                (Widget_right_child widget)))
    void))

(bind-func Widget_tostring
  (lambda (widget:Widget*)
    (let ((s:i8* (salloc 1024)))
      (if (null? widget)
          (sprintf s "<Widget 0x0>")
          (sprintf s
                   "<Widget %p\n        id=%d\n        split=%.3f\n        type=%lld\n        parent=%p\n        Lchild=%p\n        Rchild=%p\n>"
                   widget
                   (Widget_id widget)
                   (convert (Widget_split widget) double)
                   (Widget_type widget)
                   ;; (Widget_cb widget) ;; callback
                   (Widget_parent widget)
                   (Widget_left_child widget)
                   (Widget_right_child widget)))
      (Str s))))

(bind-poly print Widget_print)
(bind-poly tostring Widget_tostring)

;; create

(bind-func Widget_with_cb
  (lambda (id split type cb:WidgetCB)
    (Widget_h id split type cb null null null)))

;; destroy (free)

;; this should really fix up the widget tree as well, but that makes
;; it a fair bit more complicated. left as an excercise to the reader :)
(bind-func Widget_free
  (lambda (widget:Widget*)
    (free widget)))

(bind-func Widget_leaf_p
  (lambda (widget:Widget*)
    (and (null? (Widget_left_child widget))
         (null? (Widget_right_child widget)))))

(bind-func Widget_inner_p
  (lambda (widget:Widget*)
    (not (Widget_leaf_p widget))))

(bind-func Widget_parent_p
  (lambda (child:Widget* parent:Widget*)
    (= (Widget_parent child) parent)))

(bind-func Widget_child_p
  (lambda (parent:Widget* child:Widget*)
    (or (= (Widget_left_child parent) child)
        (= (Widget_right_child parent) child))))

;; walk the widget tree, applying fn to each widget
(bind-func Widget_walk_preorder
  (lambda (widget:Widget* visit_fn:[Widget*,Widget*]*)
    (if (null? widget)
        widget
        (begin
          (visit_fn widget)
          (Widget_walk_preorder (Widget_left_child widget) visit_fn)
          (Widget_walk_preorder (Widget_right_child widget) visit_fn)))))

(bind-func Widget_walk_inorder
  (lambda (widget:Widget* visit_fn:[Widget*,Widget*]*)
    (if (null? widget)
        widget
        (begin
          (Widget_walk_inorder (Widget_left_child widget) visit_fn)
          (visit_fn widget)
          (Widget_walk_inorder (Widget_right_child widget) visit_fn)))))

(bind-func Widget_walk_postorder
  (lambda (widget:Widget* visit_fn:[Widget*,Widget*]*)
    (if (null? widget)
        widget
        (begin
          (Widget_walk_postorder (Widget_left_child widget) visit_fn)
          (Widget_walk_postorder (Widget_right_child widget) visit_fn)
          (visit_fn widget)
          null))))

;; returns the first widget for which pred returns true
(bind-func Widget_find_preorder
  (lambda (widget:Widget* pred:[i1,Widget*]*)
    (if (and (not (null? widget)) (pred widget))
        widget
        (if (not (null? widget))
            (begin
              (Widget_find_preorder (Widget_left_child widget) pred)
              (Widget_find_preorder (Widget_right_child widget) pred))
            null))))

;; this is untested
(bind-func Widget_find_inorder
  (lambda (widget:Widget* pred:[i1,Widget*]*)
    (if (not (null? widget))
        (begin
          (Widget_find_inorder (Widget_left_child widget) pred)
          (if (and (not (null? widget)) (pred widget))
              widget
              
              (Widget_find_inorder (Widget_right_child widget) pred)))
        null)))

;; this is untested
(bind-func Widget_find_postorder
  (lambda (widget:Widget* pred:[i1,Widget*]*)
    (if (not (null? widget))
        (begin
          (Widget_find_postorder (Widget_left_child widget) pred)
          (Widget_find_postorder (Widget_right_child widget) pred)
          (if (and (not (null? widget)) (pred widget)) widget
              null)))))

;; the GUI type

;; 0. GLFW window
;; 1. nanovg context
;; 2. root widget
;; 3. width
;; 4. height
;; 5. pixel ratio
(bind-type GUI <GLFWwindow*,NVGcontext*,Widget*,float,float,float>)

;; accessors
(bind-func GUI_window
  (lambda (gui:GUI*)
    (tref gui 0)))

(bind-func GUI_context
  (lambda (gui:GUI*)
    (tref gui 1)))

(bind-func GUI_root
  (lambda (gui:GUI*)
    (tref gui 2)))

(bind-func GUI_set_root
  (lambda (gui:GUI* widget)
    (tset! gui 2 widget)))

(bind-func GUI_width
  (lambda (gui:GUI*)
    (tref gui 3)))

(bind-func GUI_height
  (lambda (gui:GUI*)
    (tref gui 4)))

(bind-func GUI_pixel_ratio
  (lambda (gui:GUI*)
    (tref gui 5)))

(bind-func GUI_print
  (lambda (gui:GUI*)
    (if (null? gui)
        (printf "<GUI 0x0>")
        (printf "<GUI %p\n     window=%p\n     context=%p\n     root=%p\n     width=%.1f\n     height=%.1f\n     pixelRatio=%.1f\n>"
                gui
                (GUI_window gui)
                (GUI_context gui)
                (GUI_root gui)
                (convert (GUI_width gui) double)
                (convert (GUI_height gui) double)
                (convert (GUI_pixel_ratio gui) double)))
    void))

(bind-func GUI_tostring
  (lambda (gui:GUI*)
    (let ((s:i8* (salloc 1024)))
      (if (null? gui)
          (sprintf s "<GUI 0x0>")
          (sprintf s
                   "<GUI %p\n     window=%p\n     context=%p\n     root=%p\n     width=%.1f\n     height=%.1f\n     pixelRatio=%.1f\n>"
                   gui
                   (GUI_window gui)
                   (GUI_context gui)
                   (GUI_root gui)
                   (convert (GUI_width gui) double)
                   (convert (GUI_height gui) double)
                   (convert (GUI_pixel_ratio gui) double)))
      (Str s))))

(bind-poly print GUI_print)
(bind-poly tostring GUI_tostring)

;; this is the global gui structure - there can only be one in each
;; Extempore process

(bind-val EXTEMPORE_GUI GUI*)

(bind-func gui_init
  (lambda (width height)
    ;; (if (not (null? EXTEMPORE_GUI))
    ;;     (begin
    ;;       (println "Extempore GUI is already initialised, and cannot be re-initialised.")
    ;;       EXTEMPORE_GUI))
    (let ((ww:i32* (alloc))
          (wh:i32* (alloc))
          (fbw:i32* (alloc))
          (fbh:i32* (alloc))
          (window null)
          (vg null))
      ;; set up GLFW
      (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
      (set! window (glfw_init_and_create_interaction_window width height))
      ;; (glfwSetInputMode window GLFW_STICKY_KEYS 1)
      ;; (glfwSetInputMode window GLFW_STICKY_MOUSE_BUTTONS 1)
      ;; set up nanovg
      (set! vg (nvg_create_context))
      (glfwGetWindowSize window ww wh)
      (glfwGetFramebufferSize window fbw fbh)
      ;; create the new GUI data type
      (set! EXTEMPORE_GUI
            (GUI_h
             window
             vg
             null
             (convert (pref ww 0) float)
             (convert (pref wh 0) float)
             (/ (convert (pref fbw 0) float) (convert (pref ww 0) float)))))))

(bind-val GUI_SPLIT_VERTICAL i64 (real->integer (expt 2 0)))
(bind-val GUI_SPLIT_HORIZONTAL i64 (real->integer (expt 2 1)))

;; walks the tree in pre-order
(bind-func gui_render_subtree
  (lambda (widget:Widget* bounds:Rect*)
    (if (null? widget)
        widget
        (if (and (null? (Widget_left_child widget))
                 (null? (Widget_right_child widget)))
            ;; if a leaf node, set the nanovg transform matrix and
            ;; call the render callback
            (let ((winWidth (GUI_width EXTEMPORE_GUI))
                  (winHeight (GUI_height EXTEMPORE_GUI))
                  (vg (GUI_context EXTEMPORE_GUI)))
              ;; (nvgResetTransform vg)
              ;; (nvgTranslate vg x y)
              ;; (nvgScale vg w h)
              ((Widget_cb widget) widget bounds)
              null)
            ;; otherwise recurse into the child widgets - horizontal
            ;; splits only at this point
            (let ((lchild (Widget_left_child widget))
                  (rchild (Widget_right_child widget))
                  (split (Widget_split widget)))
              ;; recurse into children
              (if (= (& GUI_SPLIT_VERTICAL (Widget_type widget))
                     GUI_SPLIT_VERTICAL)
                  ;; split horizontally (default)
                  (begin
                    (gui_render_subtree (Widget_left_child widget)
                                        (Rect (tref bounds 0)
                                              (tref bounds 1)
                                              (tref bounds 2)
                                              (* split (tref bounds 3))))
                    (gui_render_subtree (Widget_right_child widget)
                                        (Rect (tref bounds 0)
                                              (+ (tref bounds 1)
                                                 (* split (tref bounds 3)))
                                              (tref bounds 2)
                                              (* (- 1. split) (tref bounds 3)))))
                  ;; split vertically
                  (begin
                    (gui_render_subtree (Widget_left_child widget)
                                        (Rect (tref bounds 0)
                                              (tref bounds 1)
                                              (* split (tref bounds 2))
                                              (tref bounds 3)))
                    (gui_render_subtree (Widget_right_child widget)
                                        (Rect (+ (tref bounds 0)
                                                 (* split (tref bounds 2)))
                                              (tref bounds 1)
                                              (* (- 1. split) (tref bounds 2))
                                              (tref bounds 3))))))))))

(bind-func gui_render
  (lambda ()
    (glClear (bitwise-or GL_COLOR_BUFFER_BIT
                         GL_DEPTH_BUFFER_BIT
                         GL_STENCIL_BUFFER_BIT))
    (nvgBeginFrame (GUI_context EXTEMPORE_GUI)
                   (convert (GUI_width EXTEMPORE_GUI))
                   (convert (GUI_height EXTEMPORE_GUI))
                   (GUI_pixel_ratio EXTEMPORE_GUI))
    (gui_render_subtree (GUI_root EXTEMPORE_GUI) (Rect 0. 0. (GUI_width EXTEMPORE_GUI) (GUI_height EXTEMPORE_GUI)))
    (nvgEndFrame (GUI_context EXTEMPORE_GUI))
    (glfwPollEvents)
    (glfwSwapBuffers (GUI_window EXTEMPORE_GUI))))

;; some useful helper search functions

(bind-func gui_find_parent
  (lambda (widget:Widget*)
    (Widget_find_preorder
     (GUI_root EXTEMPORE_GUI)
     (lambda (w)
       (Widget_parent_p widget w)))))

(bind-func gui_find_leaf_preorder
  (lambda ()
    (Widget_find_preorder
     (GUI_root EXTEMPORE_GUI)
     Widget_leaf_p)))

(bind-func gui_find_leaf_inorder
  (lambda ()
    (Widget_find_inorder
     (GUI_root EXTEMPORE_GUI)
     Widget_leaf_p)))

(bind-func gui_find_leaf_postorder
  (lambda ()
    (Widget_find_postorder
     (GUI_root EXTEMPORE_GUI)
     Widget_leaf_p)))

(bind-func gui_find_widget_with_id
  (lambda (id)
    (Widget_find_preorder
     (GUI_root EXTEMPORE_GUI)
     (lambda (w)
       (= (Widget_id w) id)))))

;; modify the GUI tree

;; this is the all-singing, all-dancing "widget add" function. see
;; below for helper functions which use sensible default parameters
(bind-func gui_add_widget
  "add a new widget to the GUI

new_widget: widget to add
parent_widget: widget to split
split_size: relative size of the two new widgets, in (0,1)
split_orientation: either GUI_SPLIT_HORIZONTAL or GUI_SPLIT_VERTICAL
addleft_p: #t to add new widget as *left* child of parent, otherwise *right* child

If parent_widget is null, new_widget becomes the new GUI root node.
"
  (lambda (new_widget:Widget* parent_widget:Widget* split_size split_orientation addleft_p:i1)
    (cond ((not (Widget_leaf_p new_widget))
           (println "gui_add_widget: cannot add non-leaf widget")
           0:i1)
          ((not (null? (gui_find_widget_with_id (Widget_id new_widget))))
           (println "gui_add_widget: cannot add widget, a widget with id =" (Widget_id new_widget) "is already in the tree")
           0:i1)
          ((not (and (> split_size 0.)
                     (< split_size 1.)))
           (println "gui_add_widget: split_size must be between 0. and 1.")
           0:i1)
          ((not (or (= split_orientation GUI_SPLIT_HORIZONTAL)
                    (= split_orientation GUI_SPLIT_VERTICAL)))
           (println "gui_add_widget: split_orientation must be either GUI_SPLIT_HORIZONTAL or GUI_SPLIT_VERTICAL")
           0:i1)
          ((null? parent_widget)
           (Widget_set_split new_widget split_size)
           (GUI_set_root EXTEMPORE_GUI new_widget)
           1:i1)
          (else
           (let ((grandparent_widget (Widget_parent parent_widget))
                 (new_lchild (if addleft_p new_widget parent_widget))
                 (new_rchild (if addleft_p parent_widget new_widget))
                 (new_parent (Widget_h -1 ;; internal nodes have id -1
                                       split_size
                                       (bor (Widget_type parent_widget) split_orientation)
                                       null
                                       grandparent_widget
                                       new_lchild
                                       new_rchild)))
             ;; reconnect the widget tree
             (Widget_set_parent new_lchild new_parent)
             (Widget_set_parent new_rchild new_parent)
             (if (null? grandparent_widget)
                 (GUI_set_root EXTEMPORE_GUI new_parent)
                 (if (= (Widget_left_child grandparent_widget) parent_widget)
                     (Widget_set_left_child grandparent_widget new_parent)
                     (if (= (Widget_right_child grandparent_widget) parent_widget)
                         (Widget_set_right_child grandparent_widget new_parent))
                     (println "gui_add_widget: could not reconnect the widget tree")))
             1:i1)))))

(bind-func gui_add_widget_preorder
  (lambda (new_widget split_size split_orientation addleft_p)
    (gui_add_widget new_widget (gui_find_leaf_preorder) split_size split_orientation addleft_p)))

(bind-func gui_validate
  (lambda ()
    ;; check that all nodes are either full, or leaves
    (null?
     (Widget_find_preorder
      (GUI_root EXTEMPORE_GUI)
      (lambda (w)
        ;; need an exclusive or...
        (not (or (and (null? (Widget_left_child w))
                      (null? (Widget_right_child w)))
                 (and (not (null? (Widget_left_child w)))
                      (not (null? (Widget_right_child w)))))))))))

(bind-func gui_reset
  (lambda ()
    ;; free all the Widget memory, reset GUI_root
    (Widget_walk_postorder
     (GUI_root EXTEMPORE_GUI)
     (lambda (w) (Widget_free w) w))
    (GUI_set_root EXTEMPORE_GUI null)))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mouse/keyboard input ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; these functions are heavily glfw-based, and they must be called
;; from inside a widget callback, since they use the current nanovg
;; transform to do hit-detection

(bind-func gui_mouse_x
  (lambda ()
    (let ((x_ptr:double* (salloc))
          (y_ptr:double* (salloc)))
      (glfwGetCursorPos (GUI_window EXTEMPORE_GUI) x_ptr y_ptr)
      (convert (pref x_ptr 0) float))))

(bind-func gui_mouse_y
  (lambda ()
    (let ((x_ptr:double* (salloc))
          (y_ptr:double* (salloc)))
      (glfwGetCursorPos (GUI_window EXTEMPORE_GUI) x_ptr y_ptr)
      (convert (pref y_ptr 0) float))))

(bind-func gui_inbounds_p
  (lambda (bounds:Rect*)
    (let ((x (gui_mouse_x))
          (y (gui_mouse_y))
          (xmin (tref bounds 0))
          (xmax (+ xmin (tref bounds 2)))
          (ymin (tref bounds 1))
          (ymax (+ ymin (tref bounds 3))))
      ;; a simple hit-test
      (and (< xmin x) (> xmax x)
           (< ymin y) (> ymax y)))))

(bind-func gui_click_p
  (lambda (bounds:Rect* button)
    (and (gui_inbounds_p bounds)
         (= (glfwGetMouseButton (GUI_window EXTEMPORE_GUI)
                                button)
            GLFW_PRESS))))

(bind-func gui_left_click_p
  (lambda (bounds:Rect*)
    (gui_click_p bounds GLFW_MOUSE_BUTTON_1)))

(bind-func gui_right_click_p
  (lambda (bounds:Rect*)
    (gui_click_p bounds GLFW_MOUSE_BUTTON_2)))

(bind-func gui_enter_p
  (let ((prev 0)
        (curr 0))
    (lambda (bounds:Rect*)
      (set! curr (gui_inbounds_p bounds))
      (if (and (not prev) curr)
          (begin (set! prev curr) 1)
          (begin (set! prev curr) 0)))))

(bind-func gui_leave_p
  (let ((prev 0)
        (curr 0))
    (lambda (bounds:Rect*)
      (set! curr (gui_inbounds_p bounds))
      (if (and prev (not curr))
          (begin (set! prev curr) 1)
          (begin (set! prev curr) 0)))))

(bind-func gui_keypress_p
  (lambda (key)
    (= (glfwGetKey (GUI_window EXTEMPORE_GUI) key)
       GLFW_PRESS)))

(bind-func gui_keyrelease_p
  (lambda (key)
    (= (glfwGetKey (GUI_window EXTEMPORE_GUI) key)
       GLFW_RELEASE)))

;;;;;;;;;;;;;;;;;;;;
;; GUI appearance ;;
;;;;;;;;;;;;;;;;;;;;

;; fonts

(bind-func gui_load_opensans_fonts
  "Load OpenSans .ttf fonts in opensans_dir

If you don't have OpenSans on your system, you can download it for free from http://www.fontsquirrel.com/fonts/open-sans"
  (lambda (opensans_dir:i8*)
    (let ((path:i8* (zalloc 256))
          (create_font (lambda (name:i8*)
                         (sprintf path "%s/OpenSans-%s.ttf" opensans_dir name)
                         (nvgCreateFont (GUI_context EXTEMPORE_GUI) name path))))
      (cond ((< (create_font "Bold") 0)
             (println "couldn't load font OpenSans-Bold.ttf")
             0:i1)
            ((< (create_font "BoldItalic") 0)
             (println "couldn't load font OpenSans-BoldItalic.ttf")
             0:i1)
            ((< (create_font "ExtraBold") 0)
             (println "couldn't load font OpenSans-ExtraBold.ttf")
             0:i1)
            ((< (create_font "ExtraBoldItalic") 0)
             (println "couldn't load font OpenSans-ExtraBoldItalic.ttf")
             0:i1)
            ((< (create_font "Italic") 0)
             (println "couldn't load font OpenSans-Italic.ttf")
             0:i1)
            ((< (create_font "Light") 0)
             (println "couldn't load font OpenSans-Light.ttf")
             0:i1)
            ((< (create_font "LightItalic") 0)
             (println "couldn't load font OpenSans-LightItalic.ttf")
             0:i1)
            ((< (create_font "Regular") 0)
             (println "couldn't load font OpenSans-Regular.ttf")
             0:i1)
            ((< (create_font "Semibold") 0)
             (println "couldn't load font OpenSans-Semibold.ttf")
             0:i1)
            ((< (create_font "SemiboldItalic") 0)
             (println "couldn't load font OpenSans-SemiboldItalic.ttf")
             0:i1)
            (else
             (println "OpenSans fonts successfully loaded")
             1:i1)))))

;; Color themes

;; Primary colors
(bind-val GUI_COLOR_YELLOW NVGcolor*)
(bind-val GUI_COLOR_ORANGE NVGcolor*)
(bind-val GUI_COLOR_RED NVGcolor*)
(bind-val GUI_COLOR_MAGENTA NVGcolor*)
(bind-val GUI_COLOR_VIOLET NVGcolor*)
(bind-val GUI_COLOR_BLUE NVGcolor*)
(bind-val GUI_COLOR_CYAN NVGcolor*)
(bind-val GUI_COLOR_GREEN NVGcolor*)
(bind-val GUI_COLOR_GRAY NVGcolor*)
;; Darker and lighter accented colors
(bind-val GUI_COLOR_YELLOW_D NVGcolor*)
(bind-val GUI_COLOR_YELLOW_L NVGcolor*)
(bind-val GUI_COLOR_ORANGE_D NVGcolor*)
(bind-val GUI_COLOR_ORANGE_L NVGcolor*)
(bind-val GUI_COLOR_RED_D NVGcolor*)
(bind-val GUI_COLOR_RED_L NVGcolor*)
(bind-val GUI_COLOR_MAGENTA_D NVGcolor*)
(bind-val GUI_COLOR_MAGENTA_L NVGcolor*)
(bind-val GUI_COLOR_VIOLET_D NVGcolor*)
(bind-val GUI_COLOR_VIOLET_L NVGcolor*)
(bind-val GUI_COLOR_BLUE_D NVGcolor*)
(bind-val GUI_COLOR_BLUE_L NVGcolor*)
(bind-val GUI_COLOR_CYAN_D NVGcolor*)
(bind-val GUI_COLOR_CYAN_L NVGcolor*)
(bind-val GUI_COLOR_GREEN_D NVGcolor*)
(bind-val GUI_COLOR_GREEN_L NVGcolor*)
(bind-val GUI_COLOR_GRAY_D NVGcolor*)
(bind-val GUI_COLOR_GRAY_L NVGcolor*)
;; Adaptive colors
(bind-val GUI_COLOR_FG NVGcolor*)
(bind-val GUI_COLOR_BG NVGcolor*)
(bind-val GUI_COLOR_HL_LINE NVGcolor*)
(bind-val GUI_COLOR_HL NVGcolor*)
(bind-val GUI_COLOR_EMPH NVGcolor*)
(bind-val GUI_COLOR_COMMENTS NVGcolor*)

(bind-func gui_set_monokai_color_theme
  "set GUI_COLOR_* variables to Monokai color theme

Monokai was originally from Textmate, but has since been ported to
several different editors."
  (lambda ()
    ;; Primary colors
    (set! GUI_COLOR_YELLOW           (NVGcolor_hex #xE6DB74FF))
    (set! GUI_COLOR_ORANGE           (NVGcolor_hex #xFD971FFF))
    (set! GUI_COLOR_RED              (NVGcolor_hex #xF92672FF))
    (set! GUI_COLOR_MAGENTA          (NVGcolor_hex #xFD5FF0FF))
    (set! GUI_COLOR_VIOLET           (NVGcolor_hex #xAE81FFFF))
    (set! GUI_COLOR_BLUE             (NVGcolor_hex #x66D9EFFF))
    (set! GUI_COLOR_CYAN             (NVGcolor_hex #xA1EFE4FF))
    (set! GUI_COLOR_GREEN            (NVGcolor_hex #xA6E22EFF))
    (set! GUI_COLOR_GRAY             (NVGcolor_hex #x474747FF))
    ;; Darker and lighter accented colors
    (set! GUI_COLOR_YELLOW_D         (NVGcolor_hex #x968B26FF))
    (set! GUI_COLOR_YELLOW_L         (NVGcolor_hex #xF3EA98FF))
    (set! GUI_COLOR_ORANGE_D         (NVGcolor_hex #xA45E0AFF))
    (set! GUI_COLOR_ORANGE_L         (NVGcolor_hex #xFEB257FF))
    (set! GUI_COLOR_RED_D            (NVGcolor_hex #xA20C41FF))
    (set! GUI_COLOR_RED_L            (NVGcolor_hex #xFC5C94FF))
    (set! GUI_COLOR_MAGENTA_D        (NVGcolor_hex #xA41F99FF))
    (set! GUI_COLOR_MAGENTA_L        (NVGcolor_hex #xFE87F4FF))
    (set! GUI_COLOR_VIOLET_D         (NVGcolor_hex #x562AA6FF))
    (set! GUI_COLOR_VIOLET_L         (NVGcolor_hex #xC2A1FFFF))
    (set! GUI_COLOR_BLUE_D           (NVGcolor_hex #x21889BFF))
    (set! GUI_COLOR_BLUE_L           (NVGcolor_hex #x8DE6F7FF))
    (set! GUI_COLOR_CYAN_D           (NVGcolor_hex #x349B8DFF))
    (set! GUI_COLOR_CYAN_L           (NVGcolor_hex #xBBF7EFFF))
    (set! GUI_COLOR_GREEN_D          (NVGcolor_hex #x67930FFF))
    (set! GUI_COLOR_GREEN_L          (NVGcolor_hex #xC1F161FF))
    (set! GUI_COLOR_GRAY_D           (NVGcolor_hex #x333333FF))
    (set! GUI_COLOR_GRAY_L           (NVGcolor_hex #x6b6b6bFF))
    ;; Adaptive colors
    (set! GUI_COLOR_FG               (NVGcolor_hex #xF8F8F2FF))
    (set! GUI_COLOR_BG               (NVGcolor_hex #x272822FF))
    (set! GUI_COLOR_HL_LINE          (NVGcolor_hex #x3E3D31FF))
    (set! GUI_COLOR_HL               (NVGcolor_hex #x49483EFF))
    (set! GUI_COLOR_EMPH             (NVGcolor_hex #xF8F8F0FF))
    (set! GUI_COLOR_COMMENTS         (NVGcolor_hex #x75715EFF))
    void))

(bind-func gui_set_default_theme
  (lambda (font_path)
    ;; colors
    (gui_set_monokai_color_theme)
    ;; fonts
    (if (gui_load_opensans_fonts font_path)
        (let ((vg (GUI_context EXTEMPORE_GUI)))
          (nvgFontFace vg "Bold")
          (println "Set GUI theme: default")))
    void))

;;;;;;;;;;;;;
;; widgets ;;
;;;;;;;;;;;;;

(bind-val GUI_BUTTON i64 (real->integer (expt 2 2)))
(bind-val GUI_LABEL i64 (real->integer (expt 2 3)))
(bind-val GUI_IMAGE i64 (real->integer (expt 2 4)))
(bind-val GUI_FBO i64 (real->integer (expt 2 5)))

;; button

(bind-func gui_draw_text_in_bounds
  (let ((count 0))
    (lambda (vg text:i8* bounds:Rect*)
      (nvgBeginPath vg)
      ;; find bounds
      (let ((font_size 30.)
            (h (tref bounds 3))
            (textbox_height font_size)
            (b_ptr:float* (salloc 4)))
        (nvgTextAlign vg (bor NVG_ALIGN_BOTTOM NVG_ALIGN_CENTER))
        (nvgFontSize vg font_size)
        (nvgTextBoxBounds vg
                          (tref bounds 0)
                          (tref bounds 1)
                          (tref bounds 2)
                          text null
                          b_ptr)
        (set! textbox_height (- (pref b_ptr 3) (pref b_ptr 1)))
        ;; draw text
        (nvgTextBox vg
                    (tref bounds 0)
                    (+ (tref bounds 1) (/ (+ (tref bounds 3) textbox_height) 2.0))
                    (tref bounds 2)
                    text null)))))

(bind-func gui_draw_button
  (lambda (label:i8* bounds)
    (let ((vg (GUI_context EXTEMPORE_GUI)))
      ;; draw background
      (nvgBeginPath vg)
      (cond ((gui_left_click_p bounds)
             (_nvgFillColor vg GUI_COLOR_EMPH))
            ((gui_inbounds_p bounds)
             (_nvgFillColor vg GUI_COLOR_HL))
            (else
             (_nvgFillColor vg GUI_COLOR_BG)))
      (nvgRect vg
               (tref bounds 0)
               (tref bounds 1)
               (tref bounds 2)
               (tref bounds 3))
      (nvgFill vg)
      ;; draw text
      (nvgBeginPath vg)
      (if (gui_left_click_p bounds)
          (_nvgFillColor vg GUI_COLOR_BG)
          (_nvgFillColor vg GUI_COLOR_FG))
      (gui_draw_text_in_bounds vg label bounds)
      (nvgFill vg))))

(bind-func Widget_button
  "create a button widget with id and label"
  (lambda (id label:i8*)
    (let ((lab (Str label))
          (cb (lambda (widget:Widget* bounds:Rect*)
                (let ((vg (GUI_context EXTEMPORE_GUI)))
                  (nvgSave vg)
                  (gui_draw_button (string_cstr lab) bounds)
                  (nvgRestore vg))
                void)))
      (Widget_with_cb id .5 GUI_BUTTON cb))))


(impc:aot:insert-footer "xtmgui")
(define *xtmlib-gui-loaded* #t)
