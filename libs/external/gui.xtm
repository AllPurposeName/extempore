;;; gui.xtm -- simple 2D GUI library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3, libnanovg

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/gui.xtm" 'quiet)
(sys:load-preload-check 'gui)
(define *xtmlib-gui-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm")
 (sys:load "libs/external/nanovg.xtm")
 (sys:load "libs/external/glfw3.xtm"))
(impc:aot:insert-sexp '(sys:load "libs/core/std.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/external/nanovg.xtm" 'quiet))
(impc:aot:insert-sexp '(sys:load "libs/external/glfw3.xtm" 'quiet))

(impc:aot:insert-header "xtmgui")

;; 0. id
;; 1. size
;; 2. type (flags)
;; 3. callback (to draw widget, handle events)
;; 4. parent widget
;; 5. left child widget
;; 6. right child widget
(bind-type Widget <i32,float,i64,[void,Widget*]*,Widget*,Widget*,Widget*>)

(bind-alias WidgetCB [void,Widget*]*)

;; accessors
(bind-func Widget_id
  (lambda (widget:Widget*)
    (tref widget 0)))

(bind-func Widget_size
  (lambda (widget:Widget*)
    (tref widget 1)))

(bind-func Widget_set_size
  (lambda (widget:Widget* size)
    (tset! widget 1 size)))

(bind-func Widget_type
  (lambda (widget:Widget*)
    (tref widget 2)))

(bind-func Widget_cb
  (lambda (widget:Widget*)
    (tref widget 3)))

(bind-func Widget_set_cb
  (lambda (widget:Widget* cb:WidgetCB)
    (tset! widget 3 cb)))

(bind-func Widget_parent
  (lambda (widget:Widget*)
    (tref widget 4)))

(bind-func Widget_set_parent
  (lambda (child:Widget* parent)
    (tset! child 4 parent)))

(bind-func Widget_left_child
  (lambda (widget:Widget*)
    (tref widget 5)))

(bind-func Widget_set_left_child
  (lambda (parent:Widget* child)
    (tset! parent 5 child)))

(bind-func Widget_right_child
  (lambda (widget:Widget*)
    (tref widget 6)))

(bind-func Widget_set_right_child
  (lambda (parent:Widget* child)
    (tset! parent 6 child)))

(bind-func Widget_print
  (lambda (widget:Widget*)
    (if (null? widget)
        (printf "<Widget 0x0>")
        (printf "<Widget %p: id=%d size=%.3f type=%lld parent=%p Lchild=%p Rchild=%p>"
                widget
                (Widget_id widget)
                (convert (Widget_size widget) double)
                (Widget_type widget)
                ;; (Widget_cb widget) ;; callback
                (Widget_parent widget)
                (Widget_left_child widget)
                (Widget_right_child widget)))
    void))

(bind-func Widget_tostring
  (lambda (widget:Widget*)
    (let ((s:i8* (salloc 1024)))
      (if (null? widget)
          (sprintf s "<Widget 0x0>")
          (sprintf s
                   "<Widget %p: id=%d size=%.3f type=%lld parent=%p Lchild=%p Rchild=%p>"
                   widget
                   (Widget_id widget)
                   (convert (Widget_size widget) double)
                   (Widget_type widget)
                   ;; (Widget_cb widget) ;; callback
                   (Widget_parent widget)
                   (Widget_left_child widget)
                   (Widget_right_child widget)))
      (Str s))))

(bind-poly print Widget_print)
(bind-poly tostring Widget_tostring)

;; 0. GLFW window
;; 1. nanovg context
;; 2. root widget
;; 3. width
;; 4. height
;; 5. pixel ratio
(bind-type GUI <GLFWwindow*,NVGcontext*,Widget*,float,float,float>)

;; accessors
(bind-func GUI_window
  (lambda (gui:GUI*)
    (tref gui 0)))

(bind-func GUI_context
  (lambda (gui:GUI*)
    (tref gui 1)))

(bind-func GUI_root
  (lambda (gui:GUI*)
    (tref gui 2)))

(bind-func GUI_set_root
  (lambda (gui:GUI* widget)
    (tset! gui 2 widget)))

(bind-func GUI_width
  (lambda (gui:GUI*)
    (tref gui 3)))

(bind-func GUI_height
  (lambda (gui:GUI*)
    (tref gui 4)))

(bind-func GUI_pixel_ratio
  (lambda (gui:GUI*)
    (tref gui 5)))

(bind-func GUI_print
  (lambda (gui:GUI*)
    (if (null? gui)
        (printf "<GUI 0x0>")
        (printf "<GUI %p: window=%p context=%p root=%p width=%.1f height=%.1f pixelRatio=%.1f>"
                gui
                (GUI_window gui)
                (GUI_context gui)
                (GUI_root gui)
                (convert (GUI_width gui) double)
                (convert (GUI_height gui) double)
                (convert (GUI_pixel_ratio gui) double)))
    void))

(bind-func GUI_tostring
  (lambda (gui:GUI*)
    (let ((s:i8* (salloc 1024)))
      (if (null? gui)
          (sprintf s "<GUI 0x0>")
          (sprintf s
                   "<GUI %p: window=%p context=%p root=%p width=%.1f height=%.1f pixelRatio=%.1f>"
                   gui
                   (GUI_window gui)
                   (GUI_context gui)
                   (GUI_root gui)
                   (convert (GUI_width gui) double)
                   (convert (GUI_height gui) double)
                   (convert (GUI_pixel_ratio gui) double)))
      (Str s))))

(bind-poly print GUI_print)
(bind-poly tostring GUI_tostring)

;; currently doesn't check for double-initialisation, but probably
;; should
(bind-func gui_init
  (lambda (width height)
    (let ((ww:i32* (alloc))
          (wh:i32* (alloc))
          (fbw:i32* (alloc))
          (fbh:i32* (alloc))
          (window null)
          (vg null))
      ;; set up GLFW
      (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
      (set! window (glfw_init_and_create_interaction_window width height))
      ;; set up nanovg
      (set! vg (nvg_create_context))
      (glfwGetWindowSize window ww wh)
      (glfwGetFramebufferSize window fbw fbh)
      (GUI_h
              window
              vg
              null
              (convert (pref ww 0) float)
              (convert (pref wh 0) float)
              (/ (convert (pref fbw 0) float) (convert (pref ww 0) float))))))

;; walks the tree in pre-order
(bind-func gui_render_subtree
  (lambda (gui:GUI* widget:Widget* x:float y:float w:float h:float)
    ;; (println "x:" x "y:" y "w:" w "h:" h)
    (if (null? widget)
        widget
        (if (and (null? (Widget_left_child widget))
                 (null? (Widget_right_child widget)))
            ;; if a leaf node, set the nanovg transform matrix and
            ;; call the render callback
            (let ((winWidth (GUI_width gui))
                  (winHeight (GUI_height gui))
                  (vg (GUI_context gui)))
              (nvgResetTransform vg)
              (nvgScale vg winWidth winHeight)
              (nvgTranslate vg (/ x winWidth) (/ y winHeight))
              ((Widget_cb widget) widget)
              null)
            ;; otherwise recurse into the child widgets
            (begin
              (gui_render_subtree gui
                                  (Widget_left_child widget)
                                  x
                                  y
                                  w
                                  (* (Widget_size (Widget_left_child widget)) h))
              (gui_render_subtree gui
                                  (Widget_right_child widget)
                                  x
                                  (+ y (* (Widget_size (Widget_left_child widget)) h))
                                  w
                                  (* (Widget_size (Widget_right_child widget)) h))
              (convert null))))))

(bind-func gui_render
  (lambda (gui:GUI*)
    (glClear (bitwise-or GL_COLOR_BUFFER_BIT
                         GL_DEPTH_BUFFER_BIT
                         GL_STENCIL_BUFFER_BIT))
    (nvgBeginFrame (GUI_context gui)
                   (convert (GUI_width gui))
                   (convert (GUI_height gui))
                   (GUI_pixel_ratio gui))
    (gui_render_subtree gui (GUI_root gui) 0. 0. (GUI_width gui) (GUI_height gui))
    (nvgEndFrame (GUI_context gui))
    (glfwPollEvents)
    (glfwSwapBuffers (GUI_window gui))))

(bind-func Widget_leaf_p
  (lambda (widget:Widget*)
    (and (null? (Widget_left_child widget))
         (null? (Widget_right_child widget)))))

(bind-func Widget_inner_p
  (lambda (widget:Widget*)
    (not (Widget_leaf_p widget))))

(bind-func Widget_parent_p
  (lambda (child:Widget* parent:Widget*)
    (= (Widget_parent child) parent)))

(bind-func Widget_child_p
  (lambda (parent:Widget* child:Widget*)
    (or (= (Widget_left_child parent) child)
        (= (Widget_right_child parent) child))))

;; walk the widget tree (preorder), applying fn to each widget
(bind-func Widget_walk_preorder
  (lambda (widget:Widget* visit_fn:[void,Widget*]*)
    (if (null? widget)
        widget
        (begin
          (visit_fn widget)
          (Widget_walk_preorder (Widget_left_child widget) visit_fn)
          (Widget_walk_preorder (Widget_right_child widget) visit_fn)
          null))))

;; returns the first widget for which pred returns true
(bind-func Widget_find_preorder
  (lambda (widget:Widget* pred:[i1,Widget*]*)
    (if (and (not (null? widget)) (pred widget))
        widget
        (if (not (null? widget))
            (begin
              (Widget_find_preorder (Widget_left_child widget) pred)
              (Widget_find_preorder (Widget_right_child widget) pred))
            null))))

;; some useful helper search functions

(bind-func gui_find_parent
  (lambda (gui:GUI* widget:Widget*)
    (Widget_find_preorder
     (GUI_root gui)
     (lambda (w)
       (Widget_parent_p widget w)))))

(bind-func gui_find_leaf
  (lambda (gui:GUI*)
    (Widget_find_preorder
     (GUI_root gui)
     Widget_leaf_p)))

(bind-func gui_find_widget_with_id
  (lambda (gui:GUI* id:i32)
    (Widget_find_preorder
     (GUI_root gui)
     (lambda (w)
       (= (Widget_id w) id)))))

(bind-poly gui_find Widget_find_preorder)
;; (bind-poly gui_find gui_find_parent) ;; this is perhaps too confusing
(bind-poly gui_find gui_find_widget_with_id)

;; modify the GUI tree

(bind-func gui_add_widget_left
  (lambda (gui:GUI* new_widget:Widget*)
    (if (not (Widget_leaf_p  new_widget))
        (begin (println "Cannot add non-leaf widget")
               new_widget)
        (let ((old_leaf (gui_find_leaf gui)))
          (if (null? old_leaf)
              (GUI_set_root gui new_widget)
              (let ((old_size (Widget_size old_leaf))
                    (new_size (Widget_size new_widget))
                    (total_size (+ old_size new_size))
                    (new_lchild new_widget)
                    (new_rchild old_leaf)
                    (new_parent (Widget_h -1
                                          old_size
                                          (Widget_type old_leaf)
                                          null
                                          (Widget_parent old_leaf)
                                          new_lchild
                                          new_rchild)))
                ;; normalise new widget size
                (Widget_set_size new_lchild (/ new_size total_size))
                (Widget_set_size new_rchild (/ old_size total_size))
                ;; set up new parent pointers
                (Widget_set_parent new_lchild new_parent)
                (Widget_set_parent new_rchild new_parent)
                ;; return the new_lchild
                new_lchild))))))

;; add widgets to left by default
(bind-poly gui_add_widget gui_add_widget_left)

(bind-func gui_validate
  (lambda (gui:GUI*)
    ;; check that all nodes are either full, or leaves
    (null?
     (Widget_find_preorder
      (GUI_root gui)
      (lambda (w)
        ;; need an exclusive or...
        (not (or (and (null? (Widget_left_child w))
                      (null? (Widget_right_child w)))
                 (and (not (null? (Widget_left_child w)))
                      (not (null? (Widget_right_child w)))))))))))

;;;;;;;;;;;;;
;; widgets ;;
;;;;;;;;;;;;;

;; not sure if I'll use these, but...
(bind-val Widget_button i64 (real->integer (expt 2 0)))
(bind-val Widget_label i64 (real->integer (expt 2 1)))
(bind-val Widget_image i64 (real->integer (expt 2 2)))
(bind-val Widget_fbo i64 (real->integer (expt 2 3)))

;; button

(bind-func gui_button_create
  (lambda (gui:GUI* label:i8* r:float g:float b:float)
    (let ((cb (lambda (widget:Widget*)
                (println "inwidget" (Str label) gui widget)
                (nvgSave (GUI_context gui))
                (nvgBeginPath (GUI_context gui))
                ;; assume matrix transform -> [0,1]^2 has been applied
                (nvgFillColor (GUI_context gui) (nvgRGBf r g b))
                (nvgRect (GUI_context gui) 0. 0. 1. 1.)
                (nvgFill (GUI_context gui))
                (nvgRestore (GUI_context gui))
                void)))
      (Widget_h 1 1.0 Widget_button cb null null null))))

(impc:aot:insert-footer "xtmgui")
(define *xtmlib-gui-loaded* #t)
