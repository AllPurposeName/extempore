;;; pic.xtm:libs -- PIC plasma physics simulation library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libpic2.dylib

;;; Commentary:

;; This library uses Viktor Decyk's PIC simulation codes
;; (https://idre.ucla.edu/hpc/parallel-plasma-pic-codes) to perform a
;; particle-in-cell plasma physics simulation

;; To use this library in Extempore, first get the (slightly modified)
;; basic pic2 serial codes from

;; https://github.com/benswift/pic2

;; then build thd dylib with `make shared'

;; then see examples/external/pic.xtm

;;; Code:

(sys:load "libs/external/graphics-pipeline.xtm")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libpic2
  (cond ((string=? (sys:platform) "OSX")
         "libpic2.dylib")
        ((string=? (sys:platform) "Linux")
         "libpic2.so")
        ((string=? (sys:platform) "Windows")
         "libpic2.dll")
        (else
         (begin (print-with-colors 'red 'default #f (print "Error"))
                (print ": unsupported platform ")
                (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

(bind-type timeval <i64,i64>) ;; <time_t,suseconds_t>

;; from pic2.h

(bind-lib libpic2 dtimer [void,double*,timeval*,i32]*)
(bind-lib libpic2 main [i32,i32,i8**]*)

;; from push2.h

(bind-lib libpic2 ranorm [double]*)
(bind-lib libpic2 randum [double]*)
(bind-lib libpic2 cdistr2 [void,float*,float,float,float,float,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cgpush2l [void,float*,float*,float,float,float*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cdgpush2l [void,double*,double*,double,double,double*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cgpost2l [void,float*,float*,float,i32,i32,i32,i32]*)
(bind-lib libpic2 cdsortp2yl [void,float*,float*,i32*,i32,i32,i32]*)
(bind-lib libpic2 ccguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libpic2 caguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libpic2 cpois22 [void,Complexf*,Complexf*,i32,Complexf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2rinit [void,i32*,Complexf*,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2rxx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2rxy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2r2x [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2r2y [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2rx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2r2 [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32]*)

;; main

(bind-func run_main
  (lambda ()
    (main 0 null)))

;; (run_main)

;; now for the xtlang version

;; allocate arrays for standard code
(bind-val part float*)
(bind-val part2 float*)
(bind-val tpart float*)
(bind-val qe float*)
(bind-val fxye float*)
(bind-val field float*)
(bind-val ffc Complexf*)
(bind-val mixup i32*)
(bind-val sct Complexf*)
(bind-val npicy i32*)
;; and a vbo for the graphics code
(bind-val vbo E_vbo*)


(define run-pic
  (lambda (delta-t)
    (let ((ntime (pic_step)))
      (if (= (modulo ntime 1000) 0)
          (println 'ntime: ntime)))
    ;; (draw_energy_hud)
    (gl_draw_particles (pic_step.nx))
    (gl:swap-buffers *gl-ctx*)
    (callback (+ (now) (* *second* delta-t))
              'run-pic
              delta-t)))
