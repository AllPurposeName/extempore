Extempore is a new live-coding environment which borrows a core
foundation from the Impromptu environment
(http://impromptu.moso.com.au).  Extempore is named as a nod to the
Impromptu project from which it was seeded.

At this stage in the project Extempore exists as a "developers" seed
project.  It is in a useable state but is not regarded as stable for
end-users.  Binaries will be made available when the project reaches a
more user friendly state.



Current Status:

Extempore is currently in a functional although unstable state. There
are known stability issues that will be resolved but are not currently
considered a high priority. In practice this means that Extempore is
useable for personal projects but should not currently be used for
live, or public performance.

Extempore's support for 3rd party libraries is fully dynamic. This
means that Extempore binds to dynamic libraries at runtime.  There are
a number of example libraries which can be found in the libs
directory.  Many (although not all) of these libraries require you to
install a 3rd party library (.so for linux .dylib for OSX).  In
particular there is an 'example' DSP library and a library binding
Extempore to the Horde3D game engine.

Although Extempore is immature it is worth mentioning that it is
already being used to develop some substantial audiovisual software.



Open Source - Open Platform:

Extempore currently builds on both OSX and Linux platforms and should
easily port to any UNIX environment.  The project intends to also
extend to the Windows platform at some point in the not to distant
future.

The project is released under a BSD style licence.


Community:

Please jump on in - there is loads to do - even if you're not a C/C++
developer!

I have started a google group called "Extempore"
http://groups.google.com/group/extemporelang.  Joining this group is
probably your best first step in getting involved.

Here is a list of just a few of the things off the top of my head that
would be very useful contributions for people to make.

1) Developer documentation.  Doco describing the overall layout of the
system, the task scheduling system, the various FFI interfaces, any
build requirements etc.. Of course I'm happy to help with this but it
would be really great if someone could make a start on this *as they
learn the system*.  That way the doco would be a practical guide from
someone who is also going through the motions of learning their way
around.  (also a good opportunity to clean up the code!)

2) End user documentation repo.  From experience with the Impromptu
project it would be great if someone could start working on end-user
documentation (particularly function documentation) right from the
outset.  This means doco can be added as the system grows rather than
tagging it on as an after thought.  It would be great to integrate the
doco repository directly into the language infrastructure this time
around.

3) At this stage Emacs is the only *supported* editor.  However, this
support is extremely rudimentary.  It would be excellent if someone
with some emacs hacking skills could ramp up the extempore.el.  It
would be nice to have some of the features of impromptu's editor
(better support for keyword highlighting, context sensitive tie in to
the help system, decent tab-completion and alike)

4) Port to Windows.  Should be reasonably straight forward at the moment.

5) It would be great to get some kind of basic web site in place.

6) Most importantly there are many decisions to make in terms of
development ideas and priorities so join the google group and get your
hands dirty.