;; 
;; Copyright (c) 2011, Andrew Sorensen
;; 
;; All rights reserved.
;; 
;; 
;; Redistribution and use in source and binary forms, with or without 
;; modification, are permitted provided that the following conditions are met:
;; 
;; 1. Redistributions of source code must retain the above copyright notice, 
;;    this list of conditions and the following disclaimer.
;; 
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation 
;;    and/or other materials provided with the distribution.
;; 
;; Neither the name of the authors nor other contributors may be used to endorse
;; or promote products derived from this software without specific prior written 
;; permission.
;; 
;; 
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
;; ARE DISCLEXTD. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
;; POSSIBILITY OF SUCH DAMAGE.
;; 
;; 


;; extempore.xtm is loaded automatically by all processes on startup
;; extempore.xtm is for xtlang as scheme.xtm is for scheme.

(suppress-compiler-messages #t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SETUP NAN's
(bind-val NaNf float 0.0)
(bind-val NaNd double 0.0)

(bind-func set_float_nans_
  (lambda ()
    (let ((nan32 #x7FC00000)
          (nan64 #x7FFC000000000000)
          (n32:i32* (alloc))
          (n64:i64* (alloc)))
      (pset! n32 0 nan32)
      (pset! n64 0 nan64)
      (set! NaNf (pref (cast n32 float*) 0))
      (set! NaNd (pref (cast n64 double*) 0))
      void)))

(set_float_nans_)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some global aliases

(bind-alias bool i1)
(if (= (sys:pointer-size) 64)
    (bind-alias size_t i64)
    (bind-alias size_t i32))
(bind-alias enum i32)

;;;;;;;;;;;;; this for audio ;;;;;;;;;;;;;;;;;;
;; THESE ALL NEED TO BE CHANGED TOGETHER!!!!
(bind-alias SAMPLE float)
(bind-func audio_64bit (lambda () #f))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-poly random imp_randf)
(bind-poly random imp_randd)
(bind-poly random imp_rand1_i32)
(bind-poly random imp_rand2_i32)
(bind-poly random imp_rand1_i64)
(bind-poly random imp_rand2_i64)
(bind-poly random imp_rand1_f)
(bind-poly random imp_rand2_f)
(bind-poly random imp_rand1_d)
(bind-poly random imp_rand2_d)

(bind-poly cos cosf)
(bind-poly cos cosd)
(bind-poly tan tanf)
(bind-poly tan tand)
(bind-poly sin sinf)
(bind-poly sin sind)
(bind-poly cosh coshf)
(bind-poly cosh coshd)
(bind-poly tanh tanhf)
(bind-poly tanh tanhd)
(bind-poly sinh sinhf)
(bind-poly sinh sinhd)
(bind-poly acos acosf)
(bind-poly acos acosd)
(bind-poly asin asinf)
(bind-poly asin asind)
(bind-poly atan atanf)
(bind-poly atan atand)
(bind-poly atan2 atan2f)
(bind-poly atan2 atan2d)
(bind-poly ceil ceilf)
(bind-poly ceil ceild)
(bind-poly floor floorf)
(bind-poly floor floord)
(bind-poly exp expf)
(bind-poly exp expd)
(bind-poly fmod fmodf)
(bind-poly fmod fmodd)
(bind-poly pow powf)
(bind-poly pow powd)
(bind-poly log logf)
(bind-poly log logd)
(bind-poly log2 log2f) 
(bind-poly log2 log2d) 
(bind-poly log10 log10f)
(bind-poly log10 log10d)
(bind-poly sqrt sqrtf)
(bind-poly sqrt sqrtd)
(bind-poly fabs fabsf)
(bind-poly fabs fabsd)

;;;;;;;;;;;;;;;;
;; printing

;; prints a line break
(bind-func print_return
  (lambda () (printf "\n") void))

;; prints a space
(bind-func print_space
  (lambda () (printf " ") void))

(bind-func print_i1
  (lambda (x:i1) (printf "%d" x) void))

(bind-func print_i8
  (lambda (x:i8) (printf "%d" x) void))

(bind-func print_i32
  (lambda (x:i32) (printf "%d" x) void))

(bind-func print_i64
  (lambda (x:i64) (printf "%lld" x) void))

(bind-func print_f
  (lambda (x:float) (printf "%f" (ftod x)) void))

(bind-func print_d
  (lambda (x:double) (printf "%f" x) void))

(bind-poly print print_i1)
(bind-poly print print_i8)
(bind-poly print print_i32)
(bind-poly print print_i64)
(bind-poly print print_f)
(bind-poly print print_d)

;; generics here for catchall!
(bind-func print:[void,!a]
  (lambda (x) (printf "_") void))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; equality

;; this is the catch-all for equality testing
;; covers all numeric types
;; will also catch all for all pointer types
;; which compares against memory address
;; otherwise expect poly override
;;
;; i.e. see string below
(bind-func equal:[bool,!a,!b]*
  "Basic equality check"
  (lambda (a b)
    (= a b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XTLang strings

(bind-type String <size_t,i8*>)


;; override default constructors
(bind-func String
  (lambda (lgth s)
    (let ((news:i8* (zalloc lgth))
          (str:String* (zalloc)))
      (strcpy news s)
      (tset! str 0 lgth)
      (tset! str 1 news)
      str)))

(bind-func String_h
  (lambda (lgth s)
    (let ((news:i8* (halloc lgth))
          (str:String* (halloc)))
      (strcpy news s)
      (tset! str 0 lgth)
      (tset! str 1 news)
      str)))

;; must be a Halloced string!
(bind-func Delete_String
  (lambda (str:String*)
    (free (tref str 1))
    (free str)
    void))


;; String printing!
(bind-func String_print:[void,String*]*
  (lambda (x)
    (printf "'%s'" (tref x 1))
    void))

(bind-poly print String_print)

;; lenght of string is the current
;; length of the cstr within string
(bind-func string_length
  (lambda (str:String*)
    (strlen (tref str 1))))

;; size of string is the total allowable
;; buffer size for string, which can be
;; larger than (string_length)
(bind-func string_size
  (lambda (str:String*)
    (tref str 0)))

(bind-func string_cstr
  (lambda (str:String*)
    (tref str 1)))

(bind-func cstr_from_string
  (lambda (str:String*)
    (tref str 1)))

(bind-func cstr_length
  (lambda (str:String*)
    (strlen (tref str 1))))

;; create easy Data constructors from CStrings
(bind-func Str_cptr
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String lgth s)))
      str)))

(bind-func Str_string
  (lambda (s:String*)
    (let ((lgth (string_length s))
          (str (String lgth (string_cstr s))))
      str)))

(bind-poly Str Str_cptr)
(bind-poly Str Str_string)

(bind-func Str_h_cptr
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String_h lgth s)))
      str)))

(bind-func Str_h_string
  (lambda (s:String*)
    (let ((lgth (string_length s))
          (str (String_h lgth (string_cstr s))))
      str)))

(bind-poly Str_h Str_h_cptr)
(bind-poly Str_h Str_h_string)

(bind-func string_cat
  (lambda (s1:String* s2:String*)
    (let ((size (+ (tref s1 0) (tref s2 0)))
          (news:i8* (zalloc size)))
      (strcpy news (tref s1 1))
      (strncat news (tref s2 1) size)
      (Str news))))

(bind-func string_cat_h
  (lambda (s1:String* s2:String*)
    (let ((size (+ (tref s1 0) (tref s2 0)))
          (news:i8* (zalloc size)))
      (strcpy news (tref s1 1))
      (strncat news (tref s2 1) size)
      (Str_h news))))

(bind-func string_cmp
  (lambda (s1:String* s2:String*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        #t #f)))

;; bind to eq
(bind-poly equal string_cmp)

;; levenshtein edit distance
(bind-func string_levenshtein
  (lambda (s:String* t:String*)
    (let ((i 0) (j 0)
	  ;; column-major indexing closure
	  (s_cstr (cstr_from_string s))
	  (slen:i64 (string_size s))
	  (t_cstr (cstr_from_string t))
	  (tlen:i64 (string_size t))
	  (row:i64* (salloc (+ slen 1)))
	  (prev_row:i64* (salloc (+ slen 1)))
	  (min3 (lambda (a:i64 b c)
		  (if (< a b)
		      (if (< a c)
			  a c)
		      (if (< b c)
			  b c)))))
      (dotimes (i (+ tlen 1))
	(pset! prev_row i i))
      (dotimes (i slen)
	(pset! row 0 (+ i 1))
	(dotimes (j tlen)
	  (pset! row (+ j 1)
		 (min3 (+ (pref row j) 1)
		       (+ 1 (pref prev_row (+ j 1)))
		       (+ (pref prev_row j)
			  (if (= (pref s_cstr j)
				 (pref t_cstr i))
			      0 1)))))
	(let ((tmp_row:i64* null))
	  (set! tmp_row prev_row)
	  (set! prev_row row)
	  (set! row tmp_row)))
      (pref prev_row tlen))))

(bind-func string_similarity
  (lambda (s:String* t:String*)
    (/ 1.0 (i64tod (+ 1 (string_levenshtein s t))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(sys:load "libs/core/adt.xtm")

(suppress-compiler-messages #f)
