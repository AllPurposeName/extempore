;;; tests/adt.xtm -- unit tests for libs/core/adt.xtm

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;

;;; Code:

(sys:load "tests/test.xtm")
(sys:load "libs/core/adt.xtm")

(bind-func test_point_1
  (lambda ()
    (let ((pt (Point 9 4)))
      (+ (first pt)
         (second pt)))))

(test-xtfunc (test_point_1) 13)

(bind-func test_point_2
  (lambda ()
    (let ((pt1 (Point 9 4))
          (pt2 (Point .3 .6)))
      (+ (convert (+ (first pt1)
                     (second pt1)))
         (+ (first pt2)
            (second pt2))))))

(test-xtfunc (test_point_2) 13.9)

(print-test-results)

(bind-func test_list_ptr
  (lambda ()
    (let ((lst_ptr:List** (alloc 2)))
      (pset! lst_ptr 0 (list 1 2 3))
      (pset! lst_ptr 1 (list 4 5 6))
      (nth (pref lst_ptr 1) 1))))

(test-xtfunc (test_list_ptr) 5)

(bind-func test_copy_list
  (lambda ()
    (letz ((l1 (list 1 2 3))
           (l2 (copy l1)))
      (and (equal l1 l2)
           (not (= l1 l2))))))

(test-xtfunc (test_copy_list) 1)

(bind-func test_nth_tail
  (lambda ()
    (let ((lst (list 1 2 3)))
      (nth_tail lst -3)
      (length (nth_tail lst 6)))))

(test-xtfunc (test_nth_tail) 0)

(bind-func test_nth_tailr
  (lambda ()
    (let ((lst (list 1 2 3)))
      (nth_tailr lst -3)
      (length (nth_tailr lst 6)))))

(test-xtfunc (test_nth_tailr) 0)

(bind-func test_nth_tail_both
  (lambda ()
    (let ((lst (list 1 2 3)))
      (equal (nth_tail lst 1)
             (nth_tailr lst 1)))))

(test-xtfunc (test_nth_tail_both) 1)

(bind-func test_list_take
  (lambda ()
    (let ((lst (list 1 2 3)))
      (equal (take lst 2)
             (list 1 2)))))

(test-xtfunc (test_list_take) 1)

(bind-func test_list_take_2
  (lambda ()
    (let ((lst (list 1 2 3)))
      (length (take lst 1000)))))

(test-xtfunc (test_list_take_2) 3)

(bind-func test_list_drop
  (lambda ()
    (let ((lst (list 1 2 3)))
      (equal (drop lst 1)
             (list 2 3)))))

(test-xtfunc (test_list_drop) 1)

(bind-func test_list_drop_2
  (lambda ()
    (let ((lst (list 1 2 3)))
      (length (drop lst 1000)))))

(test-xtfunc (test_list_drop_2) 0)

;; dict

(bind-func test_dict_get_1
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2))))
      (dict_get d (Str "one")))))

(test-xtfunc (test_dict_get_1) 1)

(bind-func test_dict_get_2
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2))))
      (dict_get d (Str "three")))))

(test-xtfunc (test_dict_get_2) 0)

(bind-func test_dict_set_1
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2)))
          (oldval (dict_set d (Str "two") 3)))
      (and (= oldval 2)
           (= (dict_get d (Str "two")) 3)))))

(test-xtfunc (test_dict_set_1) 1)

(bind-func test_dict_set_2
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2))))
      (dict_set d (Str "three") 3)
      (println d)
      (and (= (length d) 3)
           (= (dict_get d (Str "three")) 3)))))

(test-xtfunc (test_dict_set_2) 1)

(bind-func test_dict_update_1
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2)))
          (oldval (dict_update d
                               (Str "two")
                               (lambda (v) (+ v 1)))))
      (and (= oldval 2)
           (= (dict_get d (Str "two")) 3)))))

(test-xtfunc (test_dict_update_1) 1)

(bind-func test_dict_update_2
  (lambda ()
    (let ((d (list (Pair (Str "one") 1)
                   (Pair (Str "two") 2))))
      (dict_update d (Str "three") (lambda (v) (+ v 1)))
      (println d)
      (and (= (length d) 3)
           (= (dict_get d (Str "three")) 1)))))

(test-xtfunc (test_dict_update_2) 1)
