;;; tests/test.xtm -- testing framework for Extempore

;; Author: 
;; Keywords: extempore
;; Required dylibs: 

;;; Commentary:

;; These functions & macros provide a basic unit testing framework for
;; Extempore - load before running any of the other .xtm files in
;; tests/

;; To test an xtlang function, bind-func it, and then call it inside
;; an test-xtfunc wrapper, e.g.

;; to only test if if compiles:
;; (test-xtfunc (test_bit_twiddle_2))

;; to test on an i64 return value (second argument)
;; (test-xtfunc (test_bit_twiddle_2) 0)

;; To run the tests, M-x eval-buffer (in the buffer with the tests in
;; it, not this one). Once you've run all the test-xtfunc tests,
;; (print-test-results) does what it says on the tin.

;;; Code:

(sys:load-preload-check 'test)
(define *xtmlib-test-loaded* #f)
(print "\nLoading test library...")

(define *func-successes*
  '((correct)
    (incorrect)
    (compile)
    (no-compile)))

(define-macro (change-test-result category func-sym)
  `(for-each
    (lambda (cat)
      (if (equal? (car cat) ,category)
	  (set-cdr! cat (if (not (member ,func-sym cat))
			    (cons ,func-sym (cdr cat))))
	  (set-cdr! cat (cl:remove ,func-sym (cdr cat)))))
    *func-successes*))

(define-macro (test-xtfunc form . retval)
  `(let ((func-sym (quote ,(car form))))
     (begin
       (change-test-result 'no-compile func-sym)
       (if (defined? func-sym)
	   (begin (change-test-result 'compile func-sym)
		  ,(if (null? retval)
                       `(begin ,form
                               (change-test-result 'correct func-sym))
                       `(if (= ,form ,(car retval))
                            (change-test-result 'correct func-sym)
                            (change-test-result 'incorrect func-sym))))))))

(define print-test-results
  (lambda ()
    (println)
    (print-with-colors 'black 'cyan #t (print " Test results "))
    (print "\n\n")
    (for-each (lambda (result)
                (let ((colour (cdr (assoc (car result) '((correct . green)
                                                         (incorrect . yellow)
                                                         (compile . magenta)
                                                         (no-compile . red))))))
                  (print-with-colors 'cyan 'default #t (print (car result) "\n\n"))
                  (for-each (lambda (fn)
                              (print "- ")
                              (print-with-colors colour 'default #f (print fn "\n")))
                            (cdr result))
                  (println)))
              *func-successes*)))

(define *xtmlib-test-loaded* #t)
(print-with-colors 'green 'default #f (print " done.\n\n"))
