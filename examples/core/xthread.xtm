;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; native threads for xtlang
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(sys:load "libs/core/xthread.xtm")

(bind-func divide-and-conquer  
  (lambda (cnt:i32)
    (spawn (lambda ()
             (printf "cnt:%d thread:%p\n" cnt (thread_self))
             (thread_sleep 1 0) ;; first arg seconds second nanoseconds 
             (if (> cnt 0)
                 (begin (divide-and-conquer (- cnt 1))
                        (divide-and-conquer (- cnt 1))))
             void))
    void))

(divide-and-conquer 3)

;; forka and join
(bind-func fork-join
  (lambda ()
    (memzone (* 1024 1024)
      (let ((i 0))
        (printout "Finish Order: ")
        (sync
         (dotimes (i 4)
           (spawn (let ((jj i)) ;; each closure needs it's own i!
                    (lambda ()
                      (thread_sleep (dtoi64 (* 10. (random))) 0)
                      (printout jj)))))
         1)
        (println)
        (println "Joined\n")
        1))))

(fork-join)

;; futures using async

;;
;; async returns a 'future' which will
;; block until a result is ready.
;; 
(bind-func await_futures
  (lambda (num:i64)
    (let ((future1 (async (lambda () ;; aysnc accepts zero arguments
                            (println "start async 1")
                            (let ((res 0))
                              (thread_sleep 2 0)
                              (doloop (i num) (set! res (+ res (* i i i))))
                              (println "done with async 1")
                              5))))
          (future2 (async (lambda (x) ;; async also optionally accepts one argument
                            (println "start async 2")
                            (thread_sleep 3 0)
                            (println "done with async 2")
                            x)
                          10)) ;; must give async the argument to be applied!
          (res 0))
      (thread_sleep 0 50000) 
      (println "Do some other work while we WAIT!")
      ;; add two futures!
      (set! res (+ (future1) (future2)))
      (println "(future1) + (future2) =" res)
      res)))

(await_futures 100000)
