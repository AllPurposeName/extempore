;;; portmidi.xtm:examples -- portmidi example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libportmidi

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/external/portmidi.xtm")

(pm_initialize)
(pm_print_devices)

;; we'll just create one input and one output device (midi_in and
;; midi_out), but by passing the appropriate device index arguments to
;; pm_create_input_stream and pm_create_output_stream you can create
;; as many as you like
(bind-val midi_in PmStream* (pm_create_input_stream (Pm_GetDefaultInputDeviceID)))
(bind-val midi_out PmStream* (pm_create_output_stream (Pm_GetDefaultOutputDeviceID)))

(bind-func midi_read_loop
  "a callback loop to call Pm_Read on all the midi devices

This will pick up any incoming MIDI messages - handle them however you
like."
  (let ((input_buffer:PmEvent* (zalloc PM_MIDI_BUFFER_SIZE))
        (read_count 0)
        (i:i32 0))
    (lambda (time:i64 delta_t:double)
      ;; if you have more than one midi input device, you should call
      ;; Pm_Read on all your devices here
      (set! read_count (Pm_Read midi_in input_buffer PM_MIDI_BUFFER_SIZE))
      ;; (println "read_count:" (convert read_count i32))
      (if (> read_count 0)
          (dotimes (i read_count)
            (cond ((= (Pm_MessageStatus (PmEvent_message (pref-ptr input_buffer i))) MIDI_NOTE_ON)
                   (println "note: ON pitch:"
                            (Pm_MessageData1 (PmEvent_message (pref-ptr input_buffer i)))
                            "velocity:"
                            (Pm_MessageData2 (PmEvent_message (pref-ptr input_buffer i)))))
                  ((= (Pm_MessageStatus (PmEvent_message (pref-ptr input_buffer i))) MIDI_NOTE_OFF)
                   (println "note: OFF pitch:"
                            (Pm_MessageData1 (PmEvent_message (pref-ptr input_buffer i)))
                            "velocity:"
                            (Pm_MessageData2 (PmEvent_message (pref-ptr input_buffer i)))))
                  (else
                   (println "midi recv:" i (pref-ptr input_buffer i))))))
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time midi_read_loop next_time delta_t)))))

;; start the read loop
(midi_read_loop (now) .01) ;; 100Hz

;; Scheme MIDI I/O

;; let's grab a handle for our midi out device in scheme
(bind-func get_midi_out
  (lambda ()
    midi_out))
(define *midi-out* (get_midi_out))

(play-midi-note (now) *midi-out* (random 60 72) (random 60 90) 44100)

