;;; portmidi.xtm:examples -- portmidi example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libportmidi

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/external/portmidi.xtm")

(call-as-xtlang
 (if (<> (Pm_Initialize) pmNoError)
     (println "Error initialising Portmidi")
     (println "Portmidi successfully initialised.")))

(call-as-xtlang
 (let ((ndev (Pm_CountDevices)))
   (println "Portmidi: found" ndev "devices")
   (doloop (i ndev)
     (println "device" i (Pm_GetDeviceInfo i)))))

(bind-val midi_in PmStream*)
(bind-val midi_out PmStream*)

(bind-func current_time_in_ms
  (lambda (time_info:i8*)
    (convert (* 1000.:f (/ (convert (now) float) 44100.:f)) i32)))

(bind-func set_default_midi_io_vars
  "initialise midi_in and midi_out devices

This is just for testing. Have a look at the device IDs which you just
printed to your log to figure out which IDs you should use."
  (lambda (in_device_id out_device_id)
    (let ((inptr:PmStream** (salloc))
          (outptr:PmStream** (salloc)))
      (if (<> (Pm_OpenInput inptr in_device_id null 1 (convert (get_native_fptr current_time_in_ms)) null)
              pmNoError)
          (println "Error opening input port"))
      (if (<> (Pm_OpenOutput outptr out_device_id null 1 (convert (get_native_fptr current_time_in_ms)) null 0)
              pmNoError)
          (println "Error opening output port"))
      (set! midi_in (pref inptr 0))
      (set! midi_out (pref outptr 0)))))

;; check what your input and output device IDs are!
(set_default_midi_io_vars 0 1)

(bind-func midi_read_loop
  (let ((buffer_length 1024)
        (input_buffer:PmEvent* (zalloc buffer_length))
        (read_count 0)
        (i:i32 0))
    (lambda (time:i64 delta_t:double)
      (set! read_count (Pm_Read midi_in input_buffer buffer_length))
      (if (> read_count 0)
          (dotimes (i read_count)
            (println "midi recv:" i (pref-ptr input_buffer i))))
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time midi_read_loop next_time delta_t)))))

;; start the read loop
(midi_read_loop (now) .01) ;; 100Hz

;; now, let's send a (single) message
(call-as-xtlang (Pm_WriteShort midi_out 0 (Pm_Message MIDI_NOTE_ON (random 60 80) 80)))

;; turn off the read loop
(bind-func midi_read_loop
  (lambda (time:i64 delta_t:double)
    (println "midi_read_loop callback stopped")
    #f))
