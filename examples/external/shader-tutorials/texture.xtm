(sys:load "libs/external/shaders-v2.xtm")

(bind-val window GLFWwindow*)

(call-as-xtlang
 (glfw_init)
 (glfw_set_core_profile)
 (set! window (glfw_create_fullscreen_window))
 (glfwMakeContextCurrent window)
 (gl_print_driver_info))

(bind-val fullscreen_quad_vert_data float* 16)
(bind-val texture_data float* (* 4 2 4)) ;; 4x2 RGBA

(bind-val tex Texture*)
(bind-val vbo VBO*)
(bind-val vao VAO*)
(bind-val sp ShaderProgram*)

(bind-func texture_setup
  (lambda (tex)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (Texture_id tex))
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RED
                  4 2 ;; texture is 4x2 float
                  0
                  GL_RED
                  GL_FLOAT
                  (convert texture_data))
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
    (gl_print_error "in texture_setup")))

(bind-func create_texture_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_texture_shader (file->string "examples/external/shader-tutorials/texture.vert")
                       (file->string "examples/external/shader-tutorials/texture.frag"))

;; simple grey(ish) blocky gradient
(call-as-xtlang
 (doloop (i 8)
   (pset! texture_data i (/ (convert i) 8.))))

;; init
(call-as-xtlang
 (pfill! fullscreen_quad_vert_data
         ;; pos         texcoord
         -0.75  0.75    0.0 0.0
          0.75  0.75    1.0 0.0
         -0.75 -0.75    0.0 1.0
          0.75 -0.75    1.0 1.0)
 (set! vbo (create_vbo fullscreen_quad_vert_data 16))
 (set! vao (create_vao))
 (bind_attribute vao vbo 0 2 4 0) ;; position
 (bind_attribute vao vbo 1 2 4 2) ;; tex_coord
 (set! tex (create_texture))
 (texture_setup tex)
 void)

(bind-func gl_draw
  (lambda ()
    (glClear GL_COLOR_BUFFER_BIT)
    ;; draw the world
    (let ((program_id (ShaderProgram_id sp))
          (texloc (glGetUniformLocation program_id "tex")))
      (glUseProgram program_id)
      (glUniform1i texloc 0))
    (draw_vertex_array vao GL_TRIANGLE_STRIP 0 4)
    (glfwSwapBuffers window)
    void))

;; run once
(gl_draw)

;; ok, let's use a more sophisticated (image) texture

(call-as-xtlang
 ;; (delete_texture tex)
 (set! tex (bind_image_texture (create_texture) "assets/images/image.png"))
 (if (null? tex)
     (println "Whoops - tex is null")))

;; run it again
(gl_draw)
