(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

;; a basic 2D particle with position and velocity
;;                  <x     y     vx    vy   >
;; (bind-type Particle <float,float,float,float>)

(bind-val num_particles i64 10)
(bind-val particles float* (* 4 (call-as-xtlang num_particles)))

;; (bind-func distribute_particles
;;   "randomly initialise the particles to "
;;   (lambda (np)
;;     (doloop (i np)
;;       (tset! (pref-ptr particles i) 0 (random -1. 1.))
;;       (tset! (pref-ptr particles i) 1 (random -1. 1.))
;;       (tset! (pref-ptr particles i) 2 (random -1. 1.))
;;       (tset! (pref-ptr particles i) 3 (random -1. 1.)))))

(bind-func distribute_particles
  "randomly initialise the particles to "
  (lambda (np)
    (doloop (i np)
      (pset! particles (+ (* i 4) 0) (random -1. 1.))
      (pset! particles (+ (* i 4) 1) (random -1. 1.))
      (pset! particles (+ (* i 4) 2) (random -1. 1.))
      (pset! particles (+ (* i 4) 3) (random -1. 1.)))))

(bind-func print_particle
  (lambda (p:float*)
    (printf "<%.2f %.2f %.2f %.2f>\n"
            (convert (pref p 0) double)
            (convert (pref p 1) double)
            (convert (pref p 2) double)
            (convert (pref p 3) double))))

;; (bind-func move_particles
;;   "move the particles according to their velocities"
;;   (lambda (np:i64 step:float)
;;     (let ((p:Particle* null))
;;       (doloop (i np)
;;         (set! p (pref-ptr particles i))
;;         ;; update x pos
;;         (tset! p 0 (% (+ (tref p 0)
;;                          (* (tref p 2) step))
;;                       1.0))
;;         ;; update y pos
;;         (tset! p 1 (% (+ (tref p 1)
;;                          (* (tref p 3) step))
;;                       1.0))))))

(bind-func move_particles
  "move the particles according to their velocities"
  (lambda (np:i64 step:float)
    (let ((p:float* null))
      (doloop (i np)
        (set! p (pref-ptr particles (* i 4)))
        ;; update x pos
        (pset! p 0 (% (+ (pref p 0)
                         (* (pref p 2) step))
                      1.0))
        ;; update y pos
        (pset! p 1 (% (+ (pref p 1)
                         (* (pref p 3) step))
                      1.0))))))

;; OpenGL setup

(call-as-xtlang
 (glEnable GL_PROGRAM_POINT_SIZE))

(bind-val tex Texture*)
(bind-val vbo VBO*)
(bind-val vao VAO*)

(define *particles-shader*
  (create_shader (file->string "examples/external/shader-tutorials/particles.vert")
                 (file->string "examples/external/shader-tutorials/particles.frag")))

;; init
(call-as-xtlang
 (distribute_particles num_particles)
 (set! vbo (create_vbo particles (* num_particles 4))) ;; num_particles = 10
 (bind_vbo vbo)
 (set! vao (create_vao))
 (bind_attribute vao vbo 0 2 16 0)
 (bind_attribute vao vbo 1 2 16 8)
 (set! tex (bind_image_texture (create_texture) "assets/images/star.png"))
 (if (null? tex)
     (println "Whoops - tex is null"))
 void)

;; draw all the things

(bind-func gl_draw
  (lambda (program:GLuint)
    (glClear GL_COLOR_BUFFER_BIT)
    ;; move particles, update VBO
    (move_particles num_particles .01)
    (glBufferSubData GL_ARRAY_BUFFER 0 (* num_particles 16) (VBO_data vbo))
    ;; draw the world
    (let ((texloc (glGetUniformLocation program "tex")))
      (glUseProgram program)
      (glUniform1i texloc 0))
    (draw_vertex_array vao GL_POINTS 0 (convert num_particles))
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (begin
            (gl_draw *particles-shader*)
            (gl:swap-buffers *gl-window*)))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

;; start it running
(gl-loop (now) 1/10)
