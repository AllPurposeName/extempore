(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-val vertices float* 8)
(bind-val colours float* 12)
;; (bind-val texdata float* 12)

(bind-func init_arrays
  (lambda ()
    (glEnable GL_PROGRAM_POINT_SIZE)
    ;; GL_points version
    (pfill! vertices
            -0.5  0.5
             0.5  0.5
            -0.5 -0.5
             0.5 -0.5)
    ;; ;; GL_TRIANGLES_STRIP version
    ;; (pfill! vertices
    ;;         -1.0 -1.0
    ;;         -1.0 1.0
    ;;         1.0 -1.0
    ;;         1.0 1.0)
    ;; (pfill! texdata
    ;;         1.0 0.0 0.0
    ;;         0.0 1.0 0.0
    ;;         0.0 0.0 1.0
    ;;         1.0 1.0 1.0)
    (pfill! colours
            0.0 0.0 1.0
            1.0 0.0 0.0
            1.0 1.0 0.0
            0.0 1.0 1.0)))

(init_arrays)

(define particles-shader
  (create_shader (file->string "examples/external/shader-tutorials/particles.vert")
                 (file->string "examples/external/shader-tutorials/particles.frag")))

(bind-func draw
  (let ((vert_vbo (create_vbo vertices 8))
        (colour_vbo (create_vbo colours 12))
        (star_texture (gl_load_image "assets/images/star.png" star_texture))
        (vao (create_vao vert_vbo 2 colour_vbo 3)))
    (lambda (program)
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D star_texture)
      ;; (glTexImage2D GL_TEXTURE_2D 0 GL_RGB 2 2 0 GL_RGB GL_FLOAT (convert texdata))
      (glUniform1i (glGetUniformLocation program "texStar") 0)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))        
      (glUseProgram program)
      (glBindVertexArray vao)
      (glDrawArrays GL_POINTS 0 4)
      (gl_print_error)
      void)))

(define gl-loop
  (lambda (time delta-t)
    (draw particles-shader)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1)
