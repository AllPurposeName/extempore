(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-val grid_size i64 64)
(bind-val num_arrows i64 (real->integer (expt (call-as-xtlang grid_size) 2)))

;; this will be 'vec2's, in pairs - arrow base, arrow head. so the
;; streaming update only needs to update the `head' vert (assuming the
;; grid stays the same)
(bind-val arrows_verts float* (* (call-as-xtlang num_arrows) 4))

(define *arrows-shader*
  (create_shader (file->string "examples/external/shader-tutorials/arrows.vert")
                 (file->string "examples/external/shader-tutorials/arrows.frag")))

;; set base verts (i.e. every second vec2) to regular grid
(call-as-xtlang
 (let ((idx 0))
   (doloop (i grid_size)
     (doloop (j grid_size)     
       (set! idx (* (+ (* i grid_size) j) 4))
       (pset! arrows_verts
              idx
              (- (* (/ (convert i float) (convert grid_size float)) 2.0) 1.0))
       (pset! arrows_verts
              (+ idx 1)
              (- (* (/ (convert j float) (convert grid_size float)) 2.0) 1.0))))))

;; (call-as-xtlang
;;  (doloop (i 10)
;;    (printf "%f %f %f %f\n"
;;            (convert (pref arrows_verts (+ (* i 4) 0)) double)
;;            (convert (pref arrows_verts (+ (* i 4) 1)) double)
;;            (convert (pref arrows_verts (+ (* i 4) 2)) double)
;;            (convert (pref arrows_verts (+ (* i 4) 3)) double)))
;;  (println))

(bind-func arrows_set_head_vert
  (lambda (x y headxval headyval)
    (let ((idx (* (+ (* x grid_size) y) 4)))
      (pset! arrows_verts
             (+ idx 2)
             (+ (pref arrows_verts idx) headxval))
      (pset! arrows_verts
             (+ idx 3)
             (+ (pref arrows_verts (+ idx 1)) headyval)))))

(bind-func arrows_clockspin_heads
  (lambda (mag off)
    (doloop (i grid_size)
      (doloop (j grid_size)
        (arrows_set_head_vert i j
                              (* mag (sin off))
                              (* mag (cos off)))))))

(bind-val arrows_vbo VBO*)
(bind-val arrows_vao VAO*)

;; init
(call-as-xtlang
 (set! arrows_vbo (create_vbo arrows_verts (convert (* 4 num_arrows))))
 (set! arrows_vao (create_vao))
 (bind_attribute arrows_vao arrows_vbo 0 2)
 void)

(define *arrows-shader*
  (create_shader (file->string "examples/external/shader-tutorials/arrows.vert")
                 (file->string "examples/external/shader-tutorials/arrows.frag")))

(bind-func gl_draw_arrows
  (lambda (program)
    (glClear GL_COLOR_BUFFER_BIT)
    (glBufferSubData GL_ARRAY_BUFFER 0 (VBO_size arrows_vbo) (VBO_data arrows_vbo))
    (glUseProgram program)
    (draw_vertex_array arrows_vao GL_LINES 0 (* 4 (convert num_arrows)))
    void))

(define gl-loop
  (lambda (time delta-t)
    (arrows_clockspin_heads (* (cos (* .00001 time)) .05) (* time 0.0002))
    (gl_draw_arrows *arrows-shader*)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

;; begin the draw loop
(gl-loop (now) 1/30)
