(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(call-as-xtlang
 (glEnable GL_DEPTH_TEST)
 (glDepthFunc GL_LESS))

(bind-val num_arrows i64 (* 64 64))
(bind-val vertices float* (* (call-as-xtlang num_arrows) 4))

(define *arrows-shader*
  (create_shader (file->string "examples/external/shader-tutorials/arrows.vert")
                 (file->string "examples/external/shader-tutorials/arrows.frag")))

(bind-func munge_points
  (lambda (nx:i32 ny:i32 ox:float oy:float)
    (let ((i 0) (j 0) (idx 0)
          (x 0.) (y 0.))
      (dotimes (i nx)
        (dotimes (j ny)
          (set! idx (+ (* (+ (* nx i) j) 4) 0))
          (set! x (- (* (/ (convert i float) (convert nx float)) 2.0) 1.0))
          (set! y (- (* (/ (convert j float) (convert ny float)) 2.0) 1.0))
          ;; (if (> idx (- (* nx ny 4) 10))
          ;;     (println "i:" i "j:" j "idx:" idx))
          (pset! vertices (+ idx 0) x)
          (pset! vertices (+ idx 1) y)
          (pset! vertices (+ idx 2) (+ x (* ox (random -1. 1.))))
          (pset! vertices (+ idx 3) (+ y (* oy (random -1. 1.)))))))))

(bind-val vbo VBO*)
(bind-val vao VAO*)

;; init
(call-as-xtlang
 (set! vbo (create_vbo vertices (convert (* 4 num_arrows))))
 (bind_vbo vbo)
 (set! vao (create_vao))
 (bind_attribute vao vbo 0 2 0 0)
 void)

(define *arrows-shader*
  (create_shader (file->string "examples/external/shader-tutorials/arrows.vert")
                 (file->string "examples/external/shader-tutorials/arrows.frag")))

(bind-func gl_draw
  (lambda (program)
    (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    (glBufferSubData GL_ARRAY_BUFFER 0 (VBO_size vbo) (VBO_data vbo))
    (glUseProgram program)
    (draw_vertex_array vao GL_LINES 0 (* 2 (convert num_arrows)))
    void))

;; draw once
(begin
  (gl_draw *arrows-shader*)
  (gl:swap-buffers *gl-window*))


(define gl-loop
  (lambda (time delta-t)
    (munge_points 64 64
                  (+ .01 (* .01 (cos (* .1 2pi (/ time 44100.)))))
                  (+ .01 (* .01 (cos (* .1 2pi .7 (/ time 44100.))))))
    (gl_draw *arrows-shader*)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1/30)
