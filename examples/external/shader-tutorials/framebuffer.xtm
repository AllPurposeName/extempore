;;; framebuffer.xtm -- OpenGL framebuffer and render-to-texture example
;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/external/glfw3.xtm")

;; init window and OpenGL context

(bind-val window GLFWwindow*)

(bind-val width i32 800)
(bind-val height i32 600)

;; create a window
(call-as-xtlang
 (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
 (set! window (glfw_init_and_create_interaction_window width height)))

;; set up the FBO & backing textures

(bind-val fbo FBO*)
(bind-val draw_bufs GLenum* 1)
(bind-val ss_quad_vao VAO*)

(call-as-xtlang
 (set! fbo (FBO_create_with_texture width height #t))
 (pset! draw_bufs 0 GL_COLOR_ATTACHMENT0)
 (glDrawBuffers 1 draw_bufs)
 (set! ss_quad_vao (VAO_create_ss_quad)))

;; and here's the triangle we eventually want to draw (taken from triangle.xtm)

(bind-val triangle_vert_data |15,float|)
(bind-val view_mat |16,float|) ;; view matrix

(bind-val vbo VBO*)
(bind-val vao VAO*)
(bind-val sp ShaderProgram)

;; init data
(call-as-xtlang
 (afill! triangle_vert_data
         ;; pos      colour
          0.0  0.5   1.0 0.0 0.0
          0.5 -0.5   0.0 1.0 0.0
          -0.5 -0.5   0.0 0.0 1.0)
 (set! vbo (VBO_create (aref-ptr triangle_vert_data 0) 15))
 (set! vao (VAO_create))
 (bind_attribute vao vbo 0 2 5 0) ;; position
 (bind_attribute vao vbo 1 3 5 2) ;; tex_coord
 void)

(bind-func create_triangle_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_triangle_shader (sys:slurp-file "examples/external/shader-tutorials/triangle.vert")
                        (sys:slurp-file "examples/external/shader-tutorials/triangle.frag"))

;; here's our post-processing shader

(bind-val post_process_sp ShaderProgram)

(bind-func create_post_process_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_post_process_shader
 (sys:slurp-file "examples/external/shader-tutorials/framebuffer-post-process.vert")
 (sys:slurp-file "examples/external/shader-tutorials/framebuffer-post-process.frag"))

;; now, to put it all together

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (glViewport 0 0 width height)
    ;; bind the second (render-to-texture) framebuffer
    (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
    ;; clear the framebuffer's colour and depth buffers
    (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; render the triangle as normal
    (glUseProgram sp)
    (let ((loc (glGetUniformLocation sp "view_mat")))
      (glUniformMatrix4fv loc 1 GL_FALSE (aref-ptr view_mat 0))
      (draw_vertex_array vao GL_TRIANGLES 0 3))
    ;; bind default framebuffer
    (glBindFramebuffer GL_FRAMEBUFFER 0)
    ;; clear the framebuffer's colour and depth buffers
    (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; our post-processing shader for the screen-space quad
    (glUseProgram post_process_sp)
    ;; bind the quad's VAO
    (glBindVertexArray (VAO_id ss_quad_vao))
    ;; activate the first texture slot and put texture from previous pass in it
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (FBO_texture fbo))
    ;; draw the quad
    (glDrawArrays GL_TRIANGLE_STRIP 0 4)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...

(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
