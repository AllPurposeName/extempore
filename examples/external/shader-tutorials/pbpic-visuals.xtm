(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

;; OpenGL setup

(call-as-xtlang
 (glDisable GL_DEPTH_TEST)
 (glDepthMask GL_FALSE)
 (glEnable GL_BLEND)
 (glBlendFunc GL_SRC_ALPHA GL_ONE)
 (glEnable GL_PROGRAM_POINT_SIZE)
 (glEnable GL_LINE_SMOOTH)
 void)

;; fields

(bind-val field_vbo VBO*)
(bind-val field_vao VAO*)

(define *field-shader*
  (create_shader (file->string "examples/external/shader-tutorials/pbpic-field.vert")
                 (file->string "examples/external/shader-tutorials/pbpic-field.frag")))

;; this data should have interleaved the `bases' of the field arrows
;; (i.e. the grid) in 2D with the ndim (i.e. 3D) field components

(bind-val field_arrows float* (call-as-xtlang (* 4 nxe ny)))

;; set base verts (i.e. every second vec2) to regular grid
(call-as-xtlang
 (let ((idx 0))
   (doloop (i nxe)
     (doloop (j ny)
       (set! idx (* (+ (* i ny) j) 4))
       (pset! field_arrows
              idx
              (- (* (/ (convert i float) (convert nxe float)) 2.0) 1.0))
       (pset! field_arrows
              (+ idx 1)
              (- (* (/ (convert j float) (convert ny float)) 2.0) 1.0))))))

(bind-func copy_fields_to_arrows_buffer
  (lambda (field:float* scale_factor)
    (let ((idx 0))
      (doloop (i nxe)
        (doloop (j ny)
          (set! idx (* (+ (* i ny) j) 4))
          ;; (println "idx:" idx)
          (pset! field_arrows ;; x component
                 (+ 2 idx)
                 (+ (pref field_arrows (+ 0 idx))
                    (* scale_factor (pref field (+ 2 idx)))))
          (pset! field_arrows ;; y component
                 (+ 3 idx)
                 (+ (pref field_arrows (+ 1 idx))
                    (* scale_factor (pref field (+ 3 idx))))))))))

;; not sure why fxyze tends to get massive (junk) numbers in it, but
;; this hack cleans them out.
(bind-func remove_guff_from_arrows_buffer
  (lambda ()
    (let ((idx 0))
      (doloop (i nxe)
        (doloop (j ny)
          (set! idx (* (+ (* i ny) j) 4))
          ;; (println "idx:" idx)
          (if (> (fabs (pref field_arrows (+ 2 idx))) 1.0)
              (pset! field_arrows
                     (+ 2 idx)
                     (pref field_arrows (+ 0 idx))))
          (if (> (fabs (pref field_arrows (+ 3 idx))) 1.0)
              (pset! field_arrows
                     (+ 3 idx)
                     (pref field_arrows (+ 1 idx)))))))))

;; particles

(bind-val particle_tex Texture*)
(bind-val particle_vbo VBO*)
(bind-val particle_vao VAO*)

(define *particle-shader*
  (create_shader (file->string "examples/external/shader-tutorials/pbpic-particle.vert")
                 (file->string "examples/external/shader-tutorials/pbpic-particle.frag")))

;; init all the things
(call-as-xtlang
 (set! particle_vbo (create_vbo part (convert (* (convert np i32) idimp))))
 (set! particle_vao (create_vao))
 (bind_attribute particle_vao particle_vbo 0 2 5 0)
 (bind_attribute particle_vao particle_vbo 1 3 5 2)
 (set! particle_tex (bind_image_texture (create_texture) "assets/images/star.png"))
 (set! field_vbo (create_vbo field_arrows (convert (* 4 nxe ny))))
 (set! field_vao (create_vao))
 (bind_attribute field_vao field_vbo 0 2)
 void)

;; draw all the things

(bind-func gl_draw_field
  (lambda (program)
    ;; (glClear GL_COLOR_BUFFER_BIT)
    (copy_fields_to_arrows_buffer bxyze 40.)
    (remove_guff_from_arrows_buffer)
    (update_vbo_data field_vbo)
    (glUseProgram program)
    (draw_vertex_array field_vao GL_LINES 0 (convert (* 4 nxe ny)))
    void))

(bind-func gl_draw_particles
  (lambda (program:GLuint)
    (glClear GL_COLOR_BUFFER_BIT)
    ;; move particles, update VBO
    (update_vbo_data particle_vbo)
    ;; draw the world
    (let ((texloc (glGetUniformLocation program "particle_tex"))
          (nxnyloc (glGetUniformLocation program "nxny")))
      (glUseProgram program)
      (glUniform1i texloc 0)
      (glUniform2f nxnyloc (convert nxe) (convert ny)))
    (draw_vertex_array particle_vao GL_POINTS 0 (convert np))
    void))

(define gl-loop
  (lambda (delta-t)
    (gl_draw_particles *particle-shader*)
    ;; (gl_draw_field *field-shader*)
    (gl:swap-buffers *gl-window*)
    (callback (+ (now) (* *second* delta-t))
              'gl-loop
              delta-t)))

;; start it running
(gl-loop 1/30)

;; (call-as-xtlang
;;  (doloop (i (* nxe ny))
;;    (printf "%f %f %f %f\n"
;;            (convert (pref field_arrows (+ (* i 4) 0)) double)
;;            (convert (pref field_arrows (+ (* i 4) 1)) double)
;;            (convert (pref field_arrows (+ (* i 4) 2)) double)
;;            (convert (pref field_arrows (+ (* i 4) 3)) double)))
;;  (println))

;; (call-as-xtlang
;;  (doloop (i (* nxe ny))
;;    (printf "%f %f %f\n"
;;            (convert (pref bxyze (+ (* i 4) 0)) double)
;;            (convert (pref bxyze (+ (* i 4) 1)) double)
;;            (convert (pref bxyze (+ (* i 4) 2)) double)))
;;  (println))
