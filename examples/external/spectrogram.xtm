;;; openvg.xtm -- OpenVG drawing example

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libOpenVG

;;; Commentary:

;;

;;; Code:

(sys:load "libs/core/instruments.xtm")
(sys:load "libs/core/pc_ivl.xtm")
(sys:load "libs/external/audio_dsp_ext.xtm")

(bind-instrument fmsynth fmsynth_note_c fmsynth_fx)

(bind-func dsp:DSP
  (let ((F (stft_st_c 64 256 1024))
        (left:ComplexS* (F.left))
        (right:ComplexS* (F.right)))
    (lambda (in time chan dat)
      (cond ((< chan 2)
             (F chan
                (+ (* 1.0 (fmsynth in time chan dat))
                   0.0)))
            (else 0.0)))))

(dsp:set! dsp)

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)
(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define *gl-ctx* (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

;; first try to load from prebuilt stdlib
;; (sys:load "libs/xtm.xtm")
;; failing that compile on-the-fly
(sys:load "libs/external/shaders.xtm")
(sys:load "libs/external/openvg.xtm")

;; init xtm render pipeline
(xtm_render_setup width height)
(if (<> (xtm-vg-create-context width height) 1) (xtm_vg_print_error))

(bind-func post:XTMRENDERCB
  (let ((path (xtm_create_path))
        ;(p2 (xtm_create_path))
        (fill (vgCreatePaint))
        (fill2 (vgCreatePaint))        
        (fill_color:xtm_color* (alloc))
        (fill_color2:xtm_color* (alloc))
        (stroke (vgCreatePaint))
        (dl:Complexf* (dsp.left))
        (dr:Complexf* (dsp.left))
        (t 0)
        (stroke_color:xtm_color* (alloc))
        (clear_color:xtm_color* (alloc)))
    (afill! clear_color 0.0 0.0 0.0 1.0)
    (lambda (frame shader m v p data)
      (let ((i:float 0.0))
        (xtm_vg_clear_rect 0 0 (convert width) (convert height) clear_color)
        (dotimes (i 200.0)
          (afill! stroke_color 1.0 1.0 1.0 1.0)          
          (xtm_paint_set_stroke stroke stroke_color 0.0)
          (afill! fill_color 1. 0. 0. 0.5) 
          (xtm_paint_set_fill fill fill_color)          
          (xtm_draw_rect (convert (* 5. i)) 0.0 2. (* 30. (magC (pref dl (ftoi64 i)))))
          (afill! fill_color2 0. 1. 0. 0.5) 
          (xtm_paint_set_fill fill2 fill_color2)                    
          (xtm_draw_rect (convert (* 5. i))
                         (- height (* 30. (magC (pref dr (ftoi64 i)))))
                         2.
                         height))
        (xtm_vg_print_error)
        void))))

(bind-func gl_render
  (lambda ()
    (xtm_render null null null post null)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (begin
            (gl_render)
            (gl:swap-buffers *gl-ctx*)))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

;; now sound stuff


(define root 0)

;; first let's play with synth
(define l1
  (lambda (beat dur cell)
    (play fmsynth (pc:quantize (car cell) (pc:scale root 'aeolian))
          (cosr 90 10 2) (* dur .2) (random) 10.0)
    (callback (*metro* (+ beat (* dur .5))) 'l1
              (+ beat dur)
              dur
              (rotate cell 1))))

(l1 (*metro* 'get-beat 4) 1/4 '(60 63 62 67 72 65 84 77 65 67)) ;; start one playing quavers


;; start gl loop
(gl-loop (now) 1/30)
