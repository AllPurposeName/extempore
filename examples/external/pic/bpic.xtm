;;; bpic.xtm:examples -- example of the pic code in use

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; example file for running the PIC particle simulation

;;; Code:


(sys:load "libs/external/pic/bpic.xtm")

;; to start the simulation (an OpenGL canvas window should pop up
;; somewhere)
(run-bpic 1/30)

;; change the time step size (keep abs value below about 2 or it'll
;; crash)
(bpic_step.dt .04) ;; default
(bpic_step.dt -.1)


(bind-func particle_kick
  "give np particles (selected at random) a kick"
  (lambda (np x y z)
    (doloop (i np)
      (let ((idx (random 0 np)))
        (pset! part (+ 2 (* i 5))
               (+ x (pref part (+ 2 (* i 5)))))
        (pset! part (+ 3 (* i 5))
               (+ y (pref part (+ 3 (* i 5)))))
        (pset! part (+ 4 (* i 5))
               (+ z (pref part (+ 4 (* i 5)))))))))

;; give 1000 particles a kick in the direction {-3,0}
(particle_kick 10000 -100. -100. -100.)

;; change the parameters and try again
(particle_kick 1000 10. 0.)

(bind-func particle_drop
  "drop np particles (selected at random) at the same location"
  (lambda (np x y)
    (doloop (i np)
      (let ((idx (random 0 np)))
        (pset! part (+ 0 (* i 5)) x)
        (pset! part (+ 1 (* i 5)) y)))))

;; drop 5000 particles at a random point
(particle_drop 5000 (random (bpic_step.nx)) (random (bpic_step.nx)))

;; change our electrons...
(bpic_step.qme -1.) ;; default
;; to positrons
(bpic_step.qme 3.)
;; be ready to change it back otherwise it'll blow up if you leave it
;; too long.

(bpic_step.ipbc 0)


(bind-func init_field_xy
  (lambda (nx:i32)
    (let 
      (dotimes (i (* xdim ny))
        (pset! field (+ 0 (* 4 i)) (convert (/ i nxe) float))
        (pset! field (+ 1 (* 4 i)) (convert (% i nxe) float))))))


(bind-func order_test2
  (lambda (r:i64 c)
    (let ((i 0))
      (doloop (x r)
        (doloop (y c)
          (printf "x = %lld y = %lld idx = %lld i = %lld\n" x y (+ (* x c) y) i))))
    (println)))

(order_test2 4 3)



(+ x (* y xdim) (* z xdim ydim))


(order_test_3 2 2 2)

(bind-func field_add_ripple
  (lambda (xdim xp yp zp)
    (let ((ydim xdim)
          (nxe (+ 2 xdim))
          (ydime (+ 1 ydim))
          (idx 0))
      (doloop (x nxe)
        (doloop (y ydime)
          (set! idx (+ (* x nxe) y))
          (pset! fxyze (+ 0 idx) )
          (pset! fxyze (+ 1 idx) ))))))

(bpic_step.relativity 0)
(bpic_step.dt 0.1)
