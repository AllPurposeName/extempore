
;; xtmrender1.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; you can download the molecule obj model from:
;;
;; http://extempore.moso.com.au/extras/molecule.obj
;;

;;; Code:

;; make sure you include / on the end
(define path "assets/models/")

(sys:load "libs/external/glfw3.xtm")

(bind-val window GLFWwindow*)

(call-as-xtlang
 (glfw_init)
 ;; (glfw_set_core_profile)
 (set! window (glfw_create_window 1024 768))
 (glfwMakeContextCurrent window)
 (gl_print_driver_info))

(sys:load "libs/external/assimp.xtm")

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (rotate_matrix m (* .1 (i64tof frame)) 0.0 1.0 0.0)
    (xtm_draw_model (cast data xtm_node*) shader m v p)
    void))

(bind-func gl_render
  (lambda (model:xtm_node*)
    (xtm_render null render null null (cast model i8*))
    (glfwSwapBuffers window)
    void))

;; standard impromptu callback
(define opengl-loop
  (lambda (time dur model degree)
    (let ((v (now)))
      (gl_render model))
    (callback (+ time (* dur .1)) 'opengl-loop (+ time dur) dur model (+ degree .5))))

(define peppino (assimp_load_model path "/peppino.dae" aiProcess_Triangulate))

(xtm_render_setup 1024 768)
 
(opengl-loop (now) 2000 peppino 70.0)
