
;; xtmrender1.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; you can download the molecule obj model from:
;;
;; http://extempore.moso.com.au/extras/molecule.obj
;;

;;; Code:

;; make sure you include / on the end
(bind-val model_path i8* "assets/models/")

(sys:load "libs/external/assimp.xtm")
(sys:load "libs/external/glfw3.xtm")

(bind-val window GLFWwindow*)

(define width 1024)
(define height 768)
(bind-val width i32 width)
(bind-val height i32 height)

;; create a window
(call-as-xtlang
 (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
 ;; some of the shaders in the graphics pipeline use older glsl
 ;; versions, so we need a "compatibility" graphics context
 (set! window (glfw_init_and_create_compatibility_window width height)))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (rotate_matrix m (* .1 (i64tof frame)) 0.0 1.0 0.0)
    (xtm_draw_model (convert data xtm_node*) shader m v p)
    void))

(bind-func gl_render
  (lambda (model:xtm_node*)
    (xtm_render null render null null (convert model i8*))
    (glfwSwapBuffers window)
    void))

(bind-val peppino xtm_node*)

(call-as-xtlang
 (set! peppino (assimp_load_model model_path "/peppino.dae" aiProcess_Triangulate)))

(xtm_render_setup width height)

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_render peppino)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...
(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
