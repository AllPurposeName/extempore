(sys:load "libs/core/game-of-life.xtm")
(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-val fullscreen_quad_verts float* 16)

(bind-val world World*)
(bind-val tex Texture*)
(bind-val vbo VBO*)
(bind-val vao VAO*)

(bind-func world_texture_setup
  (lambda ()
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (Texture_id tex))
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGB
                  (convert (world_width world))
                  (convert (world_height world))
                  0
                  GL_RED
                  GL_BYTE
                  (world_data world))
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)))

(define *gol-shader*
  (create_shader (file->string "examples/external/game-of-life.vert")
                 (file->string "examples/external/game-of-life.frag")))

;; init
(call-as-xtlang
 (pfill! fullscreen_quad_verts
         ;; pos       texcoord
         -1.0  1.0 0.0 0.0
         1.0  1.0 1.0 0.0
         -1.0 -1.0 0.0 1.0
         1.0 -1.0 1.0 1.0)
 (set! world (world_create 256 128))
 ;; (world_set_to_checkerboard world)
 (world_init world .5)
 (set! vbo (create_vbo fullscreen_quad_verts 16))
 (bind_vbo vbo)
 (set! vao (create_vao))
 (bind_attribute vao vbo 0 2 16 0) ;; position
 (bind_attribute vao vbo 1 2 16 8) ;; tex_coord
 (set! tex (create_texture))
 (world_texture_setup)
 void)

(bind-func gl_draw
  (lambda (program)
    (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; run the simulation
    (world_step world)
    ;; update texture
    (glTexSubImage2D GL_TEXTURE_2D 0 0 0
                     (convert (world_width world))
                     (convert (world_height world))
                     GL_RED
                     GL_BYTE
                     (world_data world))
    ;; draw the world
    (glUniform1i (glGetUniformLocation program "tex") 0)
    (glUseProgram program)
    (draw_vertex_array vao GL_TRIANGLE_STRIP 0 4)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (begin
            (gl_draw *gol-shader*)
            (gl:swap-buffers *gl-window*)))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

;; start it running
(gl-loop (now) 1/15)
